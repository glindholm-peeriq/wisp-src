#ifdef OLD

	replaced by VIDEOCAP


			/************************************************************************/
			/*	      VIDEO - Video Interactive Development Environment		*/
			/*			Copyright (c) 1988, 1989, 1990			*/
			/*	 An unpublished work of International Digital Scientific Inc.	*/
			/*			    All rights reserved.			*/
			/************************************************************************/

/*					Reference standard include files.							*/

#include "video.h"
#include "vlocal.h"
#include "vdata.h"

static int kbm_first = TRUE;									/* First time control flag.	*/

int vkbmap(function,filename) int function; char *filename;					/* Load a new keyboard map.	*/
{
	register int i,j;									/* Working integers.		*/

	if (function == UNLOCK) kbm_first = FALSE;						/* Next load will take.		*/
	else if ((function == INITIALIZE) && kbm_first)						/* Is this the first time?	*/
	{
		kbm_first = FALSE;								/* No longer the 1st time.	*/
		j = vterminal();								/* Ask for the terminal type.	*/

		if (j == VT100)									/* Set up for a VT100.		*/
		{
			kp_mode		=	TRUE;
			fk_mode		=	0;

			gold_key 	= 	0;
			blue_key	=	DEC_VT_KP_0_KEY;
			grey_key	=	0;
			pink_key	=	0;

			home_key	=	001;

			up_arrow_key	=	ANSI_UP_ARROW_KEY;
			down_arrow_key	=	ANSI_DOWN_ARROW_KEY;
			left_arrow_key	=	ANSI_LEFT_ARROW_KEY;
			right_arrow_key	=	ANSI_RIGHT_ARROW_KEY;

			tab_key		=	011;	/* ^I */
			backtab_key	=	010;	/* ^H */

			last_screen_key	=	002;	/*^EB */
			next_screen_key	=	007;	/* ^F */

			delete_key	=	0177;
			insert_key	=	030;	/* ^X */
			remove_key	=	004;	/* ^D */
			clear_field_key	=	013;	/* ^K */
			clear_after_key	=	026;	/* ^V */
			clear_before_key =	025;	/* ^U */

			help_key	=	005;	/* ^E */

			cancel_key	=	0;
			enter_key	=	DEC_VT_KP_ENTER_KEY;
			return_key	=	015;

			fn1_key		=	ANSI_PF1_KEY;
			fn2_key		=	ANSI_PF2_KEY;
			fn3_key		=	ANSI_PF3_KEY;
			fn4_key		=	ANSI_PF4_KEY;
			fn5_key		=	DEC_VT_KP_7_KEY;
			fn6_key		=	DEC_VT_KP_8_KEY;
			fn7_key		=	DEC_VT_KP_9_KEY;
			fn8_key		=	DEC_VT_KP_MINUS_KEY;
			fn9_key		=	DEC_VT_KP_4_KEY;
			fn10_key	=	DEC_VT_KP_5_KEY;
			fn11_key	=	DEC_VT_KP_6_KEY;
			fn12_key	=	DEC_VT_KP_COMMA_KEY;
			fn13_key	= 	DEC_VT_KP_1_KEY;
			fn14_key	= 	DEC_VT_KP_2_KEY;
			fn15_key	= 	DEC_VT_KP_3_KEY;
			fn16_key	=	DEC_VT_KP_PERIOD_KEY;
			fn17_key	=	ANSI_PF1_KEY | BLUE_BIT;
			fn18_key	=	ANSI_PF2_KEY | BLUE_BIT;
			fn19_key	=	ANSI_PF3_KEY | BLUE_BIT;
			fn20_key	=	ANSI_PF4_KEY | BLUE_BIT;
			fn21_key	=	DEC_VT_KP_7_KEY | BLUE_BIT;
			fn22_key	=	DEC_VT_KP_8_KEY | BLUE_BIT;
			fn23_key	=	DEC_VT_KP_9_KEY | BLUE_BIT;
			fn24_key	=	DEC_VT_KP_MINUS_KEY | BLUE_BIT;
			fn25_key	=	DEC_VT_KP_4_KEY | BLUE_BIT;
			fn26_key	=	DEC_VT_KP_5_KEY | BLUE_BIT;
			fn27_key	=	DEC_VT_KP_6_KEY | BLUE_BIT;
			fn28_key	=	DEC_VT_KP_COMMA_KEY | BLUE_BIT;
			fn29_key	= 	DEC_VT_KP_1_KEY | BLUE_BIT;
			fn30_key	= 	DEC_VT_KP_2_KEY | BLUE_BIT;
			fn31_key	= 	DEC_VT_KP_3_KEY | BLUE_BIT;
			fn32_key	=	DEC_VT_KP_PERIOD_KEY | BLUE_BIT;

			meta_substitute[0][0] = 0; meta_substitute[0][1] = 0;
		}

		else if ((j == VT200) || (j == VT300))
		{
			kp_mode		=	0;
			fk_mode		=	0;

			gold_key 	= 	0;
			blue_key	=	DEC_VT_SELECT_KEY;
			grey_key	=	0;
			pink_key	=	0;

			home_key	=	DEC_VT_FIND_KEY;

			up_arrow_key	=	ANSI_UP_ARROW_KEY;
			down_arrow_key	=	ANSI_DOWN_ARROW_KEY;
			left_arrow_key	=	ANSI_LEFT_ARROW_KEY;
			right_arrow_key	=	ANSI_RIGHT_ARROW_KEY;

			tab_key		=	011; /* (^I) Tab Key */
			backtab_key	=	010; /* (^H) */

			last_screen_key	=	DEC_VT_PREVIOUS_SCREEN_KEY;
			next_screen_key	=	DEC_VT_NEXT_SCREEN_KEY;

			delete_key	=	0177;
			insert_key	=	DEC_VT_INSERT_KEY;
			remove_key	=	DEC_VT_REMOVE_KEY;
			clear_field_key	=	DEC_VT_INSERT_KEY | BLUE_BIT;
			clear_after_key	=	DEC_VT_REMOVE_KEY | BLUE_BIT;
			clear_before_key =	025; /* ^U */
			cancel_key	=	DEC_VT_FIND_KEY | BLUE_BIT;
			enter_key	=	DEC_VT_KP_ENTER_KEY;
			return_key	=	015;
			help_key	=	DEC_VT_F15_KEY;

			fn1_key		=	ANSI_PF1_KEY;
			fn2_key		=	ANSI_PF2_KEY;
			fn3_key		=	ANSI_PF3_KEY;
			fn4_key		=	ANSI_PF4_KEY;
			fn5_key		=	DEC_VT_F7_KEY;
			fn6_key		=	DEC_VT_F8_KEY;
			fn7_key		=	DEC_VT_F9_KEY;
			fn8_key		=	DEC_VT_F10_KEY;
			fn9_key		=	DEC_VT_F11_KEY;
			fn10_key	=	DEC_VT_F12_KEY;
			fn11_key	=	DEC_VT_F13_KEY;
			fn12_key	=	DEC_VT_F14_KEY;
			fn13_key	= 	DEC_VT_F17_KEY;
			fn14_key	= 	DEC_VT_F18_KEY;
			fn15_key	= 	DEC_VT_F19_KEY;
			fn16_key	=	DEC_VT_F20_KEY;
			fn17_key	=	ANSI_PF1_KEY | BLUE_BIT;
			fn18_key	=	ANSI_PF2_KEY | BLUE_BIT;
			fn19_key	=	ANSI_PF3_KEY | BLUE_BIT;
			fn20_key	=	ANSI_PF4_KEY | BLUE_BIT;
			fn21_key	=	DEC_VT_F7_KEY | BLUE_BIT;
			fn22_key	=	DEC_VT_F8_KEY | BLUE_BIT;
			fn23_key	=	DEC_VT_F9_KEY | BLUE_BIT;
			fn24_key	=	DEC_VT_F10_KEY | BLUE_BIT;
			fn25_key	=	DEC_VT_F11_KEY | BLUE_BIT;
			fn26_key	=	DEC_VT_F12_KEY | BLUE_BIT;
			fn27_key	=	DEC_VT_F13_KEY | BLUE_BIT;
			fn28_key	=	DEC_VT_F14_KEY | BLUE_BIT;
			fn29_key	= 	DEC_VT_F17_KEY | BLUE_BIT;
			fn30_key	= 	DEC_VT_F18_KEY | BLUE_BIT;
			fn31_key	= 	DEC_VT_F19_KEY | BLUE_BIT;
			fn32_key	=	DEC_VT_F20_KEY | BLUE_BIT;

			meta_substitute[0][0] = DEC_VT_F16_KEY;	meta_substitute[0][1] = fn16_key;
			meta_substitute[1][0] = DEC_VT_PREVIOUS_SCREEN_KEY; meta_substitute[1][1] = fn4_key;
			meta_substitute[2][0] = DEC_VT_NEXT_SCREEN_KEY; meta_substitute[2][1] = fn5_key;
			meta_substitute[3][0] = 0; meta_substitute[3][1] = 0;
		}

		else if (j == ATT605)
		{
			kp_mode		=	0;
			fk_mode		=	0;

			gold_key 	= 	0;
			blue_key	=	0;
			grey_key	=	0;
			pink_key	=	0;

			home_key	=	ATT_605_SHIFT_LEFT_ARROW_KEY;

			up_arrow_key	=	ANSI_UP_ARROW_KEY;
			down_arrow_key	=	ANSI_DOWN_ARROW_KEY;
			left_arrow_key	=	ANSI_LEFT_ARROW_KEY;
			right_arrow_key	=	ANSI_RIGHT_ARROW_KEY;

			tab_key		=	011; /* (^I) Tab Key */
			backtab_key	=	ATT_605_SHIFT_TAB_KEY;

			last_screen_key	=	ATT_605_SHIFT_UP_ARROW_KEY;
			next_screen_key	=	ATT_605_SHIFT_DOWN_ARROW_KEY;

			delete_key	=	010;	/* (Backspace Key) */
			insert_key	=	ATT_605_INSERT_KEY;
			remove_key	=	0177;	/* (DEL) (Delete Key) */
			clear_field_key	=	ATT_605_SHIFT_INSERT_KEY;
			clear_after_key	=	ATT_605_SHIFT_DELETE_KEY;
			clear_before_key =	025;	/* ^U */
			cancel_key	=	0;
			enter_key	=	015;				/* NOTE: Enter and return are the same.	*/
			return_key	=	015;
			help_key	=	ATT_605_SHIFT_HOME_KEY;

			fn1_key		=	ATT_605_F1_KEY;
			fn2_key		=	ATT_605_F2_KEY;
			fn3_key		=	ATT_605_F3_KEY;
			fn4_key		=	ATT_605_F4_KEY;
			fn5_key		=	ATT_605_F5_KEY;
			fn6_key		=	ATT_605_F6_KEY;
			fn7_key		=	ATT_605_F7_KEY;
			fn8_key		=	ATT_605_F8_KEY;
			fn9_key		=	ATT_605_F9_KEY;
			fn10_key	=	ATT_605_F10_KEY;
			fn11_key	=	ATT_605_F11_KEY;
			fn12_key	=	ATT_605_F12_KEY;
			fn13_key	= 	ATT_605_F13_KEY;
			fn14_key	= 	ATT_605_F14_KEY;
			fn15_key	= 	ATT_605_HOME_KEY;
			fn16_key	=	ATT_605_END_KEY;
			fn17_key	=	ATT_605_SHIFT_F1_KEY;
			fn18_key	=	ATT_605_SHIFT_F2_KEY;
			fn19_key	=	ATT_605_SHIFT_F3_KEY;
			fn20_key	=	ATT_605_SHIFT_F4_KEY;
			fn21_key	=	ATT_605_SHIFT_F5_KEY;
			fn22_key	=	ATT_605_SHIFT_F6_KEY;
			fn23_key	=	ATT_605_SHIFT_F7_KEY;
			fn24_key	=	ATT_605_SHIFT_F8_KEY;
			fn25_key	=	ATT_605_SHIFT_F9_KEY;
			fn26_key	=	ATT_605_SHIFT_F10_KEY;
			fn27_key	=	ATT_605_SHIFT_F11_KEY;
			fn28_key	=	ATT_605_SHIFT_F12_KEY;
			fn29_key	= 	ATT_605_SHIFT_F13_KEY;
			fn30_key	= 	ATT_605_SHIFT_F14_KEY;
			fn31_key	= 	ATT_605_PAGE_UP_KEY;
			fn32_key	=	ATT_605_PAGE_DOWN_KEY;

			meta_substitute[0][0] = 0;	meta_substitute[0][1] = 0;
		}

		else if (j == GENERIC_TERMINAL)
		{
			kp_mode		=	0;
			fk_mode		=	0;

			gold_key 	= 	GENERIC_GOLD_KEY;
			blue_key	=	GENERIC_BLUE_KEY;
			grey_key	=	GENERIC_GREY_KEY;
			pink_key	=	GENERIC_PINK_KEY;

			home_key	=	GENERIC_HOME_KEY;

			up_arrow_key	=	GENERIC_UP_ARROW_KEY;
			down_arrow_key	=	GENERIC_DOWN_ARROW_KEY;
			left_arrow_key	=	GENERIC_LEFT_ARROW_KEY;
			right_arrow_key	=	GENERIC_RIGHT_ARROW_KEY;

			tab_key		=	011; /* (^I) Tab Key */
			backtab_key	=	GENERIC_BACKTAB_KEY;

			last_screen_key	=	GENERIC_LAST_SCREEN_KEY;
			next_screen_key	=	GENERIC_NEXT_SCREEN_KEY;

			delete_key	=	010;	/* (Backspace Key) */
			insert_key	=	GENERIC_INSERT_KEY;
			remove_key	=	GENERIC_REMOVE_KEY;
			clear_field_key	=	GENERIC_CLEAR_FIELD_KEY;
			clear_after_key	=	GENERIC_CLEAR_AFTER_KEY;
			clear_before_key =	025;	/* ^U */
			cancel_key	=	GENERIC_CANCEL_KEY;
			enter_key	=	GENERIC_ENTER_KEY;
			return_key	=	015;
			help_key	=	GENERIC_HELP_KEY;

			fn1_key		=	GENERIC_FN1_KEY;
			fn2_key		=	GENERIC_FN2_KEY;
			fn3_key		=	GENERIC_FN3_KEY;
			fn4_key		=	GENERIC_FN4_KEY;
			fn5_key		=	GENERIC_FN5_KEY;
			fn6_key		=	GENERIC_FN6_KEY;
			fn7_key		=	GENERIC_FN7_KEY;
			fn8_key		=	GENERIC_FN8_KEY;
			fn9_key		=	GENERIC_FN9_KEY;
			fn10_key	=	GENERIC_FN10_KEY;
			fn11_key	=	GENERIC_FN11_KEY;
			fn12_key	=	GENERIC_FN12_KEY;
			fn13_key	= 	GENERIC_FN13_KEY;
			fn14_key	= 	GENERIC_FN14_KEY;
			fn15_key	= 	GENERIC_FN15_KEY;
			fn16_key	=	GENERIC_FN16_KEY;
			fn17_key	=	GENERIC_FN17_KEY;
			fn18_key	=	GENERIC_FN18_KEY;
			fn19_key	=	GENERIC_FN19_KEY;
			fn20_key	=	GENERIC_FN20_KEY;
			fn21_key	=	GENERIC_FN21_KEY;
			fn22_key	=	GENERIC_FN22_KEY;
			fn23_key	=	GENERIC_FN23_KEY;
			fn24_key	=	GENERIC_FN24_KEY;
			fn25_key	=	GENERIC_FN25_KEY;
			fn26_key	=	GENERIC_FN26_KEY;
			fn27_key	=	GENERIC_FN27_KEY;
			fn28_key	=	GENERIC_FN28_KEY;
			fn29_key	= 	GENERIC_FN29_KEY;
			fn30_key	= 	GENERIC_FN30_KEY;
			fn31_key	= 	GENERIC_FN31_KEY;
			fn32_key	=	GENERIC_FN32_KEY;

			meta_substitute[0][0] = 0;	meta_substitute[0][1] = 0;
		}
		else return(FAILURE);								/* All else is unsupported.	*/
	}

	else if ((function == LOAD_FROM_FILE) && kbm_first)					/* Is this the first time?	*/
	{
		kbm_first = FALSE;								/* No longer the first time.	*/
		vre("vkbmap()-F-Loading keyboard map from a file is not yet supported.");
		return(FAILURE);
	}

	return(SUCCESS);       									/* Return to caller, all ok...	*/
}

#endif

