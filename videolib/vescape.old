#ifdef OLD

	replaced by VIDEOCAP



			/************************************************************************/
			/*	      VIDEO - Video Interactive Development Environment		*/
			/*			Copyright (c) 1988, 1989, 1990			*/
			/*	 An unpublished work of International Digital Scientific Inc.	*/
			/*			    All rights reserved.			*/
			/************************************************************************/


/*						Include standard header files.							*/

#include <ctype.h>									/* Include character typing macros.	*/

#include "video.h"									/* Include video definitions.		*/
#include "vlocal.h"									/* Include internal video definitions.	*/
#include "vdata.h"									/* Include video data base.		*/


/*						Subroutine entry point.								*/

int vescape()
{
	register int i, j, seq_id;							/* Escape sequence ID code.		*/
	unsigned char c, c1, c2;							/* Working characters.			*/
	unsigned char vgetc();								/* Internal get character function.	*/
	unsigned char vcheck();								/* Internal check for char function.	*/
	int found, valid;								/* Fallout of processing.		*/
	unsigned char instring[MAX_ESC*4];						/* Working string.			*/

	if (tttype == GENERIC_TERMINAL)							/* Support via a generic definition?	*/
	{
		seq_id = 0;								/* Assume not a valid sequence.		*/

		found = FALSE;								/* The escape sequence is not found.	*/
		valid = TRUE;								/* Assume sequence is valid.		*/
		i = 0;									/* Start a position 0.			*/
#ifdef	MSDOS
		instring[i] = '\200';							/* All must start with an escape.	*/
#else	/* VMS or unix */
		instring[i] = '\033';							/* All must start with an escape.	*/
#endif	/* VMS or unix */

		while (!found && valid)							/* Loop until found or not valid.	*/
		{
			i++;								/* Count the character.			*/
			c = vgetc();							/* Get a character.			*/
			instring[i] = c;						/* Store the character.			*/
			instring[i+1] = '\0';						/* Store a trailing null.		*/
			j = match(c,i,instring);					/* Do the strings match.		*/
			if (j < 0) valid = FALSE;					/* No chance of a match.		*/
			else if (j > 0)							/* Did we get a perfect match?		*/
			{
				seq_id = j;						/* Yes, then store the sequence id.	*/
				found = TRUE;						/* Stop looking.			*/
			}
		}
		return(seq_id);								/* Return what it is.			*/
	}

	c = vgetc();									/* See if there is a follow-on char.	*/
	seq_id = c;									/* Return the char if not an esc seq.	*/

	if (c == 'O')										/* SS3 series escape sequence?	*/
	{
		c = vgetc();									/* Get determination character.	*/

		if ((c >= 'P') && (c <= 'S'))	   seq_id = ANSI_PF1_KEY + (c - 'P');		/* Is it a PF sequence?		*/
	        else if ((c >= 'p') && (c <= 'y')) seq_id = DEC_VT_KP_0_KEY + (c - 'p');	/* Is it a keypad numeric?	*/
		else if ((c >= 'c') && (c <= 'j')) seq_id = ATT_605_F1_KEY + (c - 'c');		/* Is it an F sequence?		*/
		else if ((c >= 'C') && (c <= 'J')) seq_id = ATT_605_SHIFT_F1_KEY + (c-'C');	/* Shifted F sequence?		*/
		else if ((c >= 'l') && (c <= 'n')) seq_id = DEC_VT_KP_COMMA_KEY + (c - 'l');	/* Keypad comma, minus, period?	*/
		else if ((c == 'M'))		   seq_id = DEC_VT_KP_ENTER_KEY;		/* The enter key?		*/
	}

	else if (c == 'N')									/* SS2 escape sequence?		*/
	{
		c = vgetc();									/* Get determination character.	*/

		if ((c >= 'o') && (c <= 't')) seq_id = ATT_605_F9_KEY + (c - 'o');		/* Is it an F sequence?		*/
		else if ((c >= 'O') && (c <= 'T')) seq_id = ATT_605_SHIFT_F9_KEY + (c-'O');	/* Shifted F sequence?		*/
	}

	else if (c == '[')									/* CSI escape sequence?		*/
	{
		c = vgetc();									/* Get next character.		*/

		if ((c >= 'A') && (c <= 'D')) seq_id = ANSI_UP_ARROW_KEY + (c - 'A');		/* Is it an arrow key?		*/
		else if (isdigit(c))								/* Is it a digit character?	*/
		{
			if ((c1 = vgetc()) == '~')						/* Tilda terminator?		*/
			{
				if ((c >= '1') && (c <= '6')) seq_id = DEC_VT_FIND_KEY + (c-'1');	/* VT200 special keys?	*/
			}

			else if (isdigit(c1) && ((c2 = vgetc()) == '~'))		/* Is the second character a digit?	*/
			{
				if ((c >= '1') && (c1 >= '7') && (c1 <= '9')) seq_id = DEC_VT_F6_KEY + (c1 - '7');
				if ((c >= '2') && (c1 >= '0') && (c1 <= '1')) seq_id = DEC_VT_F9_KEY + (c1 - '0');
				if ((c >= '2') && (c1 >= '3') && (c1 <= '6')) seq_id = DEC_VT_F11_KEY + (c1 - '3');
				if ((c >= '2') && (c1 >= '8') && (c1 <= '9')) seq_id = DEC_VT_F15_KEY + (c1 - '8');
				if ((c >= '3') && (c1 >= '1') && (c1 <= '4')) seq_id = DEC_VT_F17_KEY + (c1 - '1');
			}

			else if ((c == '2') && (c1 == 'J')) seq_id = ATT_605_SHIFT_HOME_KEY;			/* Shift home?	*/

			else if ((c == '2') && (c1 == '4') && (c2 == ';'))		/* Is it the end key?			*/
			{
				vgetc(); vgetc();					/* Eat the rest of the string.		*/
				seq_id = ATT_605_END_KEY;				/* Record that it is the end key.	*/
			}
		}
		else if (c == '@') seq_id = ATT_605_INSERT_KEY;				/* Insert key?				*/
		else if (c == 'H') seq_id = ATT_605_HOME_KEY;				/* Home key?				*/
		else if (c == 'L') seq_id = ATT_605_SHIFT_INSERT_KEY;			/* Shift insert key?			*/
		else if (c == 'M') seq_id = ATT_605_SHIFT_DELETE_KEY;			/* Shifted delete?			*/
		else if (c == 'P') seq_id = ATT_605_DELETE_KEY;				/* Convert to a delete character.	*/
		else if (c == 'T') seq_id = ATT_605_SHIFT_UP_ARROW_KEY;			/* Shifted up-arrow?			*/
		else if (c == 'S') seq_id = ATT_605_SHIFT_DOWN_ARROW_KEY;		/* Shifted down-arrow?			*/
		else if (c == 'U') seq_id = ATT_605_PAGE_UP_KEY;			/* Next screen key?			*/
		else if (c == 'V') seq_id = ATT_605_PAGE_DOWN_KEY;			/* Previous screen key?			*/
		else if (c == 'Z') seq_id = ATT_605_SHIFT_TAB_KEY;			/* Shift tab.				*/
		else if (c == ' ')
		{
			c = vgetc();
			if (c == 'A') seq_id = ATT_605_SHIFT_LEFT_ARROW_KEY;
			else if (c == '@') seq_id = ATT_605_SHIFT_RIGHT_ARROW_KEY;
		}
	}
	return(seq_id);
}

static int match(c, pos, string) unsigned char c; int pos; unsigned char *string;	/* Check for an escape sequence match.	*/
{
	register int i,j;								/* Working registers.			*/

	j = -1;										/* Assume no match will be found.	*/
	for (i = 0; (i < MAX_GENERIC) && (j <= 0); i++)					/* Loop through every escape sequence.	*/
	{
		if (c == vk_sequence[i][pos])						/* Do these characters match?		*/
		{
			j = 0;								/* Found one, so we can stop trying.	*/
			if (strcmp(&vk_sequence[i][0],string) == 0)			/* Is this a perfect match?		*/
			{
				j = vk_generic[i];					/* Yes, then we have found the seq.	*/
			}
		}
	}
	return(j);									/* Return what we found to the caller.	*/
}

#endif

