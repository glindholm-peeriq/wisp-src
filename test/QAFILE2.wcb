000100* $Id:$

      /*****************************************************************
      *                                                                *
      *                       IDENTIFICATION DIVISION                  *
      *                                                                *
      ******************************************************************

       IDENTIFICATION DIVISION.
       PROGRAM-ID.
           QAFILE2.
       AUTHOR.
           Greg Lindholm.
       DATE-WRITTEN.
           12/07/90.

      /*****************************************************************
      *                                                                *
      *                         ENVIRONMENT DIVISION                   *
      *                                                                *
      ******************************************************************

       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER.
           WANG-VS.
       OBJECT-COMPUTER.
           WANG-VS.
       FIGURATIVE-CONSTANTS.
           BLINK-BIT IS "10"
           PROTECT-BIT IS "04"
           DIM-BIT IS "08"
           TAB-STOP IS "86"
           BLINKING-DISPLAY IS "94"
           BRITE IS "84"
           LF IS "0A"
           NO-ECHO IS "98"
003800     HEX-00 IS "00", HEX-01 IS "01", HEX-20 IS "20",
003900     HEX-40 IS "40", HEX-80 IS "80", HEX-A0 IS "A0".

      /*****************************************************************
      *                                                                *
      *                         INPUT-OUTPUT SECTION                   *
      *                                                                *
      ******************************************************************
      *
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
      *
           SELECT CRT
               ASSIGN TO "CRT",      "DISPLAY",
               ORGANIZATION    IS SEQUENTIAL
               ACCESS MODE     IS RANDOM
               RELATIVE KEY    IS LINENUM
               PFKEY           IS PF-KEY
               CURSOR POSITION IS CURSOR-POS
               FILE STATUS     IS FILSTAT.

           SELECT LOG-FILE
               ASSIGN TO "LOGFILE", "DISK", NODISPLAY,
               ORGANIZATION  IS SEQUENTIAL
               ACCESS MODE   IS DYNAMIC
               FILE STATUS   IS FILSTAT.

           SELECT PRINT-FILE
               ASSIGN TO "PRTFIL", "PRINTER", DISPLAY,
               FILE STATUS     IS FILE-PRT-STAT.

005000     SELECT SCRFILE
005100         ASSIGN TO "SCRFILE",  "PRINTER"
005200         ORGANIZATION    IS SEQUENTIAL
005300         ACCESS MODE     IS SEQUENTIAL
005400         FILE STATUS     IS FSTAT.

           SELECT LARGE-FILE
               ASSIGN TO "LARGE", "DISK",  NODISPLAY,
               FILE STATUS     IS FILSTAT.

      ******************************************************************
      ******************************************************************

           SELECT FILE-SF
               ASSIGN TO "SEQFIX",    "DISK",     NODISPLAY,
               ORGANIZATION    IS SEQUENTIAL
               ACCESS MODE     IS SEQUENTIAL
               FILE STATUS     IS FILE-SF-STAT.

           SELECT FILE-SV
               ASSIGN TO "SEQVAR",    "DISK",     NODISPLAY,
               ORGANIZATION    IS SEQUENTIAL
               ACCESS MODE     IS SEQUENTIAL
               FILE STATUS     IS FILE-SV-STAT.

           SELECT FILE-IF
               ASSIGN TO "IDXFIX",    "DISK",     NODISPLAY,
               ORGANIZATION    IS INDEXED
               ACCESS MODE     IS DYNAMIC
               RECORD KEY      IS IF-R1-KEY
               FILE STATUS     IS FILE-IF-STAT.

      *$COMPRESSFILE
           SELECT FILE-IFC
               ASSIGN TO "IDXFIXC",    "DISK",     NODISPLAY,
               ORGANIZATION    IS INDEXED
               ACCESS MODE     IS DYNAMIC
               RECORD KEY      IS IFC-R1-KEY
               FILE STATUS     IS FILE-IFC-STAT.

           SELECT FILE-IV
               ASSIGN TO "IDXVAR",    "DISK",     NODISPLAY,
               ORGANIZATION    IS INDEXED
               ACCESS MODE     IS DYNAMIC
               RECORD KEY      IS IV-R1-KEY
               FILE STATUS     IS FILE-IV-STAT.

           SELECT FILE-RF
               ASSIGN TO "RELFIX",    "DISK",     NODISPLAY,
               ORGANIZATION    IS RELATIVE
               ACCESS MODE     IS DYNAMIC
                  RELATIVE KEY IS RF-WS-KEY
               FILE STATUS     IS FILE-RF-STAT.

           SELECT FILE-RV
               ASSIGN TO "RELVAR",    "DISK",     NODISPLAY,
               ORGANIZATION    IS RELATIVE
               ACCESS MODE     IS DYNAMIC
                  RELATIVE KEY IS RV-WS-KEY
               FILE STATUS     IS FILE-RV-STAT.

           SELECT FILE-AF
               ASSIGN TO "ALTFIX",    "DISK",     NODISPLAY,
               ORGANIZATION         IS INDEXED
               ACCESS MODE          IS DYNAMIC
               RECORD KEY           IS AF-R1-KEY
               ALTERNATE RECORD KEY IS AF-R1-ALT1
                                    IS AF-R1-ALT2 DUPLICATES
               FILE STATUS          IS FILE-AF-STAT.

           SELECT FILE-AV
               ASSIGN TO "ALTVAR",    "DISK",     NODISPLAY,
               ORGANIZATION         IS INDEXED
               ACCESS MODE          IS DYNAMIC
               RECORD KEY           IS AV-R1-KEY
               ALTERNATE RECORD KEY IS AV-R1-ALT1
                                    IS AV-R1-ALT2 DUPLICATES
               FILE STATUS          IS FILE-AV-STAT.

      *	   VISION 3	       
           SELECT FILE-AV3
               ASSIGN TO "ALTVARV3",    "DISK",     NODISPLAY,
               ORGANIZATION         IS INDEXED
               ACCESS MODE          IS DYNAMIC
               RECORD KEY           IS AV3-R1-KEY
               ALTERNATE RECORD KEY IS AV3-R1-ALT1
                                    IS AV3-R1-ALT2 DUPLICATES
               FILE STATUS          IS FILE-AV3-STAT.

      *	   VISION 2	       
           SELECT FILE-AV2
               ASSIGN TO "ALTVARV2",    "DISK",     NODISPLAY,
               ORGANIZATION         IS INDEXED
               ACCESS MODE          IS DYNAMIC
               RECORD KEY           IS AV2-R1-KEY
               ALTERNATE RECORD KEY IS AV2-R1-ALT1
                                    IS AV2-R1-ALT2 DUPLICATES
               FILE STATUS          IS FILE-AV2-STAT.


      *	   VISION 4	
      *$ACU_CODE PROCESS  
      *    SELECT FILE-AV4
      *        ASSIGN TO "ALTVARV4",    "DISK",     NODISPLAY,
      *        ORGANIZATION         IS INDEXED
      *        ACCESS MODE          IS DYNAMIC
      *        RECORD KEY           IS AV4-R1-KEY
      *        ALTERNATE RECORD KEY IS AV4-R1-ALT1
      *                             IS AV4-R1-ALT2 DUPLICATES
      *        FILE STATUS          IS FILE-AV4-STAT.
      *$ACU_END
           
      *$MF_CODE PROCESS
      $SET IDXFORMAT"4"
      *    SELECT FILE-AV4
      *        ASSIGN TO "ALTVAR4",    "DISK",     NODISPLAY,
      *        ORGANIZATION         IS INDEXED
      *        ACCESS MODE          IS DYNAMIC
      *        RECORD KEY           IS AV4-R1-KEY
      *        ALTERNATE RECORD KEY IS AV4-R1-ALT1
      *                             IS AV4-R1-ALT2 DUPLICATES
      *        FILE STATUS          IS FILE-AV4-STAT.
      *$MF_END
	       
      *$MF_CODE PROCESS
      $SET IDXFORMAT"8"
      *$MF_END

           SELECT FILE-AV8
               ASSIGN TO "ALTVAR8",    "DISK",     NODISPLAY,
               ORGANIZATION         IS INDEXED
               ACCESS MODE          IS DYNAMIC
               RECORD KEY           IS AV8-R1-KEY
               ALTERNATE RECORD KEY IS AV8-R1-ALT1
                                    IS AV8-R1-ALT2 DUPLICATES
               FILE STATUS          IS FILE-AV8-STAT.

           SELECT FILE-HUGE
               ASSIGN TO "HUGE",   "DISK",     NODISPLAY,
               ORGANIZATION         IS INDEXED
               ACCESS MODE          IS DYNAMIC
               RECORD KEY           IS HUGE-R1-KEY
               FILE STATUS          IS FILE-HUGE-STAT.

      *$MF_CODE PROCESS
      $SET IDXFORMAT"0"
      *$MF_END
      
	       
      /*****************************************************************
      *                                                                *
      *                      DATA DIVISION - FILE SECTION              *
      *                                                                *
      ******************************************************************
      *
       DATA DIVISION.
       FILE SECTION.
      *
       FD  CRT
           LABEL RECORDS ARE OMITTED.
       01  CRTREC.
           03  CRTREC-OA.
               05  CRTREC-OA-1             PIC X.
               05  CRTREC-OA-2             PIC X.
               05  CRTREC-OA-3             PIC X.
               05  CRTREC-OA-4             PIC X.
           03  CRTREC-MAPPING-AREA.
               05  CRTREC-ROW  OCCURS 24 TIMES.
                   10 CRTREC-X OCCURS 80 TIMES PIC X.

       FD  LOG-FILE
           VALUE OF FILENAME IS LOG-FIL,
                    LIBRARY  IS LOG-LIB,
                    VOLUME   IS LOG-VOL.

       01  LOG-RECORD.
           05  LOG-HEADER           PIC X(8).
           05  LOG-DATA             PIC X(71).
           05  LOG-NEWLINE          PIC X(1).

       FD  PRINT-FILE
           VALUE OF FILENAME IS PRT-FILE-NAME
                    LIBRARY  IS PRT-LIBRARY
                    VOLUME   IS PRT-VOLUME.

       01  PRT-RECORD   PIC X(80).

007700 FD  SCRFILE
007800     RECORD CONTAINS 90 CHARACTERS
007900     LABEL RECORDS OMITTED
008000     VALUE OF FILENAME IS W001-FILE
008100              LIBRARY  IS W001-LIB
008200              VOLUME   IS W001-VOL.
008400
008500 01  PRINT-LINE.
008600     05  FILLER                  PIC X(090).

       FD  LARGE-FILE
           VALUE OF FILENAME IS "LARGE".

       01  LARGE-RECORD.
           05  LARGE-CNT      PIC 999999.
           05  LARGE-DATA     PIC X(74).

      ******************************************************************
      ******************************************************************

      ************
       FD  FILE-SF
           VALUE OF FILENAME IS FIL-FOR-FILE-SF
                    LIBRARY  IS SAMPLE-LIB
                    VOLUME   IS SAMPLE-VOL.

       01  SF-R1.
           03  SF-R1-KEY                      PIC 9(10).
           03  SF-R1-F1                       PIC X(35).

      ************
       FD  FILE-SV
           RECORD VARYING FROM 45 TO 80 CHARACTERS
           VALUE OF FILENAME IS FIL-FOR-FILE-SV
                    LIBRARY  IS SAMPLE-LIB
                    VOLUME   IS SAMPLE-VOL.

       01  SV-R1.
           03  SV-R1-KEY                      PIC 9(10).
           03  SV-R1-F1                       PIC X(35).
       01  SV-R2.
           03  SV-R2-KEY                      PIC 9(10).
           03  SV-R2-F1                       PIC X(35).
           03  SV-R2-F2                       PIC X(35).

      ************
       FD  FILE-IF
           VALUE OF FILENAME IS FIL-FOR-FILE-IF
                    LIBRARY  IS SAMPLE-LIB
                    VOLUME   IS SAMPLE-VOL.

       01  IF-R1.
           03  IF-R1-KEY                      PIC 9(10).
           03  IF-R1-F1                       PIC X(35).

      ************
       FD  FILE-IFC
           VALUE OF FILENAME IS FIL-FOR-FILE-IFC
                    LIBRARY  IS SAMPLE-LIB
                    VOLUME   IS SAMPLE-VOL.

       01  IFC-R1.
           03  IFC-R1-KEY                      PIC 9(10).
           03  IFC-R1-F1                       PIC X(35).

      ************
       FD  FILE-IV
           RECORD VARYING FROM 45 TO 80 CHARACTERS
           VALUE OF FILENAME IS FIL-FOR-FILE-IV
                    LIBRARY  IS SAMPLE-LIB
                    VOLUME   IS SAMPLE-VOL.

       01  IV-R1.
           03  IV-R1-KEY                      PIC 9(10).
           03  IV-R1-F1                       PIC X(35).
       01  IV-R2.
           03  IV-R2-KEY                      PIC 9(10).
           03  IV-R2-F1                       PIC X(35).
           03  IV-R2-F2                       PIC X(35).

      ************
       FD  FILE-RF
           VALUE OF FILENAME IS FIL-FOR-FILE-RF
                    LIBRARY  IS SAMPLE-LIB
                    VOLUME   IS SAMPLE-VOL.

       01  RF-R1.
           03  RF-R1-KEY                      PIC 9(10).
           03  RF-R1-F1                       PIC X(35).

      ************
       FD  FILE-RV
           RECORD VARYING FROM 45 TO 80 CHARACTERS
           VALUE OF FILENAME IS FIL-FOR-FILE-RV
                    LIBRARY  IS SAMPLE-LIB
                    VOLUME   IS SAMPLE-VOL.

       01  RV-R1.
           03  RV-R1-KEY                      PIC 9(10).
           03  RV-R1-F1                       PIC X(35).

       01  RV-R2.
           03  RV-R2-KEY                      PIC 9(10).
           03  RV-R2-F1                       PIC X(35).
           03  RV-R2-F2                       PIC X(35).


      ************
       FD  FILE-AF
           VALUE OF FILENAME IS FIL-FOR-FILE-AF
                    LIBRARY  IS SAMPLE-LIB
                    VOLUME   IS SAMPLE-VOL.

       01  AF-R1.
           03  AF-R1-KEY                      PIC 9(10).
           03  AF-R1-ALT1                     PIC 9(5).
           03  AF-R1-ALT2                     PIC 9(5).
           03  AF-R1-F1                       PIC X(35).

      ************
       FD  FILE-AV
           RECORD VARYING FROM 55 TO 90 CHARACTERS
           VALUE OF FILENAME IS FIL-FOR-FILE-AV
                    LIBRARY  IS SAMPLE-LIB
                    VOLUME   IS SAMPLE-VOL.

       01  AV-R1.
           03  AV-R1-KEY                      PIC 9(10).
           03  AV-R1-ALT1                     PIC 9(5).
           03  AV-R1-ALT2                     PIC 9(5).
           03  AV-R1-F1                       PIC X(35).
       01  AV-R2.
           03  AV-R2-KEY                      PIC 9(10).
           03  AV-R2-ALT1                     PIC 9(5).
           03  AV-R2-ALT2                     PIC 9(5).
           03  AV-R2-F1                       PIC X(35).
           03  AV-R2-F2                       PIC X(35).

      ************
       FD  FILE-AV2
           RECORD VARYING FROM 55 TO 90 CHARACTERS
           VALUE OF FILENAME IS FIL-FOR-FILE-AV2
                    LIBRARY  IS SAMPLE-LIB
                    VOLUME   IS SAMPLE-VOL.

       01  AV2-R1.
           03  AV2-R1-KEY                      PIC 9(10).
           03  AV2-R1-ALT1                     PIC 9(5).
           03  AV2-R1-ALT2                     PIC 9(5).
           03  AV2-R1-F1                       PIC X(35).
       01  AV2-R2.
           03  AV2-R2-KEY                      PIC 9(10).
           03  AV2-R2-ALT1                     PIC 9(5).
           03  AV2-R2-ALT2                     PIC 9(5).
           03  AV2-R2-F1                       PIC X(35).
           03  AV2-R2-F2                       PIC X(35).

      ************
       FD  FILE-AV3
           RECORD VARYING FROM 55 TO 90 CHARACTERS
           VALUE OF FILENAME IS FIL-FOR-FILE-AV3
                    LIBRARY  IS SAMPLE-LIB
                    VOLUME   IS SAMPLE-VOL.

       01  AV3-R1.
           03  AV3-R1-KEY                      PIC 9(10).
           03  AV3-R1-ALT1                     PIC 9(5).
           03  AV3-R1-ALT2                     PIC 9(5).
           03  AV3-R1-F1                       PIC X(35).
       01  AV3-R2.
           03  AV3-R2-KEY                      PIC 9(10).
           03  AV3-R2-ALT1                     PIC 9(5).
           03  AV3-R2-ALT2                     PIC 9(5).
           03  AV3-R2-F1                       PIC X(35).
           03  AV3-R2-F2                       PIC X(35).

      ************
       FD  FILE-AV4
           RECORD VARYING FROM 55 TO 90 CHARACTERS
           VALUE OF FILENAME IS FIL-FOR-FILE-AV4
                    LIBRARY  IS SAMPLE-LIB
                    VOLUME   IS SAMPLE-VOL.

       01  AV4-R1.
           03  AV4-R1-KEY                      PIC 9(10).
           03  AV4-R1-ALT1                     PIC 9(5).
           03  AV4-R1-ALT2                     PIC 9(5).
           03  AV4-R1-F1                       PIC X(35).
       01  AV4-R2.
           03  AV4-R2-KEY                      PIC 9(10).
           03  AV4-R2-ALT1                     PIC 9(5).
           03  AV4-R2-ALT2                     PIC 9(5).
           03  AV4-R2-F1                       PIC X(35).
           03  AV4-R2-F2                       PIC X(35).

      ************
       FD  FILE-AV8
           RECORD VARYING FROM 55 TO 90 CHARACTERS
           VALUE OF FILENAME IS FIL-FOR-FILE-AV8
                    LIBRARY  IS SAMPLE-LIB
                    VOLUME   IS SAMPLE-VOL.

       01  AV8-R1.
           03  AV8-R1-KEY                      PIC 9(10).
           03  AV8-R1-ALT1                     PIC 9(5).
           03  AV8-R1-ALT2                     PIC 9(5).
           03  AV8-R1-F1                       PIC X(35).
       01  AV8-R2.
           03  AV8-R2-KEY                      PIC 9(10).
           03  AV8-R2-ALT1                     PIC 9(5).
           03  AV8-R2-ALT2                     PIC 9(5).
           03  AV8-R2-F1                       PIC X(35).
           03  AV8-R2-F2                       PIC X(35).


      ************
       FD  FILE-HUGE
           VALUE OF FILENAME IS FIL-FOR-FILE-HUGE
                    LIBRARY  IS LIB-FOR-FILE-HUGE
                    VOLUME   IS VOL-FOR-FILE-HUGE.

       01  HUGE-R1.
           03  HUGE-R1-KEY                PIC 9(12).
           03  HUGE-R1-F1                 PIC X(1012).

      /*****************************************************************
      *                                                                *
      *                         WORKING STORAGE                        *
      *                                                                *
      ******************************************************************

       WORKING-STORAGE SECTION.

       01  INDEX-COUNTER                  PIC 9(5).
       01  RECORD-CNT                     PIC 9(5).
       01  FILSTAT.
           03  ERR-FLAG                   PIC X(01).
           03  PFK-BYTE                   PIC X(01).

       01  FILE-PRT-STAT                  PIC X(2).

       01  RET-CODE.
           05  RET-CODE-1          BINARY VALUE 0.
           05  RET-CODE-2	   BINARY VALUE 0.
       01  RNUM   PIC 9(10).

       01  SCRATCH-TYPE-LIBRARY		   PIC X VALUE "L".


      ******************************************************************
       01  PROGRESS-ROW-NUM		  PIC 99 VALUE 1.
       01  NEXT-PROGRESS-ROW	          PIC X(79) VALUE SPACES.

       01  PROGRESS-TITLE  PIC X(40) VALUE "PROGRESS SCREEN TITLE".
       01  PROGRESS-FOOTER PIC X(40) VALUE "PROGRESS SCREEN FOOTER".
       01  PROGRESS-ROWS.
           05  FILLER OCCURS 20 TIMES.
	       10  PROGRESS-ROW PIC X(79).

       01  PROGRESS-LOCK-ORDER-AREA.
           05  PROGRESS-LOCK-OA-ROW     PIC X VALUE HEX-01.
           05  PROGRESS-LOCK-OA-WCC     PIC X VALUE HEX-20.
           05  PROGRESS-LOCK-OA-CCOL    PIC X VALUE HEX-01.
           05  PROGRESS-LOCK-OA-CROW    PIC X VALUE HEX-01.

       01  PROGRESS-UNLOCK-ORDER-AREA.
           05  PROGRESS-UNLOCK-OA-ROW     PIC X VALUE HEX-01.
           05  PROGRESS-UNLOCK-OA-WCC     PIC X VALUE HEX-80.
           05  PROGRESS-UNLOCK-OA-CCOL    PIC X VALUE HEX-01.
           05  PROGRESS-UNLOCK-OA-CROW    PIC X VALUE HEX-01.
           
       01  PROGRESS-SCREEN USAGE IS DISPLAY-WS.
           05  FILLER PIC X(40)      ROW  1 COLUMN 20
               SOURCE PROGRESS-TITLE.
           05  FILLER OCCURS 20 TIMES.
	       10  FILLER PIC X(79)  ROW  3 COLUMN  2
	           SOURCE PROGRESS-ROW.
           05  FILLER PIC X(40)      ROW 24 COLUMN 20
               SOURCE PROGRESS-FOOTER.

      ******************************************************************

       01  FILE-SF-STAT                    PIC X(2).
       01  FILE-SV-STAT                    PIC X(2).

       01  FILE-IF-STAT                    PIC X(2).
       01  FILE-IFC-STAT                   PIC X(2).
       01  FILE-IV-STAT                    PIC X(2).

       01  FILE-RF-STAT                    PIC X(2).
       01  FILE-RV-STAT                    PIC X(2).

       01  FILE-AF-STAT                    PIC X(2).
       01  FILE-AV-STAT                    PIC X(2).

       01  FILE-AV2-STAT                    PIC X(2).
       01  FILE-AV3-STAT                    PIC X(2).
       01  FILE-AV4-STAT                    PIC X(2).
       01  FILE-AV8-STAT                    PIC X(2).
       
       01  FILE-HUGE-STAT                   PIC X(2).

      ******************************************************************

       01  SAMPLE-FIL                      PIC X(8) VALUE SPACES.
       01  SAMPLE-LIB                      PIC X(8) VALUE "LIBSAM".
       01  SAMPLE-VOL                      PIC X(6) VALUE "VOLOUT".

       01  FIL-FOR-FILE-SF                 PIC X(8) VALUE "SEQFIX".
       01  FIL-FOR-FILE-SV                 PIC X(8) VALUE "SEQVAR".

       01  FIL-FOR-FILE-IF                 PIC X(8) VALUE "IDXFIX".
       01  FIL-FOR-FILE-IFC                PIC X(8) VALUE "IDXFIXC".
       01  FIL-FOR-FILE-IV                 PIC X(8) VALUE "IDXVAR".

       01  FIL-FOR-FILE-RF                 PIC X(8) VALUE "RELFIX".
       01  FIL-FOR-FILE-RV                 PIC X(8) VALUE "RELVAR".

       01  FIL-FOR-FILE-AF                 PIC X(8) VALUE "ALTFIX".
       01  FIL-FOR-FILE-AV                 PIC X(8) VALUE "ALTVAR".

       01  FIL-FOR-FILE-AV2                PIC X(8) VALUE "ALTVARV2".
       01  FIL-FOR-FILE-AV3                PIC X(8) VALUE "ALTVARV3".
      *$ACU_CODE PROCESS
      *01  FIL-FOR-FILE-AV4                PIC X(8) VALUE "ALTVARV4".
      *$ACU_END
      *$MF_CODE PROCESS
      *01  FIL-FOR-FILE-AV4                PIC X(8) VALUE "ALTVAR4".
      *$MF_END
       01  FIL-FOR-FILE-AV8                PIC X(8) VALUE "ALTVAR8".

       01  FIL-FOR-FILE-HUGE               PIC X(8) VALUE "HUGE".
       01  LIB-FOR-FILE-HUGE               PIC X(8) VALUE "LIBSAM".
       01  VOL-FOR-FILE-HUGE               PIC X(6) VALUE "VOLOUT".
       
      ******************************************************************

       01  MAX-LOAD-CNT			   PIC 9(5) VALUE 2000.

       01  SF-WS-DATA.
           03  SF-WS-KEY                   PIC 9(10).
           03  SF-WS-F1                    PIC X(35).

       01  SV-WS-DATA.
           03  SV-WS-KEY                   PIC 9(10).
           03  SV-WS-F1                    PIC X(35).
           03  SV-WS-F2                    PIC X(35).

       01  IF-WS-DATA.
           03  IF-WS-KEY                   PIC 9(10).
           03  IF-WS-F1                    PIC X(35).

       01  IFC-WS-DATA.
           03  IFC-WS-KEY                  PIC 9(10).
           03  IFC-WS-F1                   PIC X(35).

       01  IV-WS-DATA.
           03  IV-WS-KEY                   PIC 9(10).
           03  IV-WS-F1                    PIC X(35).
           03  IV-WS-F2                    PIC X(35).

       01  RF-WS-DATA.
           03  RF-WS-KEY                   PIC 9(10).
           03  RF-WS-F1                    PIC X(35).

       01  RV-WS-DATA.
           03  RV-WS-KEY                   PIC 9(10).
           03  RV-WS-F1                    PIC X(35).
           03  RV-WS-F2                    PIC X(35).

       01  AF-WS-DATA.
           03  AF-WS-KEY                   PIC 9(10).
           03  AF-WS-ALT1                  PIC 9(5).
           03  AF-WS-ALT2                  PIC 9(5).
           03  AF-WS-F1                    PIC X(35).

       01  AV-WS-DATA.
           03  AV-WS-KEY                   PIC 9(10).
           03  AV-WS-ALT1                  PIC 9(5).
           03  AV-WS-ALT2                  PIC 9(5).
           03  AV-WS-F1                    PIC X(35).
           03  AV-WS-F2                    PIC X(35).

       01  AV2-WS-DATA.
           03  AV2-WS-KEY                   PIC 9(10).
           03  AV2-WS-ALT1                  PIC 9(5).
           03  AV2-WS-ALT2                  PIC 9(5).
           03  AV2-WS-F1                    PIC X(35).
           03  AV2-WS-F2                    PIC X(35).

       01  AV3-WS-DATA.
           03  AV3-WS-KEY                   PIC 9(10).
           03  AV3-WS-ALT1                  PIC 9(5).
           03  AV3-WS-ALT2                  PIC 9(5).
           03  AV3-WS-F1                    PIC X(35).
           03  AV3-WS-F2                    PIC X(35).

       01  AV4-WS-DATA.
           03  AV4-WS-KEY                   PIC 9(10).
           03  AV4-WS-ALT1                  PIC 9(5).
           03  AV4-WS-ALT2                  PIC 9(5).
           03  AV4-WS-F1                    PIC X(35).
           03  AV4-WS-F2                    PIC X(35).

       01  AV8-WS-DATA.
           03  AV8-WS-KEY                   PIC 9(10).
           03  AV8-WS-ALT1                  PIC 9(5).
           03  AV8-WS-ALT2                  PIC 9(5).
           03  AV8-WS-F1                    PIC X(35).
           03  AV8-WS-F2                    PIC X(35).

       01  HUGE-WS-DATA.
           03  HUGE-WS-KEY                  PIC 9(12).
           03  HUGE-WS-F1                   PIC X(1012).

      ******************************************************************
      ******************************************************************

       01  FLV-TITLE                      PIC X(40) VALUE SPACES.
       01  FLV-FOOTER                     PIC X(40) VALUE SPACES.
       01  FLV-FILE                       PIC X(8) VALUE SPACES.
       01  FLV-LIB                        PIC X(8) VALUE SPACES.
       01  FLV-VOL                        PIC X(6) VALUE SPACES.

       01  PRT-FILE-NAME                  PIC X(8) VALUE "PRTFILE".
       01  PRT-LIBRARY                    PIC X(8) VALUE SPACES.
       01  PRT-VOLUME                     PIC X(6) VALUE SPACES.


       01  REC-FLAG                       PIC X.
           88  NO-MORE-RECORDS            VALUE "N".
           88  MORE-RECORDS               VALUE "Y".

       01  SORT-FILE-NAME                 PIC X(8) VALUE "SFILE   ".

       01  EXT-PM                         PIC X(2) VALUE "PM".
       01  SAVE-PM                        PIC X.
       01  KEEP-MODE                      PIC X VALUE "K".

       77  LINENUM                        PIC 9(02) VALUE 1.
       77  PF-KEY                         PIC X(02) VALUE ZERO.

       01  LOG-FIL                        PIC X(8) VALUE "@TRNSLOG".
       01  LOG-LIB                        PIC X(8) VALUE "@LOGFIL@".
       01  LOG-VOL                        PIC X(6) VALUE SPACES.
       01  HL                             PIC X(2) VALUE "HL".

       01  SAMPLE-PROG                    PIC X(8) VALUE "SAMPLE  ".
       01  DISPLAY-PROG                   PIC X(8) VALUE "DISPLAY ".

       01  CURSOR-POS.
           03  MOD-COL                    BINARY.
           03  MOD-ROW                    BINARY.

       01  REDEF-CURS-POS                 REDEFINES CURSOR-POS.
           03  FILLER                     PIC X(01).
           03  CURS-COL                   PIC X(01).
           03  FILLER                     PIC X(01).
           03  CURS-ROW                   PIC X(01).

       01  THE-PASS                       PIC X(6).
       01  MY-INDEX                       PIC 9(5).
       01  ACCEPT-FIELD                   PIC X(6).
       01  START-VAL                      PIC X(4) VALUE "0000".

      ******************************************************************

006300 01  FSTAT                    PIC XX.
006400*01  SCREEN-FIELDS.
006500 01  W001-STATUS          PIC X       VALUE "C".
006600 01  W001-ADDRESS         PIC X       VALUE SPACE.
006700 01  W001-FUNCTION-TYPE   PIC X       VALUE "P".
006800 01  W001-LOCATION.
006900     05  W001-FILE        PIC X(8).
007000     05  W001-LIB         PIC X(8).
007100     05  W001-VOL         PIC X(6).
007200*
007300 01  EXTRACT-FIELDS.
007400     05  W002-PM              PIC X(2)     VALUE "PM".
007500     05  W002-PRINT-MODE      PIC X        VALUE SPACE.
007400     05  W002-ID              PIC X(2)     VALUE "ID".
007500     05  W002-USER-ID         PIC X(3)     VALUE SPACE.
007600
007700 01  SET-FIELDS.
007800     05  W003-PM              PIC XX       VALUE "PM".
007900     05  W003-PMH             PIC X        VALUE SPACE.

       01  W004-MODE                PIC X
                                    VALUE "S".
       01  W004-DISP                PIC X(2)
                                    VALUE "DX".

007700 01  DATE-FIELDS.
007800     05  W005-HL              PIC XX       VALUE "HL".
007900     05  W005-DATE-TIME       PIC X(45)    VALUE SPACE.

008000
       01 W-PRINT-LINE.
          05   FILLER               PIC X(05)    VALUE SPACES.
          05   FILLER               PIC X(07)    VALUE "User : ".
          05   W-PRINT-USER         PIC X(3).
          05   FILLER               PIC X(10)    VALUE SPACES.
          05   FILLER               PIC X(13)    VALUE "Printed on : ".
          05   W-PRINT-DATE         PIC X(45).

      /*****************************************************************
      *                                                                *
      *                   DISPLAY DEFINITIONS                          *
      *                                                                *
      ******************************************************************

       01  LARGE-SCREEN USAGE IS DISPLAY-WS.
           03  FILLER PIC X(60) ROW 4 COL 20 VALUE
           "This test will write 15,000 records of 80 bytes each".
           03  FILLER PIC X(60) ROW 5 COL 20 VALUE
           "to file LARGE in (OUTLIB) on (OUTVOL). This is mainly".
           03  FILLER PIC X(60) ROW 6 COL 20 VALUE
           "a time/performance test so note how long it takes.".
           03  FILLER PIC X(40) ROW 9 COL 30 SOURCE LARGE-MESSAGE.
           03  FILLER PIC X(10) ROW 15 COL 30 VALUE "START".
           03  FILLER PIC ZZ,ZZ,ZZ,ZZ  ROW 15 COL 40
               SOURCE LARGE-START. 
           03  FILLER PIC X(10) ROW 16 COL 30 VALUE "END".
           03  FILLER PIC ZZ,ZZ,ZZ,ZZ  ROW 16 COL 40 SOURCE LARGE-END. 
           03  FILLER PIC X(26) ROW 24 COL 30 VALUE
               "PRESS (ENTER) TO CONTINUE.".

       01  LARGE-MESSAGE   PIC X(40).
       01  LARGE-START     PIC 9(8).
       01  LARGE-END       PIC 9(8).

       01  LOG-SCREEN-1 USAGE IS DISPLAY-WS.
           03  FILLER PIC X(40) ROW 8 COL 20 VALUE
           "SEQ/DYN LOG FILE    (OPEN)    FILSTAT".
           03  FILLER PIC X(2)  ROW 8 COL 60 SOURCE FILSTAT.
           03  FILLER PIC X(26) ROW 24 COL 30 VALUE
               "PRESS (ENTER) TO CONTINUE.".

       01  LOG-SCREEN-2 USAGE IS DISPLAY-WS.
           03  FILLER PIC X(40) ROW 8 COL 20 VALUE
           "SEQ/DYN LOG FILE    (WRITE)   FILSTAT".
           03  FILLER PIC X(2)  ROW 8 COL 60 SOURCE FILSTAT.
           03  FILLER PIC X(26) ROW 24 COL 30 VALUE
               "PRESS (ENTER) TO CONTINUE.".

       01  LOG-SCREEN-3 USAGE IS DISPLAY-WS.
           03  FILLER PIC X(40) ROW 8 COL 20 VALUE
           "SEQ/DYN LOG FILE    (CLOSE)   FILSTAT".
           03  FILLER PIC X(2)  ROW 8 COL 60 SOURCE FILSTAT.
           03  FILLER PIC X(26) ROW 24 COL 30 VALUE
               "PRESS (ENTER) TO CONTINUE.".

       01  FILE-LIB-VOL USAGE IS DISPLAY-WS.
           03  FILLER PIC X(40) ROW 5 COL 20
               SOURCE FLV-TITLE.

           03  FILLER PIC X(4) ROW 12 COL 15 VALUE "FILE".
           03  FILLER PIC X(8) ROW 12 COL 20 
               SOURCE FLV-FILE OBJECT FLV-FILE.

           03  FILLER PIC X(7) ROW 12 COL 30 VALUE "LIBRARY".
           03  FILLER PIC X(8) ROW 12 COL 38 
               SOURCE FLV-LIB OBJECT FLV-LIB.

           03  FILLER PIC X(6) ROW 12 COL 48 VALUE "VOLUME".
           03  FILLER PIC X(6) ROW 12 COL 55 
               SOURCE FLV-VOL OBJECT FLV-VOL.

           03  FILLER PIC X(26) ROW 24 COL 10 VALUE
               "PRESS (ENTER) TO CONTINUE.".

           03  FILLER PIC X(40) ROW 24 COL 40 SOURCE FLV-FOOTER.


       01  FILE-SV-SCREEN USAGE IS DISPLAY-WS.
           03  FILLER PIC X(40) ROW 1 COL 20 VALUE
               "* * * WRITE SEQVAR FILE * * *".

           03  FILLER PIC X(14) ROW  7 COL  5 VALUE "RECORD-KEY".
           03  FILLER PIC 9(10) ROW  7 COL 20 
               SOURCE SV-WS-KEY OBJECT SV-WS-KEY.

           03  FILLER PIC X(14) ROW  9 COL  5 VALUE "RECORD-LINE1".
           03  FILLER PIC X(35) ROW  9 COL 20 
               SOURCE SV-WS-F1 OBJECT SV-WS-F1.

           03  FILLER PIC X(14) ROW 11 COL  5 VALUE "RECORD-LINE2".
           03  FILLER PIC X(35) ROW 11 COL 20 
               SOURCE SV-WS-F2 OBJECT SV-WS-F2.

           03  FILLER PIC X(11) ROW 22 COL 35 VALUE "FILE STATUS".
           03  FILLER PIC X(02) ROW 22 COL 47
               SOURCE FILE-SV-STAT.

           03  FILLER PIC X(50) ROW 24 COL 15 VALUE
               "(1) Write Rec-1   (2) Write Rec-2   (16) Exit".

       01  FILE-IV-SCREEN USAGE IS DISPLAY-WS.
           03  FILLER PIC X(40) ROW 1 COL 20 VALUE
               "* * * WRITE IDXVAR FILE * * *".

           03  FILLER PIC X(14) ROW  7 COL  5 VALUE "RECORD-KEY".
           03  FILLER PIC 9(10) ROW  7 COL 20 
               SOURCE IV-WS-KEY OBJECT IV-WS-KEY.

           03  FILLER PIC X(14) ROW  9 COL  5 VALUE "RECORD-LINE1".
           03  FILLER PIC X(35) ROW  9 COL 20 
               SOURCE IV-WS-F1 OBJECT IV-WS-F1.

           03  FILLER PIC X(14) ROW 11 COL  5 VALUE "RECORD-LINE2".
           03  FILLER PIC X(35) ROW 11 COL 20 
               SOURCE IV-WS-F2 OBJECT IV-WS-F2.

           03  FILLER PIC X(11) ROW 22 COL 35 VALUE "FILE STATUS".
           03  FILLER PIC X(02) ROW 22 COL 47
               SOURCE FILE-IV-STAT.

           03  FILLER PIC X(50) ROW 24 COL 15 VALUE
               "(1) Write Rec-1   (2) Write Rec-2   (16) Exit".

       01  FILE-SCREEN-2 USAGE IS DISPLAY-WS.
           03  FILLER  PIC X(11) ROW  1 COL 20 VALUE
               "TRY THINGS:".
           03  FILLER  PIC X(11) ROW  1 COL 60 VALUE
               "FILE-SCREEN".
           03  FILLER  PIC X(35) ROW  3 COL  2 VALUE
               "(1) SEQ/DYN LOGGING.".
           03  FILLER  PIC X(35) ROW  4 COL  2 VALUE
               "(2) OPEN OUT PRINT, WRITE, CLOSE".
           03  FILLER  PIC X(35) ROW  5 COL  2 VALUE
               "(3) OPEN OUTPUT PRINT FILE".
           03  FILLER  PIC X(35) ROW  6 COL  2 VALUE
               "(4) CLOSE PRINT FILE".
           03  FILLER  PIC X(35) ROW  7 COL  2 VALUE
               "(5) OPEN EXTEND PRINT FILE".
           03  FILLER  PIC X(35) ROW  8 COL  2 VALUE
               "(6) OPEN EXT PRINT, WRITE, CLOSE".
           03  FILLER  PIC X(35) ROW  9 COL  2 VALUE
               "(7) SUBS SCREEN/PRINT EXTEND".
           03  FILLER  PIC X(33) ROW 10 COL  2 VALUE
               "(8) CREATE FILE SEQVAR".
           03  FILLER  PIC X(38) ROW 11 COL  2 VALUE
               "(9) CREATE FILE IDXVAR".
           03  FILLER  PIC X(35) ROW 12 COL  2 VALUE
               "(10)".
           03  FILLER  PIC X(35) ROW 13 COL  2 VALUE
               "(11)".
           03  FILLER  PIC X(35) ROW 14 COL  2 VALUE
               "(12)".
           03  FILLER  PIC X(35) ROW 15 COL  2 VALUE
               "(13) CREATE A LARGE FILE".
           03  FILLER  PIC X(35) ROW 16 COL  2 VALUE
               "(14) Create EMTPY Files".
           03  FILLER  PIC X(35) ROW 17 COL  2 VALUE
               "(15) Create LIBSAM Files".
           03  FILLER  PIC X(35) ROW 20 COL  2 VALUE
               "(16) EXIT".

           03  FILLER  PIC X(35) ROW  3 COL 40 VALUE
               "(17) LOAD SEQFIX".
           03  FILLER  PIC X(35) ROW  4 COL 40 VALUE
               "(18) LOAD SEQVAR".
           03  FILLER  PIC X(35) ROW  5 COL 40 VALUE
               "(19) LOAD IDXFIX".
           03  FILLER  PIC X(35) ROW  6 COL 40 VALUE
               "(20) LOAD IDXVAR".
           03  FILLER  PIC X(35) ROW  7 COL 40 VALUE
               "(21) LOAD RELFIX".
           03  FILLER  PIC X(35) ROW  8 COL 40 VALUE
               "(22) LOAD RELVAR".
           03  FILLER  PIC X(35) ROW  9 COL 40 VALUE
               "(23) LOAD ALTFIX".
           03  FILLER  PIC X(35) ROW 10 COL 40 VALUE
               "(24) LOAD ALTVAR".
      *$MF_CODE PROCESS	       
      *    03  FILLER  PIC X(35) ROW 11 COL 40 VALUE
      *        "(25) LOAD ALTVAR4 (IDX4)".
      *    03  FILLER  PIC X(35) ROW 12 COL 40 VALUE
      *        "(26) LOAD ALTVAR8 (IDX8)".
      *$MF_END
      *$ACU_CODE PROCESS
      *    03  FILLER  PIC X(35) ROW 11 COL 40 VALUE
      *        "(25) LOAD ALTVARV2 (VISION 2)".
      *    03  FILLER  PIC X(35) ROW 12 COL 40 VALUE
      *        "(26) LOAD ALTVARV3 (VISION 3)".
      *$ACU_END	       
           03  FILLER  PIC X(35) ROW 13 COL 40 VALUE
               "(27) LOAD IDXFIXC (Compressed)".
      *$MF_CODE PROCESS	       
      *    03  FILLER  PIC X(35) ROW 14 COL 40 VALUE
      *        "(28) CREATE HUGE FILE (IDX8)".
      *$MF_END
      *$ACU_CODE PROCESS
      *    03  FILLER  PIC X(35) ROW 14 COL 40 VALUE
      *        "(28) CREATE HUGE FILE (VIS4)".
      *$ACU_END	       
           03  FILLER  PIC X(35) ROW 15 COL 40 VALUE
               "(29) ".
           03  FILLER  PIC X(35) ROW 16 COL 40 VALUE
               "(30) ".
           03  FILLER  PIC X(35) ROW 17 COL 40 VALUE
               "(31) ".
           03  FILLER  PIC X(35) ROW 20 COL 40 VALUE
               "(32) NEXT SCREEN".

           03  FILLER  PIC X(23) ROW 24 COL 10 VALUE
               "PRESS (16) TO EXIT".

      /*****************************************************************
      *                                                                *
      *                         PROCEDURE DIVISION                     *
      *                                                                *
      ******************************************************************
      *
       LINKAGE SECTION.
       01 PF-KEY-ARG  PIC X(2).
       PROCEDURE DIVISION USING PF-KEY-ARG.

       0000-INIT.
           OPEN I-O CRT.

       FILE-TESTS-2.

           DISPLAY AND READ FILE-SCREEN-2 ON CRT
           PFKEYS  1,  2 , 3,  4,  5,  6,  7,  8,  9, 10,
                  11, 12, 13, 14, 15, 16  17, 18, 19, 20,
                  21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                  31, 32.

           MOVE PF-KEY TO PF-KEY-ARG.

           IF PF-KEY = "01" THEN
              PERFORM SEQ-DYN-LOGGING THRU SEQ-DYN-LOGGING-EXIT
              GO TO FILE-TESTS-2
           ELSE IF PF-KEY = "02" THEN
              PERFORM DO-PRINT-FILE
              GO TO FILE-TESTS-2
           ELSE IF PF-KEY = "03" THEN
              PERFORM OPEN-OUTPUT-PRINT
              GO TO FILE-TESTS-2
           ELSE IF PF-KEY = "04" THEN
              PERFORM CLOSE-PRINT
              GO TO FILE-TESTS-2
           ELSE IF PF-KEY = "05" THEN
              PERFORM OPEN-EXTEND-PRINT
              GO TO FILE-TESTS-2
           ELSE IF PF-KEY = "06" THEN
              PERFORM WRITE-EXTEND-PRINT
              GO TO FILE-TESTS-2
           ELSE IF PF-KEY = "07" THEN
              PERFORM A-START-PROGRAM THRU A-START-PROGRAM-EXIT
              GO TO FILE-TESTS-2
           ELSE IF PF-KEY = "08" THEN
              PERFORM CREATE-FILE-SV
              GO TO FILE-TESTS-2
           ELSE IF PF-KEY = "09" THEN
              PERFORM CREATE-FILE-IV
              GO TO FILE-TESTS-2
           ELSE IF PF-KEY = "10" THEN
              GO TO FILE-TESTS-2
           ELSE IF PF-KEY = "11" THEN
              GO TO FILE-TESTS-2
           ELSE IF PF-KEY = "12" THEN
              GO TO FILE-TESTS-2
           ELSE IF PF-KEY = "13" THEN
              PERFORM CREATE-LARGE-FILE
              GO TO FILE-TESTS-2
           ELSE IF PF-KEY = "14" THEN
              PERFORM LOAD-EMPTY-FILES
              GO TO FILE-TESTS-2
           ELSE IF PF-KEY = "15" THEN
              PERFORM LOAD-SAMPLE-FILES
              GO TO FILE-TESTS-2
           ELSE IF PF-KEY = "17" THEN
	      PERFORM LOAD-SAMPLE-FILES-SCREEN-START
              PERFORM LOAD-FILE-SF
	      PERFORM LOAD-SAMPLE-FILES-SCREEN-END
              GO TO FILE-TESTS-2
           ELSE IF PF-KEY = "18" THEN
	      PERFORM LOAD-SAMPLE-FILES-SCREEN-START
              PERFORM LOAD-FILE-SV
	      PERFORM LOAD-SAMPLE-FILES-SCREEN-END
              GO TO FILE-TESTS-2
           ELSE IF PF-KEY = "19" THEN
	      PERFORM LOAD-SAMPLE-FILES-SCREEN-START
              PERFORM LOAD-FILE-IF
	      PERFORM LOAD-SAMPLE-FILES-SCREEN-END
              GO TO FILE-TESTS-2
           ELSE IF PF-KEY = "20" THEN
	      PERFORM LOAD-SAMPLE-FILES-SCREEN-START
              PERFORM LOAD-FILE-IV
	      PERFORM LOAD-SAMPLE-FILES-SCREEN-END
              GO TO FILE-TESTS-2
           ELSE IF PF-KEY = "21" THEN
	      PERFORM LOAD-SAMPLE-FILES-SCREEN-START
              PERFORM LOAD-FILE-RF
	      PERFORM LOAD-SAMPLE-FILES-SCREEN-END
              GO TO FILE-TESTS-2
           ELSE IF PF-KEY = "22" THEN
	      PERFORM LOAD-SAMPLE-FILES-SCREEN-START
              PERFORM LOAD-FILE-RV
	      PERFORM LOAD-SAMPLE-FILES-SCREEN-END
              GO TO FILE-TESTS-2
           ELSE IF PF-KEY = "23" THEN
	      PERFORM LOAD-SAMPLE-FILES-SCREEN-START
              PERFORM LOAD-FILE-AF
	      PERFORM LOAD-SAMPLE-FILES-SCREEN-END
              GO TO FILE-TESTS-2
           ELSE IF PF-KEY = "24" THEN
	      PERFORM LOAD-SAMPLE-FILES-SCREEN-START
              PERFORM LOAD-FILE-AV
	      PERFORM LOAD-SAMPLE-FILES-SCREEN-END
              GO TO FILE-TESTS-2
           ELSE IF PF-KEY = "25" THEN
	      PERFORM LOAD-SAMPLE-FILES-SCREEN-START
      *$MF_CODE PROCESS	       
      *       PERFORM LOAD-FILE-AV4
      *$MF_END
      *$ACU_CODE PROCESS	       
      *       PERFORM LOAD-FILE-AV2
      *$ACU_END
	      PERFORM LOAD-SAMPLE-FILES-SCREEN-END
              GO TO FILE-TESTS-2
           ELSE IF PF-KEY = "26" THEN
	      PERFORM LOAD-SAMPLE-FILES-SCREEN-START
      *$MF_CODE PROCESS	       
      *       PERFORM LOAD-FILE-AV8
      *$MF_END
      *$ACU_CODE PROCESS	       
      *       PERFORM LOAD-FILE-AV3
      *$ACU_END
	      PERFORM LOAD-SAMPLE-FILES-SCREEN-END
              GO TO FILE-TESTS-2
           ELSE IF PF-KEY = "27" THEN
	      PERFORM LOAD-SAMPLE-FILES-SCREEN-START
              PERFORM LOAD-FILE-IFC
	      PERFORM LOAD-SAMPLE-FILES-SCREEN-END
              GO TO FILE-TESTS-2
           ELSE IF PF-KEY = "28" THEN
	      PERFORM CREATE-HUGE-FILE
              GO TO FILE-TESTS-2
           ELSE IF PF-KEY = "29" THEN
              GO TO FILE-TESTS-2
           ELSE IF PF-KEY = "30" THEN
              GO TO FILE-TESTS-2
           ELSE IF PF-KEY = "31" THEN
              GO TO FILE-TESTS-2
           ELSE IF PF-KEY = "32" THEN
              GO TO EXIT-PROGRAM
           ELSE IF PF-KEY = "16" THEN
              GO TO EXIT-PROGRAM.

           GO TO FILE-TESTS-2.


      ******************************************************************
      * NOW DO SOME FILE WORK.
      ******************************************************************


       SEQ-DYN-LOGGING.
           MOVE "SEQ/DYN FILE LOGGING" TO FLV-TITLE.
           MOVE "(1) DISPLAY (16) EXIT" TO FLV-FOOTER.
           MOVE LOG-FIL  TO FLV-FILE.
           MOVE LOG-LIB  TO FLV-LIB.
           MOVE LOG-VOL  TO FLV-VOL.

           DISPLAY AND READ FILE-LIB-VOL ON CRT 
	       PFKEY 1 16.
           MOVE SPACES TO FLV-FOOTER.
           IF PF-KEY = "16" THEN GO TO SEQ-DYN-LOGGING-EXIT.
	   IF PF-KEY = "01" THEN
	       CALL "DISPFILE" USING
		   LOG-FIL, LOG-LIB, LOG-VOL
	       GO TO SEQ-DYN-LOGGING
	   END-IF.
               

           MOVE FLV-FILE TO LOG-FIL.
           MOVE FLV-LIB  TO LOG-LIB.
           MOVE FLV-VOL  TO LOG-VOL.

           OPEN SHARED LOG-FILE.

           DISPLAY AND READ LOG-SCREEN-1 ON CRT.

           MOVE "LOG" TO LOG-HEADER.
           MOVE LF TO LOG-NEWLINE.
           CALL "DATE4" USING HL LOG-DATA.
           WRITE LOG-RECORD.

           DISPLAY AND READ LOG-SCREEN-2 ON CRT.

           CLOSE LOG-FILE.

           DISPLAY AND READ LOG-SCREEN-3 ON CRT.
           GO TO SEQ-DYN-LOGGING.
       SEQ-DYN-LOGGING-EXIT.
           EXIT.

       OPEN-OUTPUT-PRINT.
           OPEN OUTPUT PRINT-FILE.
           DISPLAY "PRINT-FILE OPENED OUTPUT".

       OPEN-EXTEND-PRINT.
           OPEN EXTEND PRINT-FILE.
           DISPLAY "PRINT-FILE OPENED EXTEND".

       CLOSE-PRINT.
           CLOSE PRINT-FILE.
           DISPLAY "PRINT-FILE CLOSED".

       WRITE-EXTEND-PRINT.
           OPEN EXTEND PRINT-FILE.

           MOVE "AN NOW WE WILL DO AN OPEN EXTEND OF THE PRINT FILE"
            TO PRT-RECORD.
           WRITE PRT-RECORD.
           MOVE "          =========================" TO PRT-RECORD.
           WRITE PRT-RECORD.
           MOVE "                                   " TO PRT-RECORD.
           WRITE PRT-RECORD.
           MOVE "THIS IS THE END OF THE OPEN EXTEND." TO PRT-RECORD.
           WRITE PRT-RECORD.
           MOVE "          =========================" TO PRT-RECORD.
           WRITE PRT-RECORD.
           MOVE "   ***  END OF REPORT  ***" TO PRT-RECORD.
           WRITE PRT-RECORD.

           CLOSE PRINT-FILE.
           DISPLAY "PRINT-FILE OPENED, WRITTEN, CLOSED".

       DO-PRINT-FILE.

           MOVE "PRINT FILE TO OPEN" TO FLV-TITLE.
           MOVE PRT-FILE-NAME             TO FLV-FILE.
           MOVE PRT-LIBRARY               TO FLV-LIB.
           MOVE PRT-VOLUME                TO FLV-VOL.

           DISPLAY AND READ FILE-LIB-VOL ON CRT
           PFKEY 16.

           MOVE FLV-FILE  TO PRT-FILE-NAME.
           MOVE FLV-LIB   TO PRT-LIBRARY.
           MOVE FLV-VOL   TO PRT-VOLUME.

           OPEN OUTPUT PRINT-FILE.

           MOVE "(PAGE)    THIS IS A TEST PRINT FILE" TO PRT-RECORD.
           WRITE PRT-RECORD AFTER PAGE.
           MOVE "          =========================" TO PRT-RECORD.
           WRITE PRT-RECORD.
           MOVE "(5 LINES) THIS IS A TEST REPORT."    TO PRT-RECORD.
           WRITE PRT-RECORD AFTER ADVANCING 5 LINES.
           MOVE "          ======================"    TO PRT-RECORD.
           WRITE PRT-RECORD.
           MOVE "(PAGE)    ***  END OF REPORT  ***"   TO PRT-RECORD.
           WRITE PRT-RECORD AFTER PAGE.

           CLOSE PRINT-FILE.

           MOVE "PRINT FILE CREATED." TO FLV-TITLE.
           MOVE PRT-FILE-NAME             TO FLV-FILE.
           MOVE PRT-LIBRARY               TO FLV-LIB.
           MOVE PRT-VOLUME                TO FLV-VOL.
           MOVE "(1) DISPLAY " TO FLV-FOOTER.

           DISPLAY AND READ FILE-LIB-VOL ON CRT
           PFKEY 1 16.

	   IF PF-KEY = "01" THEN
	       CALL "DISPFILE" USING
		   FLV-FILE, FLV-LIB, FLV-VOL
	   END-IF.

      ******************************************************************

009100 A-START-PROGRAM SECTION.
009200 A010.
009300      CALL "EXTRACT" USING W002-PM,
009400                           W002-PRINT-MODE,
009500                           W002-ID,
                                 W002-USER-ID.

009300      CALL "DATE4" USING W005-HL,
009400                        W005-DATE-TIME.

            MOVE W002-USER-ID TO W-PRINT-USER.
            MOVE W005-DATE-TIME TO W-PRINT-DATE.   

009600      MOVE "K" TO W003-PMH.
009700      CALL "SET" USING W003-PM,
009800                       W003-PMH.
009900
010000      CALL "SCREEN" USING W001-STATUS,
010100                          W001-ADDRESS,
010200                          W001-FUNCTION-TYPE,
010300                          W001-LOCATION.

            OPEN EXTEND SCRFILE.
            MOVE SPACES TO PRINT-LINE.
            WRITE PRINT-LINE.
            WRITE PRINT-LINE.
            MOVE W-PRINT-LINE TO PRINT-LINE.
            WRITE PRINT-LINE.
            CLOSE SCRFILE.  

            CALL "PRINT" USING W001-FILE,
                               W001-LIB,
                               W001-VOL,
                               W004-MODE,
                               W004-DISP.
010400
010500      MOVE W002-PRINT-MODE TO W003-PMH.
010600      CALL "SET" USING W003-PM,
010700                       W003-PMH.

            DISPLAY "SCREEN, EXTEND, CLOSE, PRINT - DONE".                         

       A-START-PROGRAM-EXIT.

      ******************************************************************
      ******************************************************************
       LOAD-SAMPLE-FILES-SCREEN-START.
      *          1234567890123456789012345678901234567890
	   MOVE "      --- LOADING LIBSAM FILES ---      " 
	       TO PROGRESS-TITLE.
	   MOVE "   PLEASE WAIT FOR LOADING TO COMPLETE  " 
	       TO PROGRESS-FOOTER.
	   PERFORM INIT-PROGRESS-SCREEN.

       LOAD-SAMPLE-FILES-SCREEN-END.
	   MOVE "        Press (ENTER) to continue       "
	       TO PROGRESS-FOOTER.
	   PERFORM UNLOCK-AND-READ-PROGRESS-SCRN.	   

       LOAD-SAMPLE-FILES.
	   PERFORM LOAD-SAMPLE-FILES-SCREEN-START.
       
           MOVE "LIBSAM" TO SAMPLE-LIB.
           MOVE "VOLOUT" TO SAMPLE-VOL.

      *	   Scratch the library first
	   CALL "SCRATCH" USING
		   SCRATCH-TYPE-LIBRARY,
		   SAMPLE-FIL,
		   SAMPLE-LIB,
		   SAMPLE-VOL,
		   RET-CODE.
           
           PERFORM LOAD-FILE-SF.
           PERFORM LOAD-FILE-SV.
           PERFORM LOAD-FILE-IF.
           PERFORM LOAD-FILE-IFC.
           PERFORM LOAD-FILE-IV.
           PERFORM LOAD-FILE-RF.
           PERFORM LOAD-FILE-RV.
           PERFORM LOAD-FILE-AF.
           PERFORM LOAD-FILE-AV.
	   
      *$ACU_CODE PROCESS	       
      **   PERFORM LOAD-FILE-AV2.  - Comment out VISION 2 tests
      *    PERFORM LOAD-FILE-AV3.
      *    PERFORM LOAD-FILE-AV4.
      *$ACU_END
      *$MF_CODE PROCESS	       
      *    PERFORM LOAD-FILE-AV4.
      *$MF_END

	   PERFORM LOAD-SAMPLE-FILES-SCREEN-END.

	   DISPLAY "ALL LIBSAM FILES LOADED".
	   
       LOAD-EMPTY-FILES.
           MOVE "EMPTY"  TO SAMPLE-LIB.
           MOVE "VOLOUT" TO SAMPLE-VOL.
           
      *	   Scratch the library first
	   CALL "SCRATCH" USING
		   SCRATCH-TYPE-LIBRARY,
		   SAMPLE-FIL,
		   SAMPLE-LIB,
		   SAMPLE-VOL,
		   RET-CODE.

           OPEN OUTPUT FILE-SF.
           CLOSE       FILE-SF.
           
           OPEN OUTPUT FILE-SV.
           CLOSE       FILE-SV.
           
           OPEN OUTPUT FILE-IF.
           CLOSE       FILE-IF.
           
           OPEN OUTPUT FILE-IFC.
           CLOSE       FILE-IFC.
           
           OPEN OUTPUT FILE-IV.
           CLOSE       FILE-IV.
           
           OPEN OUTPUT FILE-RF.
           CLOSE       FILE-RF.
           
           OPEN OUTPUT FILE-RV.
           CLOSE       FILE-RV.
           
           OPEN OUTPUT FILE-AF.
           CLOSE       FILE-AF.
           
           OPEN OUTPUT FILE-AV.
           CLOSE       FILE-AV.

      *$ACU_CODE PROCESS	       
      **   OPEN OUTPUT FILE-AV2. - Comment out VISION 2 tests
      **   CLOSE       FILE-AV2.
      *
      *    OPEN OUTPUT FILE-AV3.
      *    CLOSE       FILE-AV3.
      *
      *    OPEN OUTPUT FILE-AV4.
      *    CLOSE       FILE-AV4.
      *$ACU_END
      
      *$MF_CODE PROCESS	       
      *    OPEN OUTPUT FILE-AV4.
      *    CLOSE       FILE-AV4.
      *$MF_END

           DISPLAY "EMPTY FILES CREATED".

           MOVE "LIBSAM" TO SAMPLE-LIB.
           MOVE "VOLOUT" TO SAMPLE-VOL.

      ******************************************************************
      *    SEQFIX (SEQUENTIAL FIXED) FILE-SF
      ******************************************************************

       WRITE-SF-R1.

           MOVE SPACES     TO SF-R1.
           MOVE SF-WS-KEY   TO SF-R1-KEY.
           MOVE SF-WS-F1    TO SF-R1-F1.
           WRITE SF-R1.

123456 LOAD-FILE-SF.       
	   MOVE " LOADING SEQFIX" TO NEXT-PROGRESS-ROW.
	   PERFORM WRITE-NEXT-PROGRESS-ROW.
	   
      *    Create an empty file
           OPEN OUTPUT FILE-SF.

      *    Write all the odd numbers records
           PERFORM VARYING SF-WS-KEY FROM 1 BY 2 
               UNTIL SF-WS-KEY > MAX-LOAD-CNT

               MOVE SPACES TO SF-WS-F1
               STRING "Field 1 ODD RECORD " DELIMITED BY SIZE
                   SF-WS-KEY DELIMITED BY SIZE
                   INTO SF-WS-F1

               PERFORM WRITE-SF-R1
           END-PERFORM.

      *    Write all the even records 
           PERFORM VARYING SF-WS-KEY FROM 2 BY 2 
               UNTIL SF-WS-KEY > MAX-LOAD-CNT

               MOVE SPACES TO SF-WS-F1
               STRING "Field 1 EVEN RECORD " DELIMITED BY SIZE
                   SF-WS-KEY DELIMITED BY SIZE
                   INTO SF-WS-F1

               PERFORM WRITE-SF-R1
           END-PERFORM.

           CLOSE FILE-SF.

      *    Count the records
           OPEN INPUT FILE-SF.
           MOVE 0 TO RECORD-CNT.

           PERFORM WITH TEST AFTER UNTIL FILE-SF-STAT NOT = "00" 
               READ FILE-SF NEXT RECORD
                   AT END CONTINUE
                   NOT AT END ADD 1 TO RECORD-CNT
               END-READ
           END-PERFORM

           CLOSE FILE-SF.

	   STRING " LOADED  SEQFIX   WITH ", RECORD-CNT, " RECORDS" 
	       DELIMITED BY SIZE INTO NEXT-PROGRESS-ROW.
	   SUBTRACT 1 FROM PROGRESS-ROW-NUM.
	   PERFORM WRITE-NEXT-PROGRESS-ROW.

      ******************************************************************
      *    SEQVAR (SEQUENTIAL VARYING) FILE-SV
      ******************************************************************

       CREATE-FILE-SV.
           OPEN OUTPUT FILE-SV.

           MOVE 1      TO SV-WS-KEY.
           MOVE SPACES TO SV-WS-F1.
           MOVE SPACES TO SV-WS-F2.

           PERFORM WITH TEST AFTER UNTIL PF-KEY = "16"
               DISPLAY AND READ FILE-SV-SCREEN ON CRT 
                   ONLY PFKEYS 1, 2, 16

               IF PF-KEY = "01" THEN 
                   PERFORM WRITE-SV-R1
               END-IF
               IF PF-KEY = "02" THEN 
                   PERFORM WRITE-SV-R2
               END-IF

               IF FILE-SV-STAT = "00" THEN
                   ADD 1 TO SV-WS-KEY
               END-IF
           END-PERFORM.

           CLOSE FILE-SV.

       WRITE-SV-R1.

           MOVE SPACES     TO SV-R1.
           MOVE SV-WS-KEY   TO SV-R1-KEY.
           MOVE SV-WS-F1    TO SV-R1-F1.
           WRITE SV-R1.

       WRITE-SV-R2.

           MOVE SPACES     TO SV-R2.
           MOVE SV-WS-KEY   TO SV-R2-KEY.
           MOVE SV-WS-F1    TO SV-R2-F1.
           MOVE SV-WS-F2    TO SV-R2-F2.
           WRITE SV-R2.

123456 LOAD-FILE-SV.       
	   MOVE " LOADING SEQVAR" TO NEXT-PROGRESS-ROW.
	   PERFORM WRITE-NEXT-PROGRESS-ROW.

      *    Create an empty file
           OPEN OUTPUT FILE-SV.

      *    Write all the odd numbers records 
           PERFORM VARYING SV-WS-KEY FROM 1 BY 2 
               UNTIL SV-WS-KEY > MAX-LOAD-CNT

               MOVE SPACES TO SV-WS-F1
               STRING "Field 1 ODD RECORD " DELIMITED BY SIZE
                   SV-WS-KEY DELIMITED BY SIZE
                   INTO SV-WS-F1

               PERFORM WRITE-SV-R1
           END-PERFORM.

      *    Write all the even records 
           PERFORM VARYING SV-WS-KEY FROM 2 BY 2 
               UNTIL SV-WS-KEY > MAX-LOAD-CNT

               MOVE SPACES TO SV-WS-F1
               STRING "Field 1 EVEN RECORD " DELIMITED BY SIZE
                   SV-WS-KEY DELIMITED BY SIZE
                   INTO SV-WS-F1

               MOVE SPACES TO SV-WS-F2
               STRING "Field 2 EVEN RECORD " DELIMITED BY SIZE
                   SV-WS-KEY DELIMITED BY SIZE
                   INTO SV-WS-F2

               PERFORM WRITE-SV-R2
           END-PERFORM.

           CLOSE FILE-SV.

      *    Count the records
           OPEN INPUT FILE-SV.
           MOVE 0 TO RECORD-CNT.

           PERFORM WITH TEST AFTER UNTIL FILE-SV-STAT NOT = "00" 
               READ FILE-SV NEXT RECORD
                   AT END CONTINUE
                   NOT AT END ADD 1 TO RECORD-CNT
               END-READ
           END-PERFORM

           CLOSE FILE-SV.

	   STRING " LOADED  SEQVAR   WITH ", RECORD-CNT, " RECORDS" 
	       DELIMITED BY SIZE INTO NEXT-PROGRESS-ROW.
	   SUBTRACT 1 FROM PROGRESS-ROW-NUM.
	   PERFORM WRITE-NEXT-PROGRESS-ROW.


      ******************************************************************
      *    IDXFIX (INDEXED FIXED) FILE-IF
      ******************************************************************

       WRITE-IF-R1.

           MOVE SPACES     TO IF-R1.
           MOVE IF-WS-KEY   TO IF-R1-KEY.
           MOVE IF-WS-F1    TO IF-R1-F1.
           WRITE IF-R1
             INVALID KEY 
             DISPLAY "WRITE IDXFIX REC-1 INVALID KEY " IF-WS-KEY.

123456 LOAD-FILE-IF.       
	   MOVE " LOADING IDXFIX" TO NEXT-PROGRESS-ROW.
	   PERFORM WRITE-NEXT-PROGRESS-ROW.

      *    Create an empty file
           OPEN OUTPUT FILE-IF.
           CLOSE FILE-IF.

      *    Now open the empty file for updates.
           OPEN I-O FILE-IF.

      *    Write all the odd numbers records
           PERFORM VARYING IF-WS-KEY FROM 1 BY 2 
               UNTIL IF-WS-KEY > MAX-LOAD-CNT

               MOVE SPACES TO IF-WS-F1
               STRING "Field 1 ODD RECORD " DELIMITED BY SIZE
                   IF-WS-KEY DELIMITED BY SIZE
                   INTO IF-WS-F1

               PERFORM WRITE-IF-R1
           END-PERFORM.

      *    Write all the even records 
           PERFORM VARYING IF-WS-KEY FROM 2 BY 2 
               UNTIL IF-WS-KEY > MAX-LOAD-CNT

               MOVE SPACES TO IF-WS-F1
               STRING "Field 1 EVEN RECORD " DELIMITED BY SIZE
                   IF-WS-KEY DELIMITED BY SIZE
                   INTO IF-WS-F1

               PERFORM WRITE-IF-R1
           END-PERFORM.

      *    Delete ever 3rd record
           PERFORM VARYING IF-WS-KEY FROM 3 BY 3 
               UNTIL IF-WS-KEY > MAX-LOAD-CNT
               
               MOVE IF-WS-KEY TO IF-R1-KEY
               DELETE FILE-IF RECORD
                   INVALID KEY
                   DISPLAY "DELETE IDXFIX INVALID KEY ", 
                           IF-R1-KEY
               END-DELETE

           END-PERFORM.

      *    Count the records
           MOVE 1 TO IF-R1-KEY.
           START FILE-IF KEY EQUAL IF-R1-KEY.
           MOVE 0 TO RECORD-CNT.

           PERFORM WITH TEST AFTER UNTIL FILE-IF-STAT NOT = "00" 
               READ FILE-IF NEXT RECORD
                   AT END CONTINUE
                   NOT AT END ADD 1 TO RECORD-CNT
               END-READ
           END-PERFORM

           CLOSE FILE-IF.

	   STRING " LOADED  IDXFIX   WITH ", RECORD-CNT, " RECORDS" 
	       DELIMITED BY SIZE INTO NEXT-PROGRESS-ROW.
	   SUBTRACT 1 FROM PROGRESS-ROW-NUM.
	   PERFORM WRITE-NEXT-PROGRESS-ROW.

      ******************************************************************
      *    IDXFIXC (INDEXED FIXED COMPRESSED) FILE-IFC
      ******************************************************************

       WRITE-IFC-R1.

           MOVE SPACES     TO IFC-R1.
           MOVE IFC-WS-KEY   TO IFC-R1-KEY.
           MOVE IFC-WS-F1    TO IFC-R1-F1.
           WRITE IFC-R1
             INVALID KEY 
             DISPLAY "WRITE IDXFIXC REC-1 INVALID KEY " IFC-WS-KEY.

123456 LOAD-FILE-IFC.       
	   MOVE " LOADING IDXFIXC" TO NEXT-PROGRESS-ROW.
	   PERFORM WRITE-NEXT-PROGRESS-ROW.

      *    Create an empty file
           OPEN OUTPUT FILE-IFC.
           CLOSE FILE-IFC.

      *    Now open the empty file for updates.
           OPEN I-O FILE-IFC.

      *    Write all the odd numbers records
           PERFORM VARYING IFC-WS-KEY FROM 1 BY 2 
               UNTIL IFC-WS-KEY > MAX-LOAD-CNT

               MOVE SPACES TO IFC-WS-F1
               STRING "Field 1 ODD RECORD " DELIMITED BY SIZE
                   IFC-WS-KEY DELIMITED BY SIZE
                   INTO IFC-WS-F1

               PERFORM WRITE-IFC-R1
           END-PERFORM.

      *    Write all the even records 
           PERFORM VARYING IFC-WS-KEY FROM 2 BY 2 
               UNTIL IFC-WS-KEY > MAX-LOAD-CNT

               MOVE SPACES TO IFC-WS-F1
               STRING "Field 1 EVEN RECORD " DELIMITED BY SIZE
                   IFC-WS-KEY DELIMITED BY SIZE
                   INTO IFC-WS-F1

               PERFORM WRITE-IFC-R1
           END-PERFORM.

      *    Delete ever 3rd record
           PERFORM VARYING IFC-WS-KEY FROM 3 BY 3 
               UNTIL IFC-WS-KEY > MAX-LOAD-CNT
               
               MOVE IFC-WS-KEY TO IFC-R1-KEY
               DELETE FILE-IFC RECORD
                   INVALID KEY
                   DISPLAY "DELETE IDXFIXC INVALID KEY ", 
                           IFC-R1-KEY
               END-DELETE

           END-PERFORM.

      *    Count the records
           MOVE 1 TO IFC-R1-KEY.
           START FILE-IFC KEY EQUAL IFC-R1-KEY.
           MOVE 0 TO RECORD-CNT.

           PERFORM WITH TEST AFTER UNTIL FILE-IFC-STAT NOT = "00" 
               READ FILE-IFC NEXT RECORD
                   AT END CONTINUE
                   NOT AT END ADD 1 TO RECORD-CNT
               END-READ
           END-PERFORM

           CLOSE FILE-IFC.

	   STRING " LOADED  IDXFIXC  WITH ", RECORD-CNT, " RECORDS" 
	       DELIMITED BY SIZE INTO NEXT-PROGRESS-ROW.
	   SUBTRACT 1 FROM PROGRESS-ROW-NUM.
	   PERFORM WRITE-NEXT-PROGRESS-ROW.

      ******************************************************************
      *    IDXVAR (INDEXED VARYING) FILE-IV
      ******************************************************************

       CREATE-FILE-IV.
           OPEN OUTPUT FILE-IV.

           MOVE 1 TO IV-WS-KEY.
           MOVE SPACES TO IV-WS-F1.
           MOVE SPACES TO IV-WS-F2.

           PERFORM WITH TEST AFTER UNTIL PF-KEY = "16"
               DISPLAY AND READ FILE-IV-SCREEN ON CRT 
                   ONLY PFKEYS 1, 2, 16

               IF PF-KEY = "01" THEN 
                   PERFORM WRITE-IV-R1
               END-IF
               IF PF-KEY = "02" THEN 
                   PERFORM WRITE-IV-R2
               END-IF

               IF FILE-IV-STAT = "00" THEN
                   ADD 1 TO IV-WS-KEY
               END-IF
           END-PERFORM.

           CLOSE FILE-IV.

       WRITE-IV-R1.

           MOVE SPACES     TO IV-R1.
           MOVE IV-WS-KEY   TO IV-R1-KEY.
           MOVE IV-WS-F1    TO IV-R1-F1.
           WRITE IV-R1
             INVALID KEY 
             DISPLAY "WRITE IDXVAR REC-1 INVALID KEY " IV-WS-KEY.

       WRITE-IV-R2.

           MOVE SPACES     TO IV-R2.
           MOVE IV-WS-KEY   TO IV-R2-KEY.
           MOVE IV-WS-F1    TO IV-R2-F1.
           MOVE IV-WS-F2    TO IV-R2-F2.
           WRITE IV-R2
             INVALID KEY 
             DISPLAY "WRITE IDXVAR REC-2 INVALID KEY " IV-WS-KEY.

123456 LOAD-FILE-IV.       
	   MOVE " LOADING IDXVAR" TO NEXT-PROGRESS-ROW.
	   PERFORM WRITE-NEXT-PROGRESS-ROW.

      *    Create an empty file
           OPEN OUTPUT FILE-IV.
           CLOSE FILE-IV.

      *    Now open the empty file for updates.
           OPEN I-O FILE-IV.

      *    Write all the odd numbers records 
           PERFORM VARYING IV-WS-KEY FROM 1 BY 2 
               UNTIL IV-WS-KEY > MAX-LOAD-CNT

               MOVE SPACES TO IV-WS-F1
               STRING "Field 1 ODD RECORD " DELIMITED BY SIZE
                   IV-WS-KEY DELIMITED BY SIZE
                   INTO IV-WS-F1

               PERFORM WRITE-IV-R1
           END-PERFORM.

      *    Write all the even records 
           PERFORM VARYING IV-WS-KEY FROM 2 BY 2 
               UNTIL IV-WS-KEY > MAX-LOAD-CNT

               MOVE SPACES TO IV-WS-F1
               STRING "Field 1 EVEN RECORD " DELIMITED BY SIZE
                   IV-WS-KEY DELIMITED BY SIZE
                   INTO IV-WS-F1

               MOVE SPACES TO IV-WS-F2
               STRING "Field 2 EVEN RECORD " DELIMITED BY SIZE
                   IV-WS-KEY DELIMITED BY SIZE
                   INTO IV-WS-F2

               PERFORM WRITE-IV-R2
           END-PERFORM.

      *    Delete ever 3rd record
           PERFORM VARYING IV-WS-KEY FROM 3 BY 3 
               UNTIL IV-WS-KEY > MAX-LOAD-CNT
               
               MOVE IV-WS-KEY TO IV-R1-KEY
               DELETE FILE-IV RECORD
                   INVALID KEY
                   DISPLAY "DELETE IDXVAR INVALID KEY ", 
                           IV-R1-KEY
               END-DELETE

           END-PERFORM.

      *    Count the records
           MOVE 1 TO IV-R1-KEY.
           START FILE-IV KEY EQUAL IV-R1-KEY.
           MOVE 0 TO RECORD-CNT.

           PERFORM WITH TEST AFTER UNTIL FILE-IV-STAT NOT = "00" 
               READ FILE-IV NEXT RECORD
                   AT END CONTINUE
                   NOT AT END ADD 1 TO RECORD-CNT
               END-READ
           END-PERFORM

           CLOSE FILE-IV.

	   STRING " LOADED  IDXVAR   WITH ", RECORD-CNT, " RECORDS" 
	       DELIMITED BY SIZE INTO NEXT-PROGRESS-ROW.
	   SUBTRACT 1 FROM PROGRESS-ROW-NUM.
	   PERFORM WRITE-NEXT-PROGRESS-ROW.


      ******************************************************************
      *    RELFIX (RELATIVE FIXED) FILE-RF
      ******************************************************************

       WRITE-RF-R1.

           MOVE SPACES     TO RF-R1.
           MOVE RF-WS-KEY   TO RF-R1-KEY.
           MOVE RF-WS-F1    TO RF-R1-F1.
           WRITE RF-R1
             INVALID KEY 
             DISPLAY "WRITE RELFIX REC-1 INVALID KEY " RF-WS-KEY.


123456 LOAD-FILE-RF.       
	   MOVE " LOADING RELFIX" TO NEXT-PROGRESS-ROW.
	   PERFORM WRITE-NEXT-PROGRESS-ROW.

      *    Create an empty file
           OPEN OUTPUT FILE-RF.
           CLOSE FILE-RF.

      *    Now open the empty file for updates.
           OPEN I-O FILE-RF.

      *    Write all the odd numbers records 
           PERFORM VARYING RF-WS-KEY FROM 1 BY 2 
               UNTIL RF-WS-KEY > MAX-LOAD-CNT

               MOVE SPACES TO RF-WS-F1
               STRING "Field 1 ODD RECORD " DELIMITED BY SIZE
                   RF-WS-KEY DELIMITED BY SIZE
                   INTO RF-WS-F1

               PERFORM WRITE-RF-R1
           END-PERFORM.

      *    Write all the even records 
           PERFORM VARYING RF-WS-KEY FROM 2 BY 2 
               UNTIL RF-WS-KEY > MAX-LOAD-CNT

               MOVE SPACES TO RF-WS-F1
               STRING "Field 1 EVEN RECORD " DELIMITED BY SIZE
                   RF-WS-KEY DELIMITED BY SIZE
                   INTO RF-WS-F1

               PERFORM WRITE-RF-R1
           END-PERFORM.

      *    Delete ever 3rd record
           PERFORM VARYING RF-WS-KEY FROM 3 BY 3 
               UNTIL RF-WS-KEY > MAX-LOAD-CNT
               
               MOVE RF-WS-KEY TO RF-R1-KEY
               DELETE FILE-RF RECORD
                   INVALID KEY
                   DISPLAY "DELETE RELFIX INVALID KEY ", 
                           RF-R1-KEY
               END-DELETE

           END-PERFORM.

      *    Count the records
           MOVE 1 TO RF-WS-KEY.
           START FILE-RF KEY EQUAL RF-WS-KEY.
           MOVE 0 TO RECORD-CNT.

           PERFORM WITH TEST AFTER UNTIL FILE-RF-STAT NOT = "00" 
               READ FILE-RF NEXT RECORD
                   AT END CONTINUE
                   NOT AT END ADD 1 TO RECORD-CNT
               END-READ
           END-PERFORM

           CLOSE FILE-RF.

	   STRING " LOADED  RELFIX   WITH ", RECORD-CNT, " RECORDS" 
	       DELIMITED BY SIZE INTO NEXT-PROGRESS-ROW.
	   SUBTRACT 1 FROM PROGRESS-ROW-NUM.
	   PERFORM WRITE-NEXT-PROGRESS-ROW.

      ******************************************************************
      *    RELVAR (RELATIVE VARYING) FILE-RV
      ******************************************************************

       WRITE-RV-R1.

           MOVE SPACES     TO RV-R1.
           MOVE RV-WS-KEY   TO RV-R1-KEY.
           MOVE RV-WS-F1    TO RV-R1-F1.
           WRITE RV-R1
             INVALID KEY 
             DISPLAY "WRITE RELVAR REC-1 INVALID KEY " RV-WS-KEY.

       WRITE-RV-R2.

           MOVE SPACES     TO RV-R2.
           MOVE RV-WS-KEY   TO RV-R2-KEY.
           MOVE RV-WS-F1    TO RV-R2-F1.
           MOVE RV-WS-F2    TO RV-R2-F2.
           WRITE RV-R2
             INVALID KEY 
             DISPLAY "WRITE RELVAR REC-2 INVALID KEY " RV-WS-KEY.

123456 LOAD-FILE-RV.       
	   MOVE " LOADING RELVAR" TO NEXT-PROGRESS-ROW.
	   PERFORM WRITE-NEXT-PROGRESS-ROW.

      *    Create an empty file
           OPEN OUTPUT FILE-RV.
           CLOSE FILE-RV.

      *    Now open the empty file for updates.
           OPEN I-O FILE-RV.

      *    Write all the odd numbers records
           PERFORM VARYING RV-WS-KEY FROM 1 BY 2 
               UNTIL RV-WS-KEY > MAX-LOAD-CNT

               MOVE SPACES TO RV-WS-F1
               STRING "Field 1 ODD RECORD " DELIMITED BY SIZE
                   RV-WS-KEY DELIMITED BY SIZE
                   INTO RV-WS-F1

               PERFORM WRITE-RV-R1
           END-PERFORM.

      *    Write all the even records 
           PERFORM VARYING RV-WS-KEY FROM 2 BY 2 
               UNTIL RV-WS-KEY > MAX-LOAD-CNT

               MOVE SPACES TO RV-WS-F1
               STRING "Field 1 EVEN RECORD " DELIMITED BY SIZE
                   RV-WS-KEY DELIMITED BY SIZE
                   INTO RV-WS-F1

               MOVE SPACES TO RV-WS-F2
               STRING "Field 2 EVEN RECORD " DELIMITED BY SIZE
                   RV-WS-KEY DELIMITED BY SIZE
                   INTO RV-WS-F2

               PERFORM WRITE-RV-R2
           END-PERFORM.

      *    Delete ever 3rd record
           PERFORM VARYING RV-WS-KEY FROM 3 BY 3 
               UNTIL RV-WS-KEY > MAX-LOAD-CNT
               
               MOVE RV-WS-KEY TO RV-R1-KEY
               DELETE FILE-RV RECORD
                   INVALID KEY
                   DISPLAY "DELETE RELVAR INVALID KEY ", 
                           RV-R1-KEY
               END-DELETE

           END-PERFORM.

      *    Count the records
           MOVE 1 TO RV-WS-KEY.
           START FILE-RV KEY EQUAL RV-WS-KEY.
           MOVE 0 TO RECORD-CNT.

           PERFORM WITH TEST AFTER UNTIL FILE-RV-STAT NOT = "00" 
               READ FILE-RV NEXT RECORD
                   AT END CONTINUE
                   NOT AT END ADD 1 TO RECORD-CNT
               END-READ
           END-PERFORM

           CLOSE FILE-RV.

	   STRING " LOADED  RELVAR   WITH ", RECORD-CNT, " RECORDS" 
	       DELIMITED BY SIZE INTO NEXT-PROGRESS-ROW.
	   SUBTRACT 1 FROM PROGRESS-ROW-NUM.
	   PERFORM WRITE-NEXT-PROGRESS-ROW.

      ******************************************************************
      *    ALTFIX (ALTERNATE INDEXED FIXED) FILE-AF
      ******************************************************************

       WRITE-AF-R1.

           MOVE SPACES      TO AF-R1.
           MOVE AF-WS-KEY   TO AF-R1-KEY.
           MOVE AF-WS-ALT1  TO AF-R1-ALT1.
           MOVE AF-WS-ALT2  TO AF-R1-ALT2.
           MOVE AF-WS-F1    TO AF-R1-F1.
           WRITE AF-R1
             INVALID KEY 
             DISPLAY "WRITE ALTFIX REC-1 INVALID KEY " AF-WS-KEY.

123456 LOAD-FILE-AF.       
	   MOVE " LOADING ALTFIX" TO NEXT-PROGRESS-ROW.
	   PERFORM WRITE-NEXT-PROGRESS-ROW.

      *    Create an empty file
           OPEN OUTPUT FILE-AF.
           CLOSE FILE-AF.

      *    Now open the empty file for updates.
           OPEN I-O FILE-AF.

      *    Write all the odd numbers records
           PERFORM VARYING AF-WS-KEY FROM 1 BY 2 
               UNTIL AF-WS-KEY > MAX-LOAD-CNT

               COMPUTE AF-WS-ALT1 = 1000 + AF-WS-KEY 
               COMPUTE AF-WS-ALT2 = 1000 + AF-WS-KEY / 10
               
               MOVE SPACES TO AF-WS-F1
               STRING "Field 1 ODD RECORD " DELIMITED BY SIZE
                   AF-WS-KEY DELIMITED BY SIZE
                   INTO AF-WS-F1

               PERFORM WRITE-AF-R1
           END-PERFORM.

      *    Write all the even records
           PERFORM VARYING AF-WS-KEY FROM 2 BY 2 
               UNTIL AF-WS-KEY > MAX-LOAD-CNT

               COMPUTE AF-WS-ALT1 = 2000 + AF-WS-KEY 
               COMPUTE AF-WS-ALT2 = 2000 + AF-WS-KEY / 10
               
               MOVE SPACES TO AF-WS-F1
               STRING "Field 1 EVEN RECORD " DELIMITED BY SIZE
                   AF-WS-KEY DELIMITED BY SIZE
                   INTO AF-WS-F1

               PERFORM WRITE-AF-R1
           END-PERFORM.

      *    Delete ever 3rd record
           PERFORM VARYING AF-WS-KEY FROM 3 BY 3 
               UNTIL AF-WS-KEY > MAX-LOAD-CNT
               
               MOVE AF-WS-KEY TO AF-R1-KEY
               DELETE FILE-AF RECORD
                   INVALID KEY
                   DISPLAY "DELETE ALTFIX INVALID KEY ", 
                           AF-R1-KEY
               END-DELETE

           END-PERFORM.

      *    Count the records
           MOVE 1 TO AF-R1-KEY.
           START FILE-AF KEY EQUAL AF-R1-KEY.
           MOVE 0 TO RECORD-CNT.

           PERFORM WITH TEST AFTER UNTIL FILE-AF-STAT NOT = "00" 
               READ FILE-AF NEXT RECORD
                   AT END CONTINUE
                   NOT AT END ADD 1 TO RECORD-CNT
               END-READ
           END-PERFORM

           CLOSE FILE-AF.

	   STRING " LOADED  ALTFIX   WITH ", RECORD-CNT, " RECORDS" 
	       DELIMITED BY SIZE INTO NEXT-PROGRESS-ROW.
	   SUBTRACT 1 FROM PROGRESS-ROW-NUM.
	   PERFORM WRITE-NEXT-PROGRESS-ROW.

      ******************************************************************
      *    ALTVAR (ALTERNATE INDEXED VARYING) FILE-AV
      ******************************************************************

       WRITE-AV-R1.

           MOVE SPACES     TO AV-R1.
           MOVE AV-WS-KEY   TO AV-R1-KEY.
           MOVE AV-WS-ALT1  TO AV-R1-ALT1.
           MOVE AV-WS-ALT2  TO AV-R1-ALT2.
           MOVE AV-WS-F1    TO AV-R1-F1.
           WRITE AV-R1
             INVALID KEY 
             DISPLAY "WRITE ALTVAR REC-1 INVALID KEY " AV-WS-KEY.

       WRITE-AV-R2.

           MOVE SPACES     TO AV-R2.
           MOVE AV-WS-KEY   TO AV-R2-KEY.
           MOVE AV-WS-ALT1  TO AV-R2-ALT1.
           MOVE AV-WS-ALT2  TO AV-R2-ALT2.
           MOVE AV-WS-F1    TO AV-R2-F1.
           MOVE AV-WS-F2    TO AV-R2-F2.
           WRITE AV-R2
             INVALID KEY 
             DISPLAY "WRITE ALTVAR REC-2 INVALID KEY " AV-WS-KEY.

123456 LOAD-FILE-AV.       
	   MOVE " LOADING ALTVAR" TO NEXT-PROGRESS-ROW.
	   PERFORM WRITE-NEXT-PROGRESS-ROW.

      *    Create an empty file
           OPEN OUTPUT FILE-AV.
           CLOSE FILE-AV.

      *    Now open the empty file for updates.
           OPEN I-O FILE-AV.

      *    Write all the odd numbers records
           PERFORM VARYING AV-WS-KEY FROM 1 BY 2 
               UNTIL AV-WS-KEY > MAX-LOAD-CNT

               COMPUTE AV-WS-ALT1 = 1000 + AV-WS-KEY 
               COMPUTE AV-WS-ALT2 = 1000 + AV-WS-KEY / 10
               
               MOVE SPACES TO AV-WS-F1
               STRING "Field 1 ODD RECORD " DELIMITED BY SIZE
                   AV-WS-KEY DELIMITED BY SIZE
                   INTO AV-WS-F1

               PERFORM WRITE-AV-R1
           END-PERFORM.

      *    Write all the even records 
           PERFORM VARYING AV-WS-KEY FROM 2 BY 2 
               UNTIL AV-WS-KEY > MAX-LOAD-CNT

               COMPUTE AV-WS-ALT1 = 2000 + AV-WS-KEY 
               COMPUTE AV-WS-ALT2 = 2000 + AV-WS-KEY / 10 

               MOVE SPACES TO AV-WS-F1
               STRING "Field 1 EVEN RECORD " DELIMITED BY SIZE
                   AV-WS-KEY DELIMITED BY SIZE
                   INTO AV-WS-F1

               MOVE SPACES TO AV-WS-F2
               STRING "Field 2 EVEN RECORD " DELIMITED BY SIZE
                   AV-WS-KEY DELIMITED BY SIZE
                   INTO AV-WS-F2

               PERFORM WRITE-AV-R2
           END-PERFORM.

      *    Delete ever 3rd record
           PERFORM VARYING AV-WS-KEY FROM 3 BY 3 
               UNTIL AV-WS-KEY > MAX-LOAD-CNT
               
               MOVE AV-WS-KEY TO AV-R1-KEY
               DELETE FILE-AV RECORD
                   INVALID KEY
                   DISPLAY "DELETE ALTVAR INVALID KEY ", 
                           AV-R1-KEY
               END-DELETE

           END-PERFORM.

      *    Count the records
           MOVE 1 TO AV-R1-KEY.
           START FILE-AV KEY EQUAL AV-R1-KEY.
           MOVE 0 TO RECORD-CNT.

           PERFORM WITH TEST AFTER UNTIL FILE-AV-STAT NOT = "00" 
               READ FILE-AV NEXT RECORD
                   AT END CONTINUE
                   NOT AT END ADD 1 TO RECORD-CNT
               END-READ
           END-PERFORM

           CLOSE FILE-AV.

	   STRING " LOADED  ALTVAR   WITH ", RECORD-CNT, " RECORDS" 
	       DELIMITED BY SIZE INTO NEXT-PROGRESS-ROW.
	   SUBTRACT 1 FROM PROGRESS-ROW-NUM.
	   PERFORM WRITE-NEXT-PROGRESS-ROW.

      ******************************************************************
      * ALTVARV2 (ALTERNATE INDEXED VARYING VISION ) FILE-AV2
      ******************************************************************

       WRITE-AV2-R1.

           MOVE SPACES     TO AV2-R1.
           MOVE AV2-WS-KEY   TO AV2-R1-KEY.
           MOVE AV2-WS-ALT1  TO AV2-R1-ALT1.
           MOVE AV2-WS-ALT2  TO AV2-R1-ALT2.
           MOVE AV2-WS-F1    TO AV2-R1-F1.
           WRITE AV2-R1
             INVALID KEY 
             DISPLAY "WRITE ALTVARV2 REC-1 INVALID KEY " AV2-WS-KEY.

       WRITE-AV2-R2.

           MOVE SPACES     TO AV2-R2.
           MOVE AV2-WS-KEY   TO AV2-R2-KEY.
           MOVE AV2-WS-ALT1  TO AV2-R2-ALT1.
           MOVE AV2-WS-ALT2  TO AV2-R2-ALT2.
           MOVE AV2-WS-F1    TO AV2-R2-F1.
           MOVE AV2-WS-F2    TO AV2-R2-F2.
           WRITE AV2-R2
             INVALID KEY 
             DISPLAY "WRITE ALTVARV2 REC-2 INVALID KEY " AV2-WS-KEY.

       LOAD-FILE-AV2.       
	   MOVE " LOADING ALTVARV2" TO NEXT-PROGRESS-ROW.
	   PERFORM WRITE-NEXT-PROGRESS-ROW.

      *    Create an empty file
           OPEN OUTPUT FILE-AV2.
           CLOSE FILE-AV2.

      *    Now open the empty file for updates.
           OPEN I-O FILE-AV2.

      *    Write all the odd numbers records 
           PERFORM VARYING AV2-WS-KEY FROM 1 BY 2 
               UNTIL AV2-WS-KEY > MAX-LOAD-CNT

               COMPUTE AV2-WS-ALT1 = 1000 + AV2-WS-KEY 
               COMPUTE AV2-WS-ALT2 = 1000 + AV2-WS-KEY / 10
               
               MOVE SPACES TO AV2-WS-F1
               STRING "Field 1 ODD RECORD " DELIMITED BY SIZE
                   AV2-WS-KEY DELIMITED BY SIZE
                   INTO AV2-WS-F1

               PERFORM WRITE-AV2-R1
           END-PERFORM.

      *    Write all the even records 
           PERFORM VARYING AV2-WS-KEY FROM 2 BY 2 
               UNTIL AV2-WS-KEY > MAX-LOAD-CNT

               COMPUTE AV2-WS-ALT1 = 2000 + AV2-WS-KEY 
               COMPUTE AV2-WS-ALT2 = 2000 + AV2-WS-KEY / 10 

               MOVE SPACES TO AV2-WS-F1
               STRING "Field 1 EVEN RECORD " DELIMITED BY SIZE
                   AV2-WS-KEY DELIMITED BY SIZE
                   INTO AV2-WS-F1

               MOVE SPACES TO AV2-WS-F2
               STRING "Field 2 EVEN RECORD " DELIMITED BY SIZE
                   AV2-WS-KEY DELIMITED BY SIZE
                   INTO AV2-WS-F2

               PERFORM WRITE-AV2-R2
           END-PERFORM.

      *    Delete ever 3rd record
           PERFORM VARYING AV2-WS-KEY FROM 3 BY 3 
               UNTIL AV2-WS-KEY > MAX-LOAD-CNT
               
               MOVE AV2-WS-KEY TO AV2-R1-KEY
               DELETE FILE-AV2 RECORD
                   INVALID KEY
                   DISPLAY "DELETE ALTVARV2 INVALID KEY ", 
                           AV2-R1-KEY
               END-DELETE

           END-PERFORM.

      *    Count the records
           MOVE 1 TO AV2-R1-KEY.
           START FILE-AV2 KEY EQUAL AV2-R1-KEY.
           MOVE 0 TO RECORD-CNT.

           PERFORM WITH TEST AFTER UNTIL FILE-AV2-STAT NOT = "00" 
               READ FILE-AV2 NEXT RECORD
                   AT END CONTINUE
                   NOT AT END ADD 1 TO RECORD-CNT
               END-READ
           END-PERFORM

           CLOSE FILE-AV2.

	   STRING " LOADED  ALTVARV2 WITH ", RECORD-CNT, " RECORDS" 
	       DELIMITED BY SIZE INTO NEXT-PROGRESS-ROW.
	   SUBTRACT 1 FROM PROGRESS-ROW-NUM.
	   PERFORM WRITE-NEXT-PROGRESS-ROW.

      ******************************************************************
      * ALTVARV3 (ALTERNATE INDEXED VARYING VISION ) FILE-AV3
      ******************************************************************

       WRITE-AV3-R1.

           MOVE SPACES     TO AV3-R1.
           MOVE AV3-WS-KEY   TO AV3-R1-KEY.
           MOVE AV3-WS-ALT1  TO AV3-R1-ALT1.
           MOVE AV3-WS-ALT2  TO AV3-R1-ALT2.
           MOVE AV3-WS-F1    TO AV3-R1-F1.
           WRITE AV3-R1
             INVALID KEY 
             DISPLAY "WRITE ALTVARV3 REC-1 INVALID KEY " AV3-WS-KEY.

       WRITE-AV3-R2.

           MOVE SPACES     TO AV3-R2.
           MOVE AV3-WS-KEY   TO AV3-R2-KEY.
           MOVE AV3-WS-ALT1  TO AV3-R2-ALT1.
           MOVE AV3-WS-ALT2  TO AV3-R2-ALT2.
           MOVE AV3-WS-F1    TO AV3-R2-F1.
           MOVE AV3-WS-F2    TO AV3-R2-F2.
           WRITE AV3-R2
             INVALID KEY 
             DISPLAY "WRITE ALTVARV3 REC-2 INVALID KEY " AV3-WS-KEY.

       LOAD-FILE-AV3.       
	   MOVE " LOADING ALTVARV3" TO NEXT-PROGRESS-ROW.
	   PERFORM WRITE-NEXT-PROGRESS-ROW.

      *    Create an empty file
           OPEN OUTPUT FILE-AV3.
           CLOSE FILE-AV3.

      *    Now open the empty file for updates.
           OPEN I-O FILE-AV3.

      *    Write all the odd numbers records 
           PERFORM VARYING AV3-WS-KEY FROM 1 BY 2 
               UNTIL AV3-WS-KEY > MAX-LOAD-CNT

               COMPUTE AV3-WS-ALT1 = 1000 + AV3-WS-KEY 
               COMPUTE AV3-WS-ALT2 = 1000 + AV3-WS-KEY / 10
               
               MOVE SPACES TO AV3-WS-F1
               STRING "Field 1 ODD RECORD " DELIMITED BY SIZE
                   AV3-WS-KEY DELIMITED BY SIZE
                   INTO AV3-WS-F1

               PERFORM WRITE-AV3-R1
           END-PERFORM.

      *    Write all the even records 
           PERFORM VARYING AV3-WS-KEY FROM 2 BY 2 
               UNTIL AV3-WS-KEY > MAX-LOAD-CNT

               COMPUTE AV3-WS-ALT1 = 2000 + AV3-WS-KEY 
               COMPUTE AV3-WS-ALT2 = 2000 + AV3-WS-KEY / 10 

               MOVE SPACES TO AV3-WS-F1
               STRING "Field 1 EVEN RECORD " DELIMITED BY SIZE
                   AV3-WS-KEY DELIMITED BY SIZE
                   INTO AV3-WS-F1

               MOVE SPACES TO AV3-WS-F2
               STRING "Field 2 EVEN RECORD " DELIMITED BY SIZE
                   AV3-WS-KEY DELIMITED BY SIZE
                   INTO AV3-WS-F2

               PERFORM WRITE-AV3-R2
           END-PERFORM.

      *    Delete ever 3rd record
           PERFORM VARYING AV3-WS-KEY FROM 3 BY 3 
               UNTIL AV3-WS-KEY > MAX-LOAD-CNT
               
               MOVE AV3-WS-KEY TO AV3-R1-KEY
               DELETE FILE-AV3 RECORD
                   INVALID KEY
                   DISPLAY "DELETE ALTVARV3 INVALID KEY ", 
                           AV3-R1-KEY
               END-DELETE

           END-PERFORM.

      *    Count the records
           MOVE 1 TO AV3-R1-KEY.
           START FILE-AV3 KEY EQUAL AV3-R1-KEY.
           MOVE 0 TO RECORD-CNT.

           PERFORM WITH TEST AFTER UNTIL FILE-AV3-STAT NOT = "00" 
               READ FILE-AV3 NEXT RECORD
                   AT END CONTINUE
                   NOT AT END ADD 1 TO RECORD-CNT
               END-READ
           END-PERFORM

           CLOSE FILE-AV3.

	   STRING " LOADED  ALTVARV3 WITH ", RECORD-CNT, " RECORDS" 
	       DELIMITED BY SIZE INTO NEXT-PROGRESS-ROW.
	   SUBTRACT 1 FROM PROGRESS-ROW-NUM.
	   PERFORM WRITE-NEXT-PROGRESS-ROW.

      ******************************************************************
      *    ALTVAR4 (ALTERNATE INDEXED VARYING IDX4) FILE-AV4
      ******************************************************************

       WRITE-AV4-R1.

           MOVE SPACES     TO AV4-R1.
           MOVE AV4-WS-KEY   TO AV4-R1-KEY.
           MOVE AV4-WS-ALT1  TO AV4-R1-ALT1.
           MOVE AV4-WS-ALT2  TO AV4-R1-ALT2.
           MOVE AV4-WS-F1    TO AV4-R1-F1.
           WRITE AV4-R1
             INVALID KEY 
             DISPLAY "WRITE ALTVAR4 REC-1 INVALID KEY " AV4-WS-KEY.

       WRITE-AV4-R2.

           MOVE SPACES     TO AV4-R2.
           MOVE AV4-WS-KEY   TO AV4-R2-KEY.
           MOVE AV4-WS-ALT1  TO AV4-R2-ALT1.
           MOVE AV4-WS-ALT2  TO AV4-R2-ALT2.
           MOVE AV4-WS-F1    TO AV4-R2-F1.
           MOVE AV4-WS-F2    TO AV4-R2-F2.
           WRITE AV4-R2
             INVALID KEY 
             DISPLAY "WRITE ALTVAR4 REC-2 INVALID KEY " AV4-WS-KEY.

       LOAD-FILE-AV4.       
	   STRING " LOADING ", FIL-FOR-FILE-AV4,  
	       DELIMITED BY SIZE INTO NEXT-PROGRESS-ROW.
	   PERFORM WRITE-NEXT-PROGRESS-ROW.

      *    Create an empty file
           OPEN OUTPUT FILE-AV4.
           CLOSE FILE-AV4.

      *    Now open the empty file for updates.
           OPEN I-O FILE-AV4.

      *    Write all the odd numbers records
           PERFORM VARYING AV4-WS-KEY FROM 1 BY 2 
               UNTIL AV4-WS-KEY > MAX-LOAD-CNT

               COMPUTE AV4-WS-ALT1 = 1000 + AV4-WS-KEY 
               COMPUTE AV4-WS-ALT2 = 1000 + AV4-WS-KEY / 10
               
               MOVE SPACES TO AV4-WS-F1
               STRING "Field 1 ODD RECORD " DELIMITED BY SIZE
                   AV4-WS-KEY DELIMITED BY SIZE
                   INTO AV4-WS-F1

               PERFORM WRITE-AV4-R1
           END-PERFORM.

      *    Write all the even records 
           PERFORM VARYING AV4-WS-KEY FROM 2 BY 2 
               UNTIL AV4-WS-KEY > MAX-LOAD-CNT

               COMPUTE AV4-WS-ALT1 = 2000 + AV4-WS-KEY 
               COMPUTE AV4-WS-ALT2 = 2000 + AV4-WS-KEY / 10 

               MOVE SPACES TO AV4-WS-F1
               STRING "Field 1 EVEN RECORD " DELIMITED BY SIZE
                   AV4-WS-KEY DELIMITED BY SIZE
                   INTO AV4-WS-F1

               MOVE SPACES TO AV4-WS-F2
               STRING "Field 2 EVEN RECORD " DELIMITED BY SIZE
                   AV4-WS-KEY DELIMITED BY SIZE
                   INTO AV4-WS-F2

               PERFORM WRITE-AV4-R2
           END-PERFORM.

      *    Delete ever 3rd record
           PERFORM VARYING AV4-WS-KEY FROM 3 BY 3 
               UNTIL AV4-WS-KEY > MAX-LOAD-CNT
               
               MOVE AV4-WS-KEY TO AV4-R1-KEY
               DELETE FILE-AV4 RECORD
                   INVALID KEY
                   DISPLAY "DELETE ALTVAR4 INVALID KEY ", 
                           AV4-R1-KEY
               END-DELETE

           END-PERFORM.

      *    Count the records
           MOVE 1 TO AV4-R1-KEY.
           START FILE-AV4 KEY EQUAL AV4-R1-KEY.
           MOVE 0 TO RECORD-CNT.

           PERFORM WITH TEST AFTER UNTIL FILE-AV4-STAT NOT = "00" 
               READ FILE-AV4 NEXT RECORD
                   AT END CONTINUE
                   NOT AT END ADD 1 TO RECORD-CNT
               END-READ
           END-PERFORM

           CLOSE FILE-AV4.

	   STRING " LOADED  ", FIL-FOR-FILE-AV4,  
	       " WITH ", RECORD-CNT, " RECORDS" 
	       DELIMITED BY SIZE INTO NEXT-PROGRESS-ROW.
	   SUBTRACT 1 FROM PROGRESS-ROW-NUM.
	   PERFORM WRITE-NEXT-PROGRESS-ROW.


      ******************************************************************
      *    ALTVAR8 (ALTERNATE INDEXED VARYING IDX8) FILE-AV8
      ******************************************************************

       WRITE-AV8-R1.

           MOVE SPACES     TO AV8-R1.
           MOVE AV8-WS-KEY   TO AV8-R1-KEY.
           MOVE AV8-WS-ALT1  TO AV8-R1-ALT1.
           MOVE AV8-WS-ALT2  TO AV8-R1-ALT2.
           MOVE AV8-WS-F1    TO AV8-R1-F1.
           WRITE AV8-R1
             INVALID KEY 
             DISPLAY "WRITE ALTVAR8 REC-1 INVALID KEY " AV8-WS-KEY.

       WRITE-AV8-R2.

           MOVE SPACES     TO AV8-R2.
           MOVE AV8-WS-KEY   TO AV8-R2-KEY.
           MOVE AV8-WS-ALT1  TO AV8-R2-ALT1.
           MOVE AV8-WS-ALT2  TO AV8-R2-ALT2.
           MOVE AV8-WS-F1    TO AV8-R2-F1.
           MOVE AV8-WS-F2    TO AV8-R2-F2.
           WRITE AV8-R2
             INVALID KEY 
             DISPLAY "WRITE ALTVAR8 REC-2 INVALID KEY " AV8-WS-KEY.

123456 LOAD-FILE-AV8.       
	   MOVE " LOADING ALTVAR8" TO NEXT-PROGRESS-ROW.
	   PERFORM WRITE-NEXT-PROGRESS-ROW.

      *    Create an empty file
           OPEN OUTPUT FILE-AV8.
           CLOSE FILE-AV8.

      *    Now open the empty file for updates.
           OPEN I-O FILE-AV8.

      *    Write all the odd numbers records
           PERFORM VARYING AV8-WS-KEY FROM 1 BY 2 
               UNTIL AV8-WS-KEY > MAX-LOAD-CNT

               COMPUTE AV8-WS-ALT1 = 1000 + AV8-WS-KEY 
               COMPUTE AV8-WS-ALT2 = 1000 + AV8-WS-KEY / 10
               
               MOVE SPACES TO AV8-WS-F1
               STRING "Field 1 ODD RECORD " DELIMITED BY SIZE
                   AV8-WS-KEY DELIMITED BY SIZE
                   INTO AV8-WS-F1

               PERFORM WRITE-AV8-R1
           END-PERFORM.

      *    Write all the even records
           PERFORM VARYING AV8-WS-KEY FROM 2 BY 2 
               UNTIL AV8-WS-KEY > MAX-LOAD-CNT

               COMPUTE AV8-WS-ALT1 = 2000 + AV8-WS-KEY 
               COMPUTE AV8-WS-ALT2 = 2000 + AV8-WS-KEY / 10 

               MOVE SPACES TO AV8-WS-F1
               STRING "Field 1 EVEN RECORD " DELIMITED BY SIZE
                   AV8-WS-KEY DELIMITED BY SIZE
                   INTO AV8-WS-F1

               MOVE SPACES TO AV8-WS-F2
               STRING "Field 2 EVEN RECORD " DELIMITED BY SIZE
                   AV8-WS-KEY DELIMITED BY SIZE
                   INTO AV8-WS-F2

               PERFORM WRITE-AV8-R2
           END-PERFORM.

      *    Delete ever 3rd record
           PERFORM VARYING AV8-WS-KEY FROM 3 BY 3 
               UNTIL AV8-WS-KEY > MAX-LOAD-CNT
               
               MOVE AV8-WS-KEY TO AV8-R1-KEY
               DELETE FILE-AV8 RECORD
                   INVALID KEY
                   DISPLAY "DELETE ALTVAR8 INVALID KEY ", 
                           AV8-R1-KEY
               END-DELETE

           END-PERFORM.

      *    Count the records
           MOVE 1 TO AV8-R1-KEY.
           START FILE-AV8 KEY EQUAL AV8-R1-KEY.
           MOVE 0 TO RECORD-CNT.

           PERFORM WITH TEST AFTER UNTIL FILE-AV8-STAT NOT = "00" 
               READ FILE-AV8 NEXT RECORD
                   AT END CONTINUE
                   NOT AT END ADD 1 TO RECORD-CNT
               END-READ
           END-PERFORM

           CLOSE FILE-AV8.

	   STRING " LOADED  ALTVAR8  WITH ", RECORD-CNT, " RECORDS" 
	       DELIMITED BY SIZE INTO NEXT-PROGRESS-ROW.
	   SUBTRACT 1 FROM PROGRESS-ROW-NUM.
	   PERFORM WRITE-NEXT-PROGRESS-ROW.

      ******************************************************************

       CREATE-HUGE-FILE.
           MOVE "Specify HUGE +2GB File Create Location" TO FLV-TITLE.
           MOVE "(16) EXIT" TO FLV-FOOTER.
           MOVE FIL-FOR-FILE-HUGE  TO FLV-FILE.
           MOVE LIB-FOR-FILE-HUGE  TO FLV-LIB.
           MOVE VOL-FOR-FILE-HUGE  TO FLV-VOL.

           DISPLAY AND READ FILE-LIB-VOL ON CRT 
	       PFKEY 16.
	       
	   IF PF-KEY = "00" THEN
	       MOVE FLV-FILE TO FIL-FOR-FILE-HUGE
	       MOVE FLV-LIB  TO LIB-FOR-FILE-HUGE
	       MOVE FLV-VOL  TO VOL-FOR-FILE-HUGE

	       OPEN OUTPUT FILE-HUGE
	       CLOSE FILE-HUGE
	       OPEN SHARED FILE-HUGE

	       DISPLAY "This can take a VERY LONG time. (+2GB)"

	       PERFORM VARYING HUGE-WS-KEY FROM 1 BY 1
		   UNTIL HUGE-WS-KEY > 2100000

		   MOVE SPACES TO HUGE-WS-F1
		   STRING "Field 1 " DELIMITED BY SIZE
		       HUGE-WS-KEY DELIMITED BY SIZE
		       INTO HUGE-WS-F1

		   MOVE HUGE-WS-KEY TO HUGE-R1-KEY
		   MOVE HUGE-WS-F1  TO HUGE-R1-F1
		   WRITE HUGE-R1
		       INVALID KEY
		       DISPLAY "WRITE HUGE-FILE INVALID KEY "
			   HUGE-WS-KEY
		   END-WRITE
	       END-PERFORM
	       CLOSE FILE-HUGE
	       DISPLAY "Created HUGE file "
		   FIL-FOR-FILE-HUGE " IN "
		   LIB-FOR-FILE-HUGE " ON "
		   VOL-FOR-FILE-HUGE
	       DISPLAY "Attempt to OPEN SHARED HUGE file"
	       OPEN SHARED FILE-HUGE
	       DISPLAY "Huge file is OPEN, (ENTER) to close"
	       CLOSE FILE-HUGE	       
	   END-IF.
           MOVE SPACES TO FLV-FOOTER.
               

      ******************************************************************

       CREATE-LARGE-FILE.

           MOVE SPACES TO LARGE-MESSAGE.
           MOVE 0 TO LARGE-START.
           MOVE 0 TO LARGE-END.
           DISPLAY AND READ LARGE-SCREEN ON CRT.

           MOVE "  THIS IS A LARGE RECORD" TO LARGE-DATA.
           OPEN OUTPUT LARGE-FILE.
           ACCEPT LARGE-START FROM TIME.
           PERFORM WRITE-LARGE VARYING LARGE-CNT FROM 1 BY 1
                               UNTIL LARGE-CNT > 15000.
           ACCEPT LARGE-END FROM TIME.
           CLOSE LARGE-FILE.

           MOVE "***** DONE *****" TO LARGE-MESSAGE.
           DISPLAY AND READ LARGE-SCREEN ON CRT.

       WRITE-LARGE.

           WRITE LARGE-RECORD.

      ******************************************************************

       INIT-PROGRESS-SCREEN.

	   MOVE PROGRESS-LOCK-ORDER-AREA TO 
	       ORDER-AREA OF PROGRESS-SCREEN.
	   MOVE SPACES TO PROGRESS-ROWS.

           DISPLAY AND READ PROGRESS-SCREEN ON CRT.

	   MOVE 1 TO PROGRESS-ROW-NUM.
	   MOVE SPACES TO NEXT-PROGRESS-ROW.

       WRITE-NEXT-PROGRESS-ROW.

           MOVE NEXT-PROGRESS-ROW TO PROGRESS-ROW (PROGRESS-ROW-NUM).
	   MOVE PROGRESS-LOCK-ORDER-AREA TO 
	       ORDER-AREA OF PROGRESS-SCREEN.
           DISPLAY AND READ PROGRESS-SCREEN ON CRT.
	   
	   ADD 1 TO PROGRESS-ROW-NUM.
	   MOVE SPACES TO NEXT-PROGRESS-ROW.

       UNLOCK-AND-READ-PROGRESS-SCRN.

	   MOVE PROGRESS-UNLOCK-ORDER-AREA TO 
	       ORDER-AREA OF PROGRESS-SCREEN.
           DISPLAY AND READ PROGRESS-SCREEN ON CRT.

      ******************************************************************
      * ALL DONE.
      ******************************************************************
       EXIT-PROGRAM.
           CLOSE CRT.
           EXIT PROGRAM.

       STOP-RUN.
           STOP RUN.
