#/***********************************************************************/
#/*									*/
#/*	        WISP - Wang Interchange Source Processor		*/
#/*									*/
#/***********************************************************************/
#
#	Copyright (c) 1994-2003, NeoMedia Technologies, Inc. All Rights Reserved.
#	$Id:$
#
#
#	File		make.include	
#
#	Function	Standard make include file for WISP & OPEN3K.
#
#	Description:	This file is included into all WISP & OPEN3K makefiles.
#			It defines all system specific options.
#			Uncomment the SYSTEM defines for this system.
#			Also ensure no other SYSTEM defines are uncommented.
#
#	Input:		$(WISPSRC)	points to WISP source directory
#			$(OPEN3K)	points to OPEN3K base directory
#			$(L_WISP)	the wisp library base name (usually "wisp")
#			$(L_VIDEO)	the video library base name (usually "video")
#			$(L_EDE)	the ede library base name (usually "ede")
#			$(CDEBUG)	c flags to debug or optimize
#			$(CCDEBUG)	C++ flags to debug or optimize
#			$(PDEBUG)	pascal flags to debug or optimize
#
#	Output:
#			$(CC)		the c compiler command
#			$(CFLAGS)	the standard c flags
#			$(CFLAGS0)	same as $(CFLAGS) used to add to CFLAGS
#
#			$(CCC)		the C++ compiler command
#			$(CCFLAGS)	the standard C++ flags
#			$(CCFLAGS0)	same as $(CCFLAGS) used to add to CCFLAGS
#			$(CCC_EXT)	the C++ file extension ("cc" or "C")
#			$(CCC_LIBS_DIR)	location of standard C++ libraries
#
#			$(PC)		the pascal compiler command
#			$(PFLAGS)	the standard pascal flags
#			$(PFLAGS0)	same as $(PFLAGS) used to add to PFLAGS
#
#			$(RANLIB)	how to change an archive lib into a random lib
#			$(CURSES_LINK)	The curses library link flags
#			$(SOCKET_LINK)	The socket library link flags
#			$(MATH_LINK)	The math library link flags
#
#			$(STD_BIN_DIR)	standard place to put built bin files
#			$(STD_LIB_DIR)	standard place to put build library files
#			$(STD_INC_DIR)	standard place to put <include> files
#
#
#			$(WISP_LIB)	The WISP archieve library  (eg. libwisp.a)
#			$(VIDEO_LIB)	The VIDEO archieve library (eg. libvideo.a)
#			$(EDE_LIB)	The EDE archieve library   (eg. libede.a)
#
#			$(WISP_LIB_PATH) The WISP_LIB path  (eg. /usr/local/lib/libwisp.a)
#			$(VIDEO_LIB_PATH)The VIDEO_LIB path (eg. /usr/local/lib/libvideo.a)
#			$(EDE_LIB_PATH)  The EDE_LIB path   (eg. /usr/local/lib/libede.a)
#
#			$(WISP_LINK)	The WISP library link flag  (eg. -lwisp)
#			$(VIDEO_LINK)	The VIDEO library link flag (eg. -lvideo)
#			$(EDE_LINK)	The EDE library link flag   (eg. -lede)
#
#			$(VIDEO_INC_DIR)	The location of video header files
#			$(WISP_LIBS_LINK)	The WISP + VIDEO libraries link flags
#			$(WISP_LIBS_PATHS)	The WISP + VIDEO libraries paths
#			$(WISPEDE_LIBS_LINK)	The WISP + VIDEO + EDE libraries link flags
#			$(WISPEDE_LIBS_PATHS)	The WISP + VIDEO + EDE libraries paths
#
#	Internal:
#			BASE_DIR	The base directory for bin, lib, include
#			SYSDEF		The system identification define (e.g. -DAIX)
#			CC_STD		The standard CC command
#			CC_ANSI		The ANSI CC command
#			CC_STD_FLAGS	C standard non-system dependent flags
#			CC_SYS_FLAGS	C system dependent flags
#			CC_SYS_LINK	C system dependent flags for linking
#			CC_OPT_FLAGS	C Special options flags
#			CCC_STD_FLAGS	C++ standard non-system dependent flags
#			CCC_SYS_FLAGS	C++ system dependent flags
#			CCC_SYS_LINK	C++ system dependent flags for linking
#			PC_STD_FLAGS	Pascal standard non-system dependent flags
#			PC_SYS_FLAGS	Pascal system dependent flags
#
#
BASE_DIR = $(WISPSRC)

STD_BIN_DIR	= $(BASE_DIR)/bin
STD_LIB_DIR	= $(BASE_DIR)/lib
STD_INC_DIR	= $(BASE_DIR)/include

VIDEO_INC_DIR	= $(BASE_DIR)/videolib

WISP_LINK 	= -l$(L_WISP)
VIDEO_LINK 	= -l$(L_VIDEO)
EDE_LINK 	= -l$(L_EDE)

WISP_LIB 	= lib$(L_WISP).a
VIDEO_LIB 	= lib$(L_VIDEO).a
EDE_LIB		= lib$(L_EDE).a

WISP_LIB_PATH	= $(BASE_DIR)/wisplib/$(WISP_LIB)
VIDEO_LIB_PATH	= $(BASE_DIR)/videolib/$(VIDEO_LIB)
EDE_LIB_PATH	= $(BASE_DIR)/ede/$(EDE_LIB)

WISP_LIBS_PATHS = $(WISP_LIB_PATH) $(VIDEO_LIB_PATH)
WISP_LIBS_LINK	= $(WISP_LIBS_PATHS)

WISPEDE_LIBS_PATHS	= $(EDE_LIB_PATH) $(WISP_LIB_PATH) $(VIDEO_LIB_PATH)
WISPEDE_LIBS_LINK	= $(WISPEDE_LIBS_PATHS)

#
#	DEFAULT defines for all systems.
#	If the specific system requires different values it will override
#	these later in the file.
#

CC_STD = cc
CC_ANSI = cc
CC_STD_FLAGS = -Dunix
CC_SYS_FLAGS =
CC_SYS_LINK =

CCC = c++
CCC_EXT = cpp
CCC_LIBS_DIR = /usr/local/lib
CCC_STD_FLAGS = -Dunix
CCC_SYS_FLAGS =
CCC_SYS_LINK = 

PC = pc
PC_STD_FLAGS = +N
PC_SYS_FLAGS =

RANLIB= ar ts
STRIP= strip

SOCKET_LINK =
CURSES_LINK = -lcurses
MATH_LINK = -lm
LEX_LINK = -ll

LEX=lex
YACC=yacc

#
#	SYSTEM defines for system dependent options. 
#	Also add any defines needed to override any dedault defines
#	that are incorrect.
#		SYSDEF		System DEFINE flag
#
SYSDEF = "Error SYSDEF not defined"

#==================================================================
#	IBM AIX RS/6000 (32-bit)
#
#	AIX 4.3.3
#
#SYSDEF = -DAIX
#
# IBM XL C (cc_r is thread safe)
#CC_STD  = cc_r
#CC_ANSI = cc_r
#CC_SYS_FLAGS = -qlanglvl=ansi -qarch=com -qmaxmem=16384
#
# GNU C
#CC_STD  = gcc
#CC_ANSI = gcc
#CC_SYS_FLAGS = -fsigned-char
#
# GNU C++
#CCC = g++
#CCC_SYS_FLAGS = -DBOOL_TYPE -fsigned-char -Wall
#
#	AIX 4.1
#
#CCC = xlC
#CCC_SYS_FLAGS = -qchars=signed 
#CCC_EXT = C
#

#==================================================================
#	IBM AIX RS/6000  (64-bit)
#
#	AIX 5.2
#
#SYSDEF = -DAIX -DAIX_64 -DWISP_64BIT
#OBJECT_MODE=64
#
# IBM XLC Compilers
#CC_STD  = xlc
#CC_ANSI = xlc
#CC_SYS_FLAGS = -q64 -qarch=com -qlanglvl=ansi
#
#CCC = xlC
#CCC_SYS_FLAGS = -Q -q64 -qarch=com -qchars=signed -DBOOL_TYPE

#==================================================================
#       DEC ALPHA OSF/1 -- Compaq Tru64 UNIX
#
#  NOTE:  Use GNU MAKE (gmake)!!!
#         Both /usr/bin/make and /usr/bin/posix/make are broken.
#
#SYSDEF = -DOSF1_ALPHA -DWISP_64BIT -D_USE_OLD_TTY
#CC_STD  = c89
#CC_ANSI = c89
#CC_SYS_FLAGS = -non_shared
#
#CCC = cxx
#CCC_SYS_FLAGS = -ms
#
# GNU C++
#CCC = g++
#CCC_SYS_FLAGS = -DBOOL_TYPE -fsigned-char -Wall -mno-cix -mno-max -mno-bwx
#CCC_SYS_LINK = 
#
# (using gcc instead of g++)
#CCC = gcc
#CCC_SYS_LINK =  /usr/local/cygnus/tru64-010710/H-alphaev56-dec-osf5.1/lib/libstdc++.a

#==================================================================
#	HP-UX
#
#	HP-UX 11.00 (PA-RISC 1.1) (32-bit)
#
#SYSDEF = -DHPUX
#
## Using HP's C complier
#CC_STD  = cc
#CC_ANSI = cc
#CC_SYS_FLAGS = +z +DAportable -lcurses
#
## Using GNU C compiler
#CC_STD  = gcc
#CC_ANSI = gcc
#CC_SYS_FLAGS = -Wall
#
#CCC = g++
#CCC_SYS_FLAGS = -DBOOL_TYPE -fsigned-char -Wall
#CCC_SYS_LINK =
#
## Need on HP-UX 11.11 
#CCC_SYS_LINK = -lpthread
#
## using gcc instead of g++
#CCC = gcc
#CCC_SYS_LINK = /usr/local/lib/libstdc++.a
#
#
## OLD STUFF
#	c89 is the ANSI compiler
#	  - Needs -D_HPUX_SOURCE to allow HP extensions
#	  - Does not allow 64 bit file routines
#CC_STD  = c89
#CC_ANSI = c89
#CC_SYS_FLAGS = +z -D_HPUX_SOURCE +DAportable -lcurses
#

#==================================================================
#
#	HP-UX 11.00 (PA-RISC 2.0) (64-bit)
#
#SYSDEF = -DHPUX -DHPUX_64 -DWISP_64BIT
#
#CC_STD  = cc
#CC_ANSI = cc
#CC_SYS_FLAGS = +z +DD64 -lcurses
#

#==================================================================
#	SCO UNIX
#
#SYSDEF = -DSCO
#
#	SCO with GNU
#CC_STD  = gcc
#CC_ANSI = gcc
#CC_SYS_FLAGS = 
#
#CCC = gcc
#CCC_SYS_FLAGS = -DBOOL_TYPE -fsigned-char
#CCC_SYS_LINK = 
#
# 	SCO Development Compilers
#SOCKET_LINK= -lsocket
#CCC = CC
#CCC_SYS_FLAGS = +.cpp +a1

#==================================================================
#	SUN SPARC
#
#	Solaris (32-bit)
#
#  NOTE:  We have installed WorkShop which includes the proper
#	  version of C so make sure it is included
#	  on your path /opt/SUNWspro/bin
#
#  NOTE:  If CCC=g++ then it will not link statically even
#   	  if -static option is specified. 
#
#	Solaris 8 (SunOS 5.8)
#SYSDEF = -DSOLARIS 
#CC_STD  = gcc
#CC_ANSI = gcc
#CC_SYS_FLAGS = -Wall
#CCC = gcc
#CCC_SYS_FLAGS = -DBOOL_TYPE -fsigned-char -Wall
#CCC_SYS_LINK = /usr/local/lib/libstdc++.a
#

#==================================================================
#	SUN SPARC
#
#	Solaris 8 (64-bit)
#
#SYSDEF = -DSOLARIS -DSOLARIS_64 -DWISP_64BIT
#CC_STD  = gcc
#CC_ANSI = gcc
#CC_SYS_FLAGS = -m64 -Wall
#CCC = g++
#CCC_SYS_FLAGS = -m64 -DBOOL_TYPE -fsigned-char -Wall
#CCC_SYS_LINK = 

#==================================================================
#	Redhat LINUX 7.3 with glibc 2.2
#
#SYSDEF = -DLINUX
#CC_STD  = gcc
#CC_ANSI = gcc
#CC_SYS_FLAGS = -Wall
#CCC = g++
#CCC_SYS_FLAGS = -DBOOL_TYPE -fsigned-char -Wall
#CCC_SYS_LINK = 


#==================================================================
#	Data General - DG/UX Intel
#
#SYSDEF = -DDGUX_INTEL
#CC_STD=gcc
#CC_ANSI=gcc
#CDEBUG=
#CC_SYS_FLAGS = -Wall
#CCC = gcc
#CCC_LIBS_DIR =
#CCC_STD_FLAGS =
#CCC_SYS_FLAGS = -static -Wall
#CCC_SYS_LINK =

#==================================================================
#	Data General Aviion
#
#SYSDEF = -DDGUX
#CC_ANSI=gcc
#CDEBUG=
#CCC = g++
#CCC_LIBS_DIR = /usr/opt/c++/lib
#CCC_SYS_FLAGS = -fsigned-char
#CCC_SYS_LINK = -static -L$(CCC_LIBS_DIR) -lg++ -lC

#==================================================================
#	Ultrix RISC
#
#SYSDEF = -DULTRIX -DNOCONST -DNOSTRDUP
#CURSES_LINK=-lcursesX

#==================================================================
#	NEC	EWS-UX
#		EWS4800		R4000 MIPS workstation
#		UP4800		R4x00 MIPS server	
#
#SYSDEF = -DNEC
#CC_ANSI=/usr/abiccs/bin/cc
#CC_SYS_FLAGS = -Kconform_pic -Zcommon_pic -znodefs

#==================================================================
#	UNIXWARE v1.1 for i386/486 
#
#SYSDEF = -DUNIXWARE
#SOCKET_LINK = -lnsl

#==================================================================
#	NCR 386/486
#
#SYSDEF = -DNCR486
#CC_SYS_FLAGS = -Hnocopyr -dn
#SOCKET_LINK = -lnsl
#CCC = ncc
#CCC_LIBS_DIR = /opt/ncc/lib
#CCC_SYS_LINK = -L$(CCC_LIBS_DIR) -lcplus -liostream

#==================================================================
#	NCR TOWER 32 68020
#
#SYSDEF = -DNCR32

#==================================================================
#	PYRAMID  1.1-94c079 dcosx MIServer-S 2/48 r3000
#
#	HARDWARE:	ES-Series (MIPS r3000)
#	OS:		DC-OSx  1.1  079
#
#	NOTES:		Upwardly compatible with NILE-Series (r4000)
#
#SYSDEF = -DPYRAMID
#CC_SYS_FLAGS = -K signed
#CCC = CC
#CCC_EXT = C
#CCC_SYS_FLAGS = -K signed -DNOCTYPE

#==================================================================
#	MIPS
#
#SYSDEF = -DMIPS

#==================================================================
#	AT&T u3b2
#
#SYSDEF = -DATT3B2
#CC_SYS_FLAGS = -DNOSTDLIB

#==================================================================
#	BULL (Honeywell)
#
#SYSDEF = -DBULL

#==================================================================
#	Motorola 88000
#		These are known as 8000 Series (E.g. 8220) and based on
#		the 88K Risc chip.  The O/S is very generic S5R3.2.
#		There is also a 3000 Series (68030) and a 4000 Series (68040).
#
#SYSDEF = -DMOTOROLA

#==================================================================
#       ICL DRS 6000
#
#SYSDEF = -DICL
#SOCKET_LINK = -lsocket -lnsl

#==================================================================
#	Unisys 6000
#
#SYSDEF = -DUNISYS
#SOCKET_LINK = -lnsl

#==================================================================
#	Sequent
#
#SYSDEF = -DSEQUENT
#CC_ANSI = cc
#SOCKET_LINK= -lsocket -linet -lnsl
#CCC = CC
#CCC_SYS_FLAGS = +a1

#==================================================================
#	IBM PS/2 AIX
#
#SYSDEF = -DAIX_PS2

#==================================================================


#
#	Assign the C compilers
#
CC 	 = $(CC_ANSI)

#
#	Construct CFLAGS from the pieces.  
#		CDEBUG		defined in the makefile as -g or -O
#

CFLAGS  = $(SYSDEF) $(CDEBUG) $(CC_SYS_FLAGS) $(CC_STD_FLAGS) $(CC_OPT_FLAGS)
CFLAGS0 = $(SYSDEF) $(CDEBUG) $(CC_SYS_FLAGS) $(CC_STD_FLAGS) $(CC_OPT_FLAGS)

CCFLAGS  = $(SYSDEF) $(CCDEBUG) $(CCC_SYS_FLAGS) $(CCC_STD_FLAGS)
CCFLAGS0 = $(SYSDEF) $(CCDEBUG) $(CCC_SYS_FLAGS) $(CCC_STD_FLAGS)

#
#	Construct PFLAGS from the pieces.  
#		PDEBUG		defined in the makefile as -g or -O1, -O2
#								 +O1, +O2
#
PFLAGS  = $(PDEBUG) $(PC_STD_FLAGS) $(PC_SYS_FLAGS)
PFLAGS0 = $(PDEBUG) $(PC_STD_FLAGS) $(PC_SYS_FLAGS)

#.p.a:
#	$(PC) -c $(PFLAGS) $<
#	ar rv $@ $*.o
#	rm -f $*.o

#
#	Old defines for backwards compatablity
#
#		$(LIBCFLAGS)	standard c flags when libraries are used
#
V = $(VIDEO_INC_DIR)

LIBCURSES = $(CURSES_LINK)
LIBSOC = $(SOCKET_LINK)
LIBMATH = $(MATH_LINK)
LIBLEX = $(LEX_LINK)

STDBIN = $(STD_BIN_DIR)
STDLIB = $(STD_LIB_DIR)
STDINC = $(STD_INC_DIR)

LIBCFLAGS = -L$(STD_LIB_DIR)

STDPFLAGS = $(PC_STD_FLAGS)
