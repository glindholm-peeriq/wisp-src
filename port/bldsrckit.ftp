#
#/************************************************************************/
#/*									 */
#/*		 Copyright (c) 1988, 1989, 1990, 1991, 1992, 1993	 */
#/*	 An unpublished work of International Digital Scientific Inc.	 */
#/*			    All rights reserved.			 */
#/*									 */
#/************************************************************************/
#
#
#	File:		bldsrckit.ftp
#
#	Function:	This script builds the WISP source kit
#
#	Usage:		ksh bldsrckit.ftp
#
#	Desciption:	
#			This works with the korn shell (/bin/ksh).
#			You must have a .netrc file setup for SCALOS
#			You must have getvmsdir.sh available.
#
#			It builds the WISP source kit.
#			It uses ftp to download all the relevent files
#			from SCALOS.  It copies directly out
#			of the SCS directories.
#
#			- build the directories
#			- download each component (MASTER then QAHOLD)
#			- copy the ".umf" files to "Makefile"
#			- video include files  --> src/include/v
#			- sample config files have ".unix" extension removed
#			- all ".obj" and ".com" files are deleted
#			- all long files (15+ chars are removed)
#			- all ".sh" files have x bit set (chmod +x)
#
#	Warning:	If the SCS directory structures change or new ones
#			are added then this routine must be updated.
#
#	History:	06/04/92	Written. GSL
#			06/09/92	Remove src/bin directory. GSL
#			06/09/92	Added copy of .umf to Makefile. GSL
#			06/30/92	Split src/test into src/testacu & src/testmf. GSL
#			07/07/92	Added wisp common include to printq. GSL
#                       12/14/92        Added libivs and vse JEC
#			04/29/93	Completed WISP SAMPLE section. GSL
#                       04/29/93        Slight change to some Unix commands for better efficiency. JEC
#			07/26/93	Modified bldsrckit.sh to work with FTP. GSL
#

GET=getvmsdir.sh

echo
echo
echo
echo
echo
echo This script will build a unix WISP source kit.
echo
echo It creates all the directory needed and then uses \"$GET\" to copy
echo all the source files from their SCS directories on SCALOS.
echo
echo '****'
echo '****' You must have \"$GET\" on your '$PATH' to continue.
echo '****' You also must have .netrc setup for SCALOS.
echo '****'
echo
echo -n	'Do you wish to continue [y/n] ? ' 
read ANS
if [ "y" != "${ANS}" ]
then
echo	exiting
exit
else
echo	continuing...
fi
echo
echo -n	"Enter parent directory [$HOME] ? "
read ANS
if [ "$ANS" = "" ]
then
	cd $HOME
else
	cd $ANS
fi
PARENTDIR=`pwd`
echo pwd = `pwd`
echo
echo -n	"Enter name of save dir (e.g. src32b) ? "
read ANS
if [ "$ANS" = "" ]
then
	ANS=srcXXX
fi

#
#	Make all the directories needed
#

echo mkdir $ANS
test -d $ANS || mkdir $ANS

echo cd $ANS
cd $ANS

echo mkdir src
test -d src || mkdir src

echo cd src
cd src

SOURCEDIR=`pwd`

echo mkdir acu ede etc include mf msdos port printq proctran 
for i in acu ede etc include mf msdos port printq proctran
do
	test -d $i || mkdir $i
done

echo mkdir videolib videotest videocap wisplib wisptran wisputils
for i in videolib videotest videocap wisplib wisptran wisputils
do
	test -d $i || mkdir $i
done

echo mkdir ivslib lib lib/x include/v testacu testmf vsedit
for i in ivslib lib lib/x include/v testacu testmf vsedit
do
	test -d $i || mkdir $i
done

#
#	Down load all the SCS files into the source kit.
#

echo ' '
echo 'Your choices for each project/component are y=yes, n=no, a=all or q=quit'
echo ' '

echo
echo ==================== VIDEO LIB ===========================================
echo
echo cd $SOURCEDIR/videolib
cd $SOURCEDIR/videolib

echo pwd = `pwd`
if [ "a" != "$ANS" ]
then
	echo -n	'Load VIDEO LIB [y/n/a/q] ? '
	read ANS
fi
if [ "q" = "$ANS" ]
then
	echo 'bldsrckit.sh: aborted.'
	exit 1
fi
if [ "y" = "${ANS}" -o "a" = "${ANS}" ]
then
echo	Loading VIDEO LIB
	$GET 'scs$video:[lib.master.source]'
	$GET 'scs$video:[lib.master.include]'
	$GET 'scs$video:[lib.master.build]'
	$GET 'scs$video:[lib.master.misc]'
	$GET 'scs$video:[lib.qahold.source]'
	$GET 'scs$video:[lib.qahold.include]'
	$GET 'scs$video:[lib.qahold.build]'
	$GET 'scs$video:[lib.qahold.misc]'

	$GET 'scs$video:[common.master.source]'
	$GET 'scs$video:[common.qahold.source]'
	$GET 'scs$video:[common.master.include]'
	$GET 'scs$video:[common.qahold.include]'

	cp libvideo.umf Makefile
fi

echo
echo =================== VIDEO TEST ===========================================
echo
echo cd $SOURCEDIR/videotest
cd $SOURCEDIR/videotest

echo pwd = `pwd`
if [ "a" != "$ANS" ]
then
	echo -n	'Load VIDEO TEST [y/n/a/q] ? '
	read ANS
fi
if [ "q" = "$ANS" ]
then
	echo 'bldsrckit.sh: aborted.'
	exit 1
fi
if [ "y" = "${ANS}" -o "a" = "${ANS}" ]
then
echo	Loading VIDEO TEST
	$GET 'scs$video:[test.master.source]'
	$GET 'scs$video:[test.master.include]'
	$GET 'scs$video:[test.master.build]'
	$GET 'scs$video:[test.master.misc]'
	$GET 'scs$video:[test.qahold.source]'
	$GET 'scs$video:[test.qahold.include]'
	$GET 'scs$video:[test.qahold.build]'
	$GET 'scs$video:[test.qahold.misc]'

	cp vtest.umf Makefile
fi

echo
echo =================== VIDEO CAP ===========================================
echo
echo cd $SOURCEDIR/videocap
cd $SOURCEDIR/videocap

echo pwd = `pwd`
if [ "a" != "$ANS" ]
then
	echo -n	'Load VIDEO CAP [y/n/a/q] ? '
	read ANS
fi
if [ "q" = "$ANS" ]
then
	echo 'bldsrckit.sh: aborted.'
	exit 1
fi
if [ "y" = "${ANS}" -o "a" = "${ANS}" ]
then
echo	Loading VIDEO CAP
	$GET 'scs$video:[cap.master.source]'
	$GET 'scs$video:[cap.master.include]'
	$GET 'scs$video:[cap.master.build]'
	$GET 'scs$video:[cap.master.misc]'
	$GET 'scs$video:[cap.qahold.source]'
	$GET 'scs$video:[cap.qahold.include]'
	$GET 'scs$video:[cap.qahold.build]'
	$GET 'scs$video:[cap.qahold.misc]'
fi

echo
echo =================== VIDEO IVS LIB ========================================
echo
echo cd $SOURCEDIR/ivslib
cd $SOURCEDIR/ivslib

echo pwd = `pwd`
if [ "a" != "$ANS" ]
then
	echo -n	'Load VIDEO IVS LIB [y/n/a/q] ? '
	read ANS
fi
if [ "q" = "$ANS" ]
then
	echo 'bldsrckit.sh: aborted.'
	exit 1
fi
if [ "y" = "${ANS}" -o "a" = "${ANS}" ]
then
echo	Loading VIDEO IVS LIB
	$GET 'scs$video:[ivs.master.source]'
	$GET 'scs$video:[ivs.master.include]'
	$GET 'scs$video:[ivs.master.build]'
	$GET 'scs$video:[ivs.master.misc]'
	$GET 'scs$video:[ivs.qahold.source]'
	$GET 'scs$video:[ivs.qahold.include]'
	$GET 'scs$video:[ivs.qahold.build]'
	$GET 'scs$video:[ivs.qahold.misc]'

	cp libivs.umf Makefile
fi

echo
echo ==================== VIDEO INCLUDE =====================================
echo
echo cd $SOURCEDIR/include/v
cd $SOURCEDIR/include/v
echo Loading VIDEO include headers
$GET 'scs$video:[lib.master.include]'
$GET 'scs$video:[lib.qahold.include]'
$GET 'scs$video:[common.master.include]'
$GET 'scs$video:[common.qahold.include]'
echo
echo ================== WISP ACUCOBOL =======================================
echo
echo cd $SOURCEDIR/acu
cd $SOURCEDIR/acu

echo pwd = `pwd`
if [ "a" != "$ANS" ]
then
	echo -n	'Load WISP ACUCOBOL [y/n/a/q] ? '
	read ANS
fi
if [ "q" = "$ANS" ]
then
	echo 'bldsrckit.sh: aborted.'
	exit 1
fi
if [ "y" = "${ANS}" -o "a" = "${ANS}" ]
then
echo	Loading WISP ACUCOBOL
	$GET 'scs$wisp:[acucobol.master.source]'
	$GET 'scs$wisp:[acucobol.master.include]'
	$GET 'scs$wisp:[acucobol.master.build]'
	$GET 'scs$wisp:[acucobol.master.misc]'
	$GET 'scs$wisp:[acucobol.qahold.source]'
	$GET 'scs$wisp:[acucobol.qahold.include]'
	$GET 'scs$wisp:[acucobol.qahold.build]'
	$GET 'scs$wisp:[acucobol.qahold.misc]'

	cp wruncblx.umf Makefile
fi

echo
echo ==================== WISP MF ===========================================
echo
echo cd $SOURCEDIR/mf
cd $SOURCEDIR/mf

echo pwd = `pwd`
if [ "a" != "$ANS" ]
then
	echo -n	'Load WISP MF [y/n/a/q] ? '
	read ANS
fi
if [ "q" = "$ANS" ]
then
	echo 'bldsrckit.sh: aborted.'
	exit 1
fi
if [ "y" = "${ANS}" -o "a" = "${ANS}" ]
then
echo	Loading WISP MF
	$GET 'scs$wisp:[mf.master.source]'
	$GET 'scs$wisp:[mf.master.include]'
	$GET 'scs$wisp:[mf.master.build]'
	$GET 'scs$wisp:[mf.master.misc]'
	$GET 'scs$wisp:[mf.qahold.source]'
	$GET 'scs$wisp:[mf.qahold.include]'
	$GET 'scs$wisp:[mf.qahold.build]'
	$GET 'scs$wisp:[mf.qahold.misc]'

	cp wrunmfx.umf Makefile
fi

echo
echo ================== WISP PORT ===========================================
echo
echo cd $SOURCEDIR/port
cd $SOURCEDIR/port

echo pwd = `pwd`
if [ "a" != "$ANS" ]
then
	echo -n	'Load WISP PORT [y/n/a/q] ? '
	read ANS
fi
if [ "q" = "$ANS" ]
then
	echo 'bldsrckit.sh: aborted.'
	exit 1
fi
if [ "y" = "${ANS}" -o "a" = "${ANS}" ]
then
echo	Loading WISP PORT
	$GET 'scs$wisp:[port.master.source]'
	$GET 'scs$wisp:[port.master.include]'
	$GET 'scs$wisp:[port.master.build]'
	$GET 'scs$wisp:[port.master.misc]'
	$GET 'scs$wisp:[port.qahold.source]'
	$GET 'scs$wisp:[port.qahold.include]'
	$GET 'scs$wisp:[port.qahold.build]'
	$GET 'scs$wisp:[port.qahold.misc]'

	cp makewisp.umf Makefile
fi

echo
echo =================== WISP EDE ===========================================
echo
echo cd $SOURCEDIR/ede
cd $SOURCEDIR/ede

echo pwd = `pwd`
if [ "a" != "$ANS" ]
then
	echo -n	'Load WISP EDE [y/n/a/q] ? '
	read ANS
fi
if [ "q" = "$ANS" ]
then
	echo 'bldsrckit.sh: aborted.'
	exit 1
fi
if [ "y" = "${ANS}" -o "a" = "${ANS}" ]
then
echo	Loading WISP EDE
	$GET 'scs$wisp:[ede.master.source]'
	$GET 'scs$wisp:[ede.master.include]'
	$GET 'scs$wisp:[ede.master.build]'
	$GET 'scs$wisp:[ede.master.misc]'
	$GET 'scs$wisp:[ede.qahold.source]'
	$GET 'scs$wisp:[ede.qahold.include]'
	$GET 'scs$wisp:[ede.qahold.build]'
	$GET 'scs$wisp:[ede.qahold.misc]'

	$GET 'scs$wisp:[menudemo.master.source]'
	$GET 'scs$wisp:[menudemo.master.include]'
	$GET 'scs$wisp:[menudemo.master.build]'
	$GET 'scs$wisp:[menudemo.master.misc]'
	$GET 'scs$wisp:[menudemo.qahold.source]'
	$GET 'scs$wisp:[menudemo.qahold.include]'
	$GET 'scs$wisp:[menudemo.qahold.build]'
	$GET 'scs$wisp:[menudemo.qahold.misc]'

	$GET 'scs$wisp:[common.master.source]'
	$GET 'scs$wisp:[common.qahold.source]'
	$GET 'scs$wisp:[common.master.include]'
	$GET 'scs$wisp:[common.qahold.include]'

	cp libede.umf Makefile
fi

echo
echo ==================== WISP ETC ===========================================
echo
echo cd $SOURCEDIR/etc
cd $SOURCEDIR/etc

echo pwd = `pwd`
if [ "a" != "$ANS" ]
then
	echo -n	'Load WISP ETC [y/n/a/q] ? '
	read ANS
fi
if [ "q" = "$ANS" ]
then
	echo 'bldsrckit.sh: aborted.'
	exit 1
fi
if [ "y" = "${ANS}" -o "a" = "${ANS}" ]
then
echo	Loading WISP ETC
	$GET 'scs$wisp:[etc.master.source]'
	$GET 'scs$wisp:[etc.master.include]'
	$GET 'scs$wisp:[etc.master.build]'
	$GET 'scs$wisp:[etc.master.misc]'
	$GET 'scs$wisp:[etc.qahold.source]'
	$GET 'scs$wisp:[etc.qahold.include]'
	$GET 'scs$wisp:[etc.qahold.build]'
	$GET 'scs$wisp:[etc.qahold.misc]'

	for old in *.unix
	do
		new=`basename $old .unix`
		echo "moving $old to $new"
		mv $old $new
	done

fi

echo
echo =================== WISP LIB ===========================================
echo
echo cd $SOURCEDIR/wisplib
cd $SOURCEDIR/wisplib

echo pwd = `pwd`
if [ "a" != "$ANS" ]
then
	echo -n	'Load WISP LIB [y/n/a/q] ? '
	read ANS
fi
if [ "q" = "$ANS" ]
then
	echo 'bldsrckit.sh: aborted.'
	exit 1
fi
if [ "y" = "${ANS}" -o "a" = "${ANS}" ]
then
echo	Loading WISP LIB
	$GET 'scs$wisp:[lib.master.source]'
	$GET 'scs$wisp:[lib.master.include]'
	$GET 'scs$wisp:[lib.master.build]'
	$GET 'scs$wisp:[lib.master.misc]'
	$GET 'scs$wisp:[lib.qahold.source]'
	$GET 'scs$wisp:[lib.qahold.include]'
	$GET 'scs$wisp:[lib.qahold.build]'
	$GET 'scs$wisp:[lib.qahold.misc]'

	$GET 'scs$wisp:[common.master.source]'
	$GET 'scs$wisp:[common.qahold.source]'
	$GET 'scs$wisp:[common.master.include]'
	$GET 'scs$wisp:[common.qahold.include]'

	cp libwisp.umf Makefile
fi

echo
echo ================= WISP PROCTRAN ========================================
echo
echo cd $SOURCEDIR/proctran
cd $SOURCEDIR/proctran

echo pwd = `pwd`
if [ "a" != "$ANS" ]
then
	echo -n	'Load WISP PROCTRAN [y/n/a/q] ? '
	read ANS
fi
if [ "q" = "$ANS" ]
then
	echo 'bldsrckit.sh: aborted.'
	exit 1
fi
if [ "y" = "${ANS}" -o "a" = "${ANS}" ]
then
echo	Loading WISP PROCTRAN
	$GET 'scs$wisp:[proctran.master.source]'
	$GET 'scs$wisp:[proctran.master.include]'
	$GET 'scs$wisp:[proctran.master.build]'
	$GET 'scs$wisp:[proctran.master.misc]'
	$GET 'scs$wisp:[proctran.qahold.source]'
	$GET 'scs$wisp:[proctran.qahold.include]'
	$GET 'scs$wisp:[proctran.qahold.build]'
	$GET 'scs$wisp:[proctran.qahold.misc]'

	$GET 'scs$wisp:[common.master.source]'
	$GET 'scs$wisp:[common.qahold.source]'

	cp proctran.umf Makefile
fi
echo
echo ================= WISP VSEDIT ========================================
echo
echo cd $SOURCEDIR/vsedit
cd $SOURCEDIR/vsedit

echo pwd = `pwd`
if [ "a" != "$ANS" ]
then
	echo -n	'Load WISP VSEDIT [y/n/a/q] ? '
	read ANS
fi
if [ "q" = "$ANS" ]
then
	echo 'bldsrckit.sh: aborted.'
	exit 1
fi
if [ "y" = "${ANS}" -o "a" = "${ANS}" ]
then
echo	Loading WISP VSEDIT
	$GET 'scs$wisp:[vsedit.master.source]'
	$GET 'scs$wisp:[vsedit.master.include]'
	$GET 'scs$wisp:[vsedit.master.build]'
	$GET 'scs$wisp:[vsedit.master.misc]'
	$GET 'scs$wisp:[vsedit.qahold.source]'
	$GET 'scs$wisp:[vsedit.qahold.include]'
	$GET 'scs$wisp:[vsedit.qahold.build]'
	$GET 'scs$wisp:[vsedit.qahold.misc]'

	$GET 'scs$wisp:[common.master.source]'
	$GET 'scs$wisp:[common.qahold.source]'

	cp vsedit.umf Makefile
fi

echo
echo =================== WISP TEST ===========================================
echo
echo cd $SOURCEDIR/testacu
cd $SOURCEDIR/testacu

echo pwd = `pwd`
if [ "a" != "$ANS" ]
then
	echo -n	'Load WISP SAMPLE [y/n/a/q] ? '
	read ANS
fi
if [ "q" = "$ANS" ]
then
	echo 'bldsrckit.sh: aborted.'
	exit 1
fi
if [ "y" = "${ANS}" -o "a" = "${ANS}" ]
then
echo	Loading WISP SAMPLE
	$GET 'scs$wisp:[sample.master.source]'
	$GET 'scs$wisp:[sample.master.include]'
	$GET 'scs$wisp:[sample.master.build]'
	$GET 'scs$wisp:[sample.master.misc]'
	$GET 'scs$wisp:[sample.qahold.source]'
	$GET 'scs$wisp:[sample.qahold.include]'
	$GET 'scs$wisp:[sample.qahold.build]'
	$GET 'scs$wisp:[sample.qahold.misc]'
	echo Duplicating testacu into testmf
	cp * ../testmf

	cp sampleacu.umf Makefile
	cp ../testmf/samplemf.umf ../testmf/Makefile

	echo Copying ACU files to testacu
	cp $SOURCEDIR/acu/acu.rules    $SOURCEDIR/testacu
	cp $SOURCEDIR/acu/aculink.wcb  $SOURCEDIR/testacu
	cp $SOURCEDIR/acu/acuusing.cob $SOURCEDIR/testacu

	echo Copying MF files to testmf
	cp $SOURCEDIR/mf/mf.rules      $SOURCEDIR/testmf
	cp $SOURCEDIR/mf/mflink.cob    $SOURCEDIR/testmf
fi

echo
echo =================== WISP TRAN ===========================================
echo
echo cd $SOURCEDIR/wisptran
cd $SOURCEDIR/wisptran

echo pwd = `pwd`
if [ "a" != "$ANS" ]
then
	echo -n	'Load WISP TRAN [y/n/a/q] ? '
	read ANS
fi
if [ "q" = "$ANS" ]
then
	echo 'bldsrckit.sh: aborted.'
	exit 1
fi
if [ "y" = "${ANS}" -o "a" = "${ANS}" ]
then
echo	Loading WISP TRAN
	$GET 'scs$wisp:[tran.master.source]'
	$GET 'scs$wisp:[tran.master.include]'
	$GET 'scs$wisp:[tran.master.build]'
	$GET 'scs$wisp:[tran.master.misc]'
	$GET 'scs$wisp:[tran.qahold.source]'
	$GET 'scs$wisp:[tran.qahold.include]'
	$GET 'scs$wisp:[tran.qahold.build]'
	$GET 'scs$wisp:[tran.qahold.misc]'

	$GET 'scs$wisp:[common.master.source]'
	$GET 'scs$wisp:[common.qahold.source]'
	$GET 'scs$wisp:[common.master.include]'
	$GET 'scs$wisp:[common.qahold.include]'

	cp wisp.umf Makefile
fi

echo
echo ================= WISP UTILS ===========================================
echo
echo cd $SOURCEDIR/wisputils
cd $SOURCEDIR/wisputils

echo pwd = `pwd`
if [ "a" != "$ANS" ]
then
	echo -n	'Load WISP UTILS [y/n/a/q] ? '
	read ANS
fi
if [ "q" = "$ANS" ]
then
	echo 'bldsrckit.sh: aborted.'
	exit 1
fi
if [ "y" = "${ANS}" -o "a" = "${ANS}" ]
then
echo	Loading WISP UTILS

	$GET 'scs$wisp:[utils.master.source]'
	$GET 'scs$wisp:[utils.qahold.source]'
	$GET 'scs$wisp:[utils.master.include]'
	$GET 'scs$wisp:[utils.qahold.include]'
	$GET 'scs$wisp:[utils.master.build]'
	$GET 'scs$wisp:[utils.qahold.build]'
	$GET 'scs$wisp:[utils.master.misc]'
	$GET 'scs$wisp:[utils.qahold.misc]'

	$GET 'scs$wisp:[common.master.include]'
	$GET 'scs$wisp:[common.qahold.include]'

	cp utils.umf Makefile
fi

echo
echo ================== WISP PRINTQ ==========================================
echo
echo cd $SOURCEDIR/printq
cd $SOURCEDIR/printq

echo pwd = `pwd`
if [ "a" != "$ANS" ]
then
	echo -n	'Load PRINTQ UNIX [y/n/a/q] ? '
	read ANS
fi
if [ "q" = "$ANS" ]
then
	echo 'bldsrckit.sh: aborted.'
	exit 1
fi
if [ "y" = "${ANS}" -o "a" = "${ANS}" ]
then
echo	Loading PRINTQ UNIX
	$GET 'scs$printq:[unix.master.source]'
	$GET 'scs$printq:[unix.master.include]'
	$GET 'scs$printq:[unix.master.build]'
	$GET 'scs$printq:[unix.master.misc]'
	$GET 'scs$printq:[unix.qahold.source]'
	$GET 'scs$printq:[unix.qahold.include]'
	$GET 'scs$printq:[unix.qahold.build]'
	$GET 'scs$printq:[unix.qahold.misc]'

	$GET 'scs$wisp:[common.master.include]'
	$GET 'scs$wisp:[common.qahold.include]'

	cp printq.umf Makefile
fi

echo
echo ================== WISP MSDOS ===========================================
echo
echo cd $SOURCEDIR/msdos
cd $SOURCEDIR/msdos

echo pwd = `pwd`
if [ "a" != "$ANS" ]
then
	echo -n	'Load WISP MSDOS [y/n/a/q] ? '
	read ANS
fi
if [ "q" = "$ANS" ]
then
	echo 'bldsrckit.sh: aborted.'
	exit 1
fi
if [ "y" = "${ANS}" -o "a" = "${ANS}" ]
then
echo	Loading WISP MSDOS
	$GET 'scs$wisp:[msdos.master.source]'
	$GET 'scs$wisp:[msdos.master.include]'
	$GET 'scs$wisp:[msdos.master.build]'
	$GET 'scs$wisp:[msdos.master.misc]'
	$GET 'scs$wisp:[msdos.qahold.source]'
	$GET 'scs$wisp:[msdos.qahold.include]'
	$GET 'scs$wisp:[msdos.qahold.build]'
	$GET 'scs$wisp:[msdos.qahold.misc]'
fi

echo
echo ================== Down Loading Complete ===============================
echo
echo
echo cd $SOURCEDIR
cd $SOURCEDIR

echo pwd = `pwd`
if [ "a" != "$ANS" ]
then
	echo
	echo -n 'Delete all *.com and *.obj files [y/n/a/q] ? '
	read ANS
fi
if [ "q" = "$ANS" ]
then
	echo 'bldsrckit.sh: aborted.'
	exit 1
fi
if [ "y" = "${ANS}" -o "a" = "${ANS}" ]
then
echo 'find . -name "*.com" -print | xargs rm'
find . -name "*.com" -print | xargs rm
echo 'find . -name "*.obj" -print | xargs rm'
find . -name "*.obj" -print | xargs rm
fi

#
#	Remove all long names greater then 14 characters
#

echo "This routine next removes any file names longer than 14 characters."
echo

# Error in AIX "find" pattern matching
#for fil in `find . -name "???????????????*" -print`

for fil in `ls */???????????????*`
do
	echo "File <$fil> name too long. Rename?"
	read ans
	if [ "$ans" = "y" ]
	then
		echo "Enter new name:"
		read nam
		bas=`dirname $fil`
		if [ -f $bas/$nam ]
		then
			echo "$bas/$name exists"
			ls $bas
			echo "Enter new name:"
			read nam
		fi
		echo "Rename $fil to $bas/$nam"
		mv $fil $bas/$nam
	else
		echo "Delete it?"
		read ans
		if [ "$ans" = "y" ]
		then
			echo "Delete $fil"
			rm $fil
		else
			echo "Name is still too long."
		fi
	fi
done

#
#	File name cleanup
#

echo " "
echo "Changing mode of all .sh files to 771."
find . -name '*.sh' -print | tee /dev/tty | xargs chmod 771


echo 
echo "You must get the current release notes (WISP  DOC  V39X_RELNOTES.LIS)"
echo "and copy them to a $SOURCEDIR/etc/RELNOTES file."
echo 
echo 
echo DONE.
echo 
exit
