	Copyright (c) 1989-2001 by NeoMedia Technologies Inc. 
	All Rights Reserved.
	
	====================================================================
	
	Title:		WISP QA Checklist
	
	Document:	qawisp.lis
	Last Updated:	$Date:$
	Products:	WISP
	
	====================================================================

	WISP QA CHECKLIST
	=================

	QA Engineer:  _________________________________	   Date __/__/__

	Platform:     ___________________________   OS Version: __________

	WISP Version: _________________________________

	Problems 
	detected: (1)_____________________________________________________

		  (2)_____________________________________________________

		  (3)_____________________________________________________

		  (4)_____________________________________________________

		  (5)_____________________________________________________

		  (6)_____________________________________________________

		  (7)_____________________________________________________

		  (8)_____________________________________________________

		  (9)_____________________________________________________

		  (10)____________________________________________________


	PURPOSE:	This QA checklist is to be used to test and verify
			all functionality of WISP.

	WHEN USED:	This QA checklist is used everytime WISP is
			ported to a new platform and everytime a new
			release is re-ported to a platform.

+			The items that comprize a mini-test are marked
+			with a plus sign (+) in column one.

	INSTRUCTIONS:	1) Fill in the above information.

			2) Do each action in sequence and check it off
			   as it is done.

			3) If any functionality is not working number it
			   and note it on this checklist (above) and report
			   it.
			   Use the following codes beside the item:
				FAIL	- Not Working as expected
				ABORT	- Causes program to ABORT
				MISS	- Known missing functionality
				N/A	- Not Applicable to environment
				ENHC	- Enhancements needed

			4) When completed turn in this checklist.



#####################  This page is for UNIX only  ########################

+	PREREQUESITE

	___	Port WISP to this machine following the steps outlined in
		the document "portunix.lis".

	___	Install WISP and build the RTS. This is normally done with
		the "installqa.sh" script but could be done from a WISP
		kit.


+	SET UP FOR WISP QA TESTING.
	
	___	Login to 2 windows/terminals as 2 DIFFERENT userids.
		One should be a COSTAR window with 

			$ export WISPTERM=w4w_vt220
			$ export W4W=2

	___	Set the needed environment variables

			$ export WISPGID=$$
			$ export ACUDIR=/disk1/acucobol
			$ export COBDIR=/disk1/mfcobol

	___	Change directory to your "test" dir based on the COBOL you
		are using.

		ACU	$ cd $WISP/src/testacu
		MF	$ cd $WISP/src/testmf

	___	Run the "startup" file to setup environment variables.  
		This will set your $WISPCONFIG plus COBOL specific variables.
		It will also set $QA to point to your test directory.

		ACU	$ startupacu.sh
		MF	$ startupmf.sh

	****
	****    THE ABOVE STEPS MUST BE DONE EVERYTIME YOU RE-START.
	****


	LICENSE THE MACHINE

	___	su  (to root)
		$WISPDIR/bin/wlicense


+	SETUP $WISPCONFIG DIRECTORY

	___	Run the config setup script.

		ACU	$ configacu.sh

		MF	$ configmf.sh

	___	Check your setup with WDIAG. Some LGMAP directories have
		not yet been created.  Ensure that everything else is OK. 

			$ wdiag


+	BUILD SAMPLE


	___	Build the SAMPLE programs.  

		ACU	$ make -f sample.umf ACU
		MF	$ make -f sample.umf MF
		MFSE	$ make -f sample.umf MFSE

	WISP TRANSLATOR TESTS

	___	Run the WISP translator against the t_xxx.wcb test files.

		$ cd $WISP/src/wisptran
		$ make -f wisp.umf testacu  2>&1 |more
		$ make -f wisp.umf testmf   2>&1 |more
		$ make -f wisp.umf testmfse 2>&1 |more
		$ make -f wisp.umf testacn  2>&1 |more

		These will generate multiple WISP warnings and errors,
		this is expected.  Look for errors coming from the COBOL
		compilers.

		Cobol should complain about the HOLD verb.


	VIDEOCAP FILE

	___	Build a videocap file for this terminal for use in the QA.
		See instructions in the WISP manual.

		$ vcapkeys	





#####################  This page is for WIN32 only  ########################

+	PREREQUESITE

	___	Port WISP to this machine following the steps outlined in
		the document "portwin32.txt".

	___	Install WISP, build the RTS, and license the machine.

		This is done following the "WISP Quick Setup" and then
		WISP manual Appendix A.

		___  Install WISP
		___  Install EDE
		___  Install CRID
		___  Install CREATE

		___  Build a COBOL Runtime system with WISP
		     ___  Follow wrun32wisp.mak instructions.
		___  Build a COBOL Runtime system with WISP & EDE
		     ___  Follow wrun32wisp_ede.mak instructions.
		___  Build a COBOL Runtime system with WISP & CRID
		     ___  Follow wrun32wisp_crid.mak instructions.

		___  Share C:\WISPxxxx as share name "WISP"
		___  Share C:\CRIDxxx as share name "CRID"
		___  Share C:\CREATExxx as share name "CREATE"

		___  Run WCONFIG.EXE
		     ___  (RESET) if already configured
		     ___  WISP Server: (name of test machine)
		     ___  Accept defaults...

		___  Run WLICENSE.EXE

+	SETUP $WISPCONFIG DIRECTORY

	___	Share these directories: 
		C:\DEV\WISP\SRC\TESTACU      as TESTACU
		C:\DEV\WISP	             as WISPDEV
                C:\Acucorp\Acucbl510\AcuGT   as ACUCOBOL

	___   	Edit ...\TESTACU\SAMPLEACU.MAK

		___ Set WISPDIR=C:\WISP44xx
		___ Set COBOL=C:\Acucorp\Acucbl510\Acugt\BIN\CCBL32.EXE

	Copy the config files.
	___	Run CONFIGACU.BAT
		 (nmake -f sampleacu.mak wispconfigsetup testdirs)

	___	LGMAP:	Edit it to ensure it is correct.

	___	LPMAP:	Edit it to ensure it is correct

	___	OPTIONS: 
		___ Set VUTIL=\\SERVER\ACUCOBOL\BIN\VUTIL32.EXE
		___ Set COSTARV2

	___	ACUCONFIG: Edit CONFIG\ACUCONFIG and add the TESTACU share
		name to the CODE-PREFIX.

		    CODE-PREFIX . \\SERVER\TESTACU 
				  \\SERVER\WISP\ACU
				  \\SERVER\CRID

	___	WRUN.CFG: Edit CONFIG\WRUN.CFG and correct the locations
		of ACUCONFIG and WRUN32WISPC.EXE (CRID Version).

		    option=-b +e \\SERVER\TESTACU\acuerr.log -c \\SERVER\TESTACU\CONFIG\ACUCONFIG
		    runcbl=\\SERVER\ACUCOBOL\BIN\WRUN32WISPC.EXE

	___	WSYSCONF.CFG: Edit CONFIG\WSYSCONF.CFG and add the machine
		name as workstation 100.

		    100  ws   WINDOWS  CYCLONE

	___	Run WCONFIG 
		- GENERAL (TAB)
		WISPCONFIG =\\SERVER\TESTACU\CONFIG 
		PATH = \\SERVER\WISP\BIN;
		       \\SERVER\WISP\ACU;
		       \\SERVER\TESTACU;
		       \\SERVER\TESTACU\VOLRUN\ONPATH;
		       \\SERVER\CRID;
		       \\SERVER\CREATE;
		       C:\WIN

		- MESSAGE (TAB)
		SHAREDIR = \\SERVER\TESTACU\MESSAGE

	___	Test configuration:

		C:\WISPxxx\BIN> wdiag.bat


+	BUILD SAMPLE

	___	Build the SAMPLE programs.

		SAMPLEACU.BAT
		  (nmake /f sampleacu.mak)

	___	Build DISPRINT.

		___ Edit \\SERVER\WISP\ETC\DISPRINT.MAK

		    ___ SET WISPTRAN=..\BIN\WISP.EXE
		    ___ SET CCBL=\\SERVER\ACUCOBOL\BIN\CCBL32.EXE

		___ Run NMAKE to build DISPRINT
		    C:...\ETC> nmake /f disprint.mak acu

		___ Copy DISPRINT to ..\ACU
		    COPY DISPRINT ..\ACU


################  This page is for all platforms  ####################


+	SETUP DEFAULT USAGE CONSTANTS

	___	Run "wshell"

		Setup USAGE CONSTANTS
	___	(1) RUN Program or Procedure
			PROGRAM = QA0000
			LIBRARY = TESTxxx	(ACU/MF)
			VOLUME  = SOURCE

		Setup test programs
	___	(1) RUN Program or Procedure
			PROGRAM = QA0001
			LIBRARY = TESTxxx
			VOLUME  = SOURCE

	___	(13) Save environment

	___	(16) Exit

	___	There should not be any WDIAG errors. If there
		are serious errors they must be fixed here.

		UNIX:  $ wdiag
		WIN32: double click on WDIAG.BAT (or run from Start menu)


+	First check-out general functionality.

	___     Run "wshell"
		ACU:	(1) Run QASTART in TESTACU on SOURCE
		MF:	(1) Run QASTART in TESTMF  on SOURCE

	___	HELP-KEY (^e)
			Look for the following info:
			__  Workstation number
			__  Date and time
			__  Username
			__  System name 
			__  Progam: SAMPLE
			__  Screen: MAIN-SCREEN

	___	(32) Copyright Screen.	(Verify the Version number)
		(31) Internal info
		(30) Usage Constants
		(29) Environment info

	___	(5) Manage FILES/LIBRARIES

	___	AIX:  (6) Manage SYSTEM

	___	(14) PRINT PROGRAM Screen.
		(15) PRINT COMMAND Screen.
		Check the printouts for correctness.
		Files are id#### LIBSPOOL VOLSPL.
		Verify the file	has been submited to a print queue.

	___	UNIX: (7) Manage PRINT QUEUE
			If option (7) does not appear on the help screen, 
			edit the OPTIONS file in the WISPCONFIG directory 
			and uncomment the line:
				PQUNIQUE

		(9) Use UTILITIES
	___	(2) DISPLAY a file
		    FILE = XYZ     LIBRARY = LIBIN    VOLUME = VOLIN

		(9) Use UTILITIES
	___	(3) EDIT a file
		    FILE = SAMPLE  LIBRARY = TESTxxx  VOLUME = SOURCE

		(9) Use UTILITIES
	___	(4) DISPRINT
 
		(10) Configure TERMINAL.		
	___	(2)  PSEUDO Blank Characteristics.
		     Character=[4] 
		     Rendition=[N]

	___	(11) Enter COMMANDS  (UNIX only)

		UNIX: 	$ ps
			$ exit  (or ^d)

	___	(13) SAVE environment.

	___	(16) CANCEL Processing

	___	(16) EXIT wshell


	Do SAMPLE.WCB tests

	UNIX:
	___	$ wproc -v		Ensure running correct version
	___	$ wproc qastart		Run SAMPLE with procedure qastart

	WIN32:
	___	Create a Shortcut on the desktop using Command line:
		   "C:\WISPxxx\BIN\WPROC \\SERVER\TESTACU\QASTART"

	___	Double click on icon to start.
		

	(6) COBOL TESTS

	___	(1) DISPLAY VERB.	Should display a message.

+	___	(2) RETURN-CODE.	Enter value then (16) exit program 
					and qastart.wps will display it.

	___	(3) SORT VERB.		Will sort a small file by the 
					SORT verb, then display both
					the unsorted & sorted file.
					Verify the sorted file is sorted
					by TYPE then DATE.

	___	(4) CONDITIONAL TEST.	WISP_CODE conditions.  Press (ENTER).

+	___	(5) ACCEPT VERB.	Enter the following (TAB to fields):
					COMPANY  = This is the COMPANY
					YEARCODE = 987654321
					ACCESSCO = abc

		___	COMPANY should be 20 bytes long.  Press (ENTER).

		___	YEARCODE should be "4321".  Press (ENTER).

		___	ACCESSCODE should be "a".  Press (ENTER).

	___	(6) STOP VERB

		___	"TEST OF STOP VERB"

		___	"3"


	___	(7) MOVE WITH CONVERSION

		___    (1) Auto Test

		Exit all the way out to the shell
		(16) to EXIT  COBOL TEST
		(16) to EXIT  SAMPLE
		(16) to EXIT  QASTART


	UNIX:

	___	$ wrun SAMPLE

	WIN32:
		Create a Shortcut on the desktop using Command line:
	___	   "C:\WISPxxx\BIN\WRUN SAMPLE"

	___	Double click on icon to start.

	(3) FILE I/O TESTS	(QAFILEIO)

		In this section we are going to test all the file I/O
		functionality.

		FILE-A tests.		Assume these work if no errors
					are reported.

+	___	(1) CREATE FILE-A AND WRITE IT
					Should create AFILE LIBOUT VOLOUT
+	___	(4) DELETE RECORDS FROM FILE-A
+	___	(1) CREATE FILE-A AND WRITE IT
			Should get a PF3 getparm screen.
			Change FILE from AFILE to AAA and press Enter.
					Should create AAA   LIBOUT VOLOUT

		SEQUENTIAL FILE tests.

+	___	(6) CREATE A SEQUENTIAL FILE 
					Leave the lib and vol blank.
					Should create SEQFILE LIBOUT VOLOUT
		(16) back to menu.
	
	___	(22) OPEN EXTEND SEQUENTIAL (should be no getparm)
	___	(24) CLOSE SEQUENTIAL	    
	___	(23) OPEN OUTPUT SEQUENTIAL (getparm - Press PF3)
	___	(24) CLOSE SEQUENTIAL	    

+	___	(6)  (again): At PF3 option FILE=SEQFILE1
		(16) back to menu.

	___	(6) (again): Use FILE=##AB to test temp filename generation.
 		    Should use (worklib) VOLWRK. 
	___	Do the above twice each time setting FILE=##AB to test temp
 		    filename sequencing AB0000 AB0001 AB0002
	___	Once more this time don't change FILE, it should NOT give
		    you a file-getparm "PF3 to continue" because in WORKLIB.
		(16) back to menu.

+	___	(25) WRITE SEQUENTIAL	(ENTER) - File not OPEN
					Should ERROR getparm  (85) [48][02]
							      (74) [91][02]
		(16) to EXIT program.

+	___	UNIX: 	echo $?			Should be 16
			wretcode		Should return 16


	___	wshell
		(1) Run SAMPLE in TESTxxx on SOURCE

	Run SAMPLE and (3) FILE I/O TESTS

		FILE-B tests.	These test all the INDEXED file I/O operations.
				Check FILE-B-STAT field after each operation.

	___	(2) Auto Test FILE-B
		    (1) Create and Auto Test FILE-B
		    (16) Exit

	___	(3) SORT SORT-B-FILE

	___	Display BFILESEQ in LIBOUT on VOLOUT with (11) record width=92
		and ensure it is in descending order. (7,8,3,2,4,5,6,1)

	___	(15) OPEN FILE-B INPUT	Press (ENTER)  (file status 00)
	___	(11) WRITE FILE-B  (ENTER)   		        (85) [48]
								(74) [90][01]
				File status WRITE NOT ALLOWED
				File OPEN in wrong mode.

	___	(16) to EXIT program.
		Program ABORTED or was CANCELLED


	___	wshell
		(1) Run SAMPLE in TESTxxx on SOURCE

	Run SAMPLE and (3) FILE I/O TESTS

	___	(15) OPEN FILE-B INPUT   
	___	(15) OPEN FILE-B INPUT  Error-getparm  	(85) [41]
					Already open	(74) [92][00]

	___	(16) to EXIT program.
		Program ABORTED or was CANCELLED


	___	wshell
		(1) Run SAMPLE in TESTxxx on SOURCE


	Run SAMPLE and (3) FILE I/O TESTS

		RECORD & FILE LOCKING TESTS
	
		FILE-B record and file locking tests. Start two windows
		running QAFILEIO. In Window-1 run the Window-1 Tests
		and in Window-2 run the Window-2 Tests.

		**** NOTE **** If you don't have 2 windows for this
		test then only run the Window-1 tests.

	___	(2) Auto Test FILE-B
		    (2) Run Window-1 Tests
		    (3) Run Window-2 Tests

	STEP 01	<W1> OPEN FILE-B I-O  
	STEP 02	<W2> OPEN FILE-B I-O  File-getparm FILE LOCKED

	STEP 03	<W1> CLOSE FILE-B
	STEP 04	<W2> (ENTER) to retry OPEN I-O
	STEP 05	<W1> OPEN FILE-B SHARED file-getparm FILE LOCKED

	STEP 06	<W2> CLOSE FILE-B
	STEP 07	<W1> (ENTER) to retry OPEN SHARED
	STEP 08	<W2> OPEN FILE-B SHARED  (success both have it opened)

	STEP 09	<W2> READ HOLD (for REWRITE) key=AAAA (Record is now locked)
	STEP 10	<W1> READ                    key=AAAA (should succeed)
	STEP 11	<W1> READ HOLD               key=BBBB (should succeed)

	STEP 12	<W1> READ HOLD (for DELETE)  key=AAAA (should wait)
	STEP 13	<W2> REWRITE  key=AAAA       B-VALUE-2="NEW TEXT HERE"
		              	  <W1> 	Should get modified record

	STEP 14	<W2> READ HOLD               key=AAAA (should wait)
	STEP 15	<W1> DELETE   key=AAAA	     <W2> file-status 23 NOT FOUND

	STEP 16	<W1> READ HOLD		     key=BBBB (should succeed)
	STEP 17	<W2> READ HOLD		     key=BBBB (should wait)

	STEP 18	<W1> FREE ALL		     <W2> Should now get record
	STEP 19	<W2> FREE ALL		     No message

	STEP 20	<W1> READ HOLD		     key=BBBB	(should succeed)
	STEP 21	<W2> READ TIMEOUT	     key=BBBB 
					Should wait 5 secs then come back
					with **** TIMEOUT **** filestatus 
					REC LOCKED (92 or 99 or 9D)

		Next we try a non-timeout this is tricky and you need to
		be fast. <W1> has BBBB locked now, <W2> is going to try
		to read and lock BBBB, <W1> will read and lock CCCC
		this will free BBBB and allow <W2> to lock it.

	STEP 22	<W2> READ TIMEOUT key=BBBB
	STEP 23	<W1> READ HOLD    key=CCCC *** QUICKLY ***

		Window <W1> should get CCCC then a moment later <W2> should
		get BBBB without a TIMEOUT.

	STEP 24	<W1> READ HOLD   key=AAAA INVALID KEY 23 (was deleted)
		This should unlock CCCC.
	STEP 25	<W2> READ HOLD   key=CCCC 	(should succeed)

	STEP 26	<W2> (10) CLOSE FILE-B   	(should unlock CCCC)
	STEP 27	<W1> (10) CLOSE FILE-B

		For manual record locking ensure that READ and WRITE don't
		release the record lock.  (QA testing ACU only)

	___	<W1> (9) OPEN FILE-B SHARED  (success)
	___	<W2> (9) OPEN FILE-B SHARED  (success both have it opened)
	___	<W2> (19) READ HOLD           key=BBBB (should succeed)
	___	<W1> (19) READ HOLD	      key=BBBB (should wait)
	___	<W2> (12) READ                key=CCCC (succeed) 
						       (<W1> still waits)
	___	<W2> (11) WRITE               key=XXXX (succeed) 
						       (<W1> still waits)
	___	<W2> (9) OPEN FILE-B SHARED  (Abort (16) <W1> gets BBBB)
	___	<W1> (21) READ HOLD DELETE    key=XXXX (succeed) 
	___	<W1> (10) CLOSE FILE-B       (succeed)
						       						       

		We are finished the lock tests, EXIT from <W2>.


	QAFILEIO - Screen 2

		(32) NEXT SCREEN

	___	(1) SEQ/DYN LOGGING	Should give three screens, an OPEN
					WRITE and CLOSE. Each screen shows
					the file status, 05 is fine for
					the OPEN.
					Run three times waiting a minute
					between each one. This will write
					three timestamps out to the file.
	___	DISPLAY file (1) file=@TRNSLOG lib=@LOGFIL@ vol=VOLOUT

	___	(Set PRINTMODE = Keep) -- (^E) HELP (3) SET PRINT Defaults

	___	(2) OPEN OUT PRINT WRITE CLOSE
					Leave lib & vol blank, it should
					use LIBSPOOL and VOLSPL.
	___	DISPLAY file (1) file=PRTFILE lib=LIBSPOOL vol=VOLSPL  
		It was written with AFTER ADVANCING PAGE and 5 LINES.

	___	(2) OPEN OUT PRINT WRITE CLOSE (again)
		    At the PF3 screen change FILE=PRTFILE2.

	___	(3) OPEN OUTPUT PRINT FILE	(PF3 to continue)
	___	(4) CLOSE PRINT FILE		

	___	(5) OPEN EXTEND PRINT FILE	(NO PF3, it's EXTEND)
	___	(4) CLOSE PRINT FILE		

	___	(6) OPEN EXT PRINT WRITE CLOSE	

	___	(7) SUBS SCREEN/PRINT EXTEND	(Should print it)
			This one uses the "SCREEN" and "PRINT" subs to 
			create a print file then extend it.  You will see
			a screen image and there should be a line following
			it that has a name and timestamp.

	___	(13) CREATE A LARGE FILE (Takes a couple seconds)

	___	(14) CREATE EMPTY Files

	___	(15) CREATE LIBSAM Files

	___	(26) LOAD ALTVAR8 (IDX8) -- (MF ONLY may error)

		(16) to EXIT FILE I/O TESTS


	(4) SCREEN I/O TESTS (QASCREEN)

		This section tests all the screen I/O functionality.

	___	(20) ALL FACS TEST - see that facs display unique.

+	___	(1) DISPLAY A COMPLEX SCREEN.
		___  Enter XXX in NO-ECHO FIELD
		___  Enter one valid and one invalid range.
		___  Enter a letter in a numeric field

	___	(2) TRY THE PF KEYS.  		try all PF keys 1-32
         
		(3) PIC ZZ AND MISC.

		These test have been replaced by "qapic".
	___	Exit out to the shell and run qapic from the wisputils
		directory.

+	___	(6) TEST REWRITE TO CRT. 	A message should flash
       
	___	(8) TEST COMPLEX MUTIPLE DIMENSIONS. (3D table)
					Just see that it displays.

		(11) TEST MONKEY BAR MENU.  
	___	    TAB KEY should hit all fields
	___	    SPACEBAR should hit only menu positions   
	___	    "F" "T" "S" "M" should take you to menu positions
	___	    ENTER at "THIRD MENU" to test the cursor position
		    clause. 
	___	    (16) to EXIT


	___	(12) COLUMN TEST. 	Should display column twice.
			Test the RANGE clause.
				-100   *	(* = should fail)
				-99
				0
				999
				1000   *
				(rest are blank)
                 
+		(13) DISPLAY AND READ TOTAL TEST.  This tests all the clauses
		    of DISPLAY AND READ. It is run repeatedly from a loop.
	___	    Press (1)	message NO MODS WERE MADE ON THIS SCREEN
	___	    Rerun (2) 	message NO MODS WERE MADE ON THIS SCREEN
	___	    Rerun (3)	message ON-PFKEY: PFKEY 03 WAS PRESSED
	___	    Rerun (4)	message ON-PFKEY: PFKEY 04 WAS PRESSED

	___	    Rerun (ENTER) should beep
	___	    Enter "NO " (1)  should end with no message
	___	    Rerun enter "YES" (3) 
				message ON-PFKEY: PFKEY 03 WAS PRESSED
	___	    Rerun, field should still say "NO "
	___	    Enter "XXX" (1) field should blink
	___	    (3) should end with 
				message ON-PFKEY: PFKEY 03 WAS PRESSED
		    (16) Exit loop
 
		**** NOTE ****	First change your pseudo blank to a 
				character in "N" normal rendition. 
				(something other then underline)


		(15) REWRITE & READ OF CRT.   
		This does 4 rewrites & reads of the screen. The first 2
		are with the MODIFIABLE clause, the second 2 with ALTERED.
		Should be pseudo blanks in the first half of the last 2
		lines only.

		**** NOTE ****  Do not type over all of the pseudo blanks
				as we need some on the screen to test
				how the read handles them.

	___	Enter stuff on all modifiable lines. This should test all
		of the FAC's BLINK BOLD HIDDEN UNDERLINE DIM
	___	"ENTER" the pseudo blanks should be replaced with spaces.
	___	"ENTER" the pseudo blanks are back. 
	___	"ENTER" the pseudo blanks are NOT replaced with spaces.
		"ENTER" to end
     
+		(17) ROW REWRITE & READ Test ROW oriented screen I/O
					This will write over top of the
					existing screen.
	___	At row 10 **** REWRITE TEST *** Cursor should be positioned
		at row 10 col 2.
	___	TAB should take you to row 11 col 5. This should be 
		BRITE MODIFIABLE enter text here.
	___	ENTER.
 		Row 11 should be duplicated on row 12 but DIM NO-MOD.
	___	ENTER.
		Should Row 16 message CENTER CURSOR (blinking+brite), 
		cursor should be centered on screen row 12 col 40. 
	___	ENTER.
		Cursor should postion row 1 col 40 with no other changes
		on the screen (write order-area only test). 
	___	ENTER 
		Screen should be repainted.

	___	(18) MULTIPLE COLUMNS		Should display 4 double cols


	___	(19) EMBEDDED FAC TEST
		    Type over the +++++ then press (ENTER). What you typed
		    should remain on screen.
		    Press (ENTER) again to exit.

		(16) to exit SCREEN tests


	(5) WANG VSSUBS TESTS (QASUBS)

		This section tests all of the Wang VSSUBS.

	___	(32) AUTOTEST  (WL0000) - AUTOMATIC QA OF VSSUBS
		Run each of the WLxxxx tests from the menu.

	___	(01) WL0010  - WISPPLAT
	___	(02) WL0011  - USESOFTLINK/USEHARDLINK
	___	(03) WL0012  - BITPACK
	___	(04) WL0013  - BITUNPK
	___	(05) WL0014  - HEXPACK
	___	(06) WL0015  - HEXUNPK
	___	(07) WL0016  - DATE/DATE2
	___	(08) WL0017  - DAY
	___	(09) WL0018  - MESSAGE  (Takes a few seconds to finish)
	___	(10) WL0019  - SEARCH
	___	(11) WL0020  - SORT
	___	(12) WL0021  - STRING
	___	(13) WL0022  - SET/EXTRACT
	___	(14) WL0023  - bit tests
	___	(15) WL0024  - UPPER

	___	(17) WL0025  - w2rowcol
	___	(18) WL0026  - xx2byte
	___	(19) WL0027  - PUTPARM

		(16) EXIT


	___	The WL0018A & B test the MESSAGE routine automatically.
		Each program opens a message port then they handshake and
		send and receive 100 numbered messages.

		(8) Link to WL0018A in one session  AND...
		(8) Link to WL0018B as a different user

		Once both programs have started, press Enter on both
		screens and they should run for a few seconds (10-15) then
		report that they sent 100 messages.
	

		(1) READFDR tests

	___	Press (8) to run the autotests.
		You'll be asked to check the creation date of BFILE.
		All the rest of the tests are automatic.

	___	(2) FIND - Press (8) to run the AUTOTESTS.

+	___	(3) PUTPARM & LINK TO DISPLAY   try with both D & E
		You can display the file XYZ in LIBIN on VOLIN.
		Just see that the PUTPARM & LINK works don't test 
		DISPLAY yet.

	___	(5) GETPARM 		this tests getparmbuild, displays
					a getparm only.

+	___	(6) SUBMIT  (cobol)    
			(ACU)	FILE=QABCKGRD  in TESTACU   on SOURCE
			(MF)	FILE=QABCKGRD  in TESTMF    on SOURCE

			Creates	BACK#### in LIBSPOOL on VOLSPL.
			(1) DISPRINT
+	___		Check:  TASKTYPE=B  (in file created)
				TERMNUM=-1

			        PROGLIB=TESTxxx  PROGVOL=SOURCE

		(6) SUBMIT (proc)
			        FILE=QABCKPRC   in TESTxxx   on SOURCE

				(1) DISPRINT
	___			This will submit qabckprc.wps which will
				set
					INLIB  = QABCKPRC
					OUTLIB = Vxxxxxxx  (Task #)
				It will then run QABCKGRD twice each
				time setting RUNLIB = BKA1 then BKA2.
				Next it SUBMITS qabckpc2.wps; this sets
					INLIB  = QABCKPC2
					OUTLIB = Vxxxxxxx  (Task #)
				and runs QABCKGRD twice each time 
				setting RUNLIB = BKB1 then BKB2.

		___  The files BKA1 and BKA2 should have INLIB=QABCKPRC
		     and have the same OUTLIBs and WORKLIBs.

		___  The files BKB1 and BKB2 should have INLIB=QABCKPC2
		     and have the same OUTLIBs and WORKLIBs.

		___   The WORKLIBs should be different for BKA1 and BKB1.

	___	(6) (UNIX) SUBMIT a shell script (with parameters)
		(ACU)	FILE=QABKPACU	in TESTACU	on SOURCE
		(MF)	FILE=QABKPMF	in TESTMF 	on SOURCE
		Press (1) and enter 2 parmeters (the INVOL & OUTVOL)
			NEWIN
			NEWOUT
		The press (ENTER), (ENTER) this will submit a script/proc
		that set INVOL to the first paramter and OUTVOL to the
		second parameter. It will then run QABCKGRD and create
			BCKP#### in LIBSPOOL on VOLSPL.

			(1) DISPRINT
		___	See printout of BCKP#### LIBSPOOL VOLSPL and 
			verify that the	INVOL=NEWIN and OUTVOL=NEWOUT.

		___	Check your USAGE CONSTANTS to verify that they 
			didn't get changed by any of these background jobs.


		(8) LINK	This will test LINK without parameters.

		Link testing each LINK-TYPE

		FILE	 LIB	 VOL	 	TYPE
		=======	 ======= ======  	====
+	___	TRIGGER  (blank) (blank) 	(blank)
		(16) to EXIT
+	___	TRIGGER2 (blank) (blank) 	(blank)	NOT FOUND (8) (20)
+	___	TRIGGER2 LIBEXE	 VOLRUN	 	P
		(16) to EXIT
+	___	TRIGGER3 (blank) (blank) 	S
		(16) to EXIT

	___	WSORT				S   

		Link to a non-WISP program.
+	___	UNIX:   VI			TYPE=S
		WIN32:  NOTEPAD

		Link to a shell/batch
+	___	UNIX:  PRTARGSH		TYPE=(blank)
		WIN32: PRTARGNT

		Link with Cancel-Exit
	___	SAMPLE2  LIBRUN   VOLRUN    TYPE=P CANCEL=C
		Now go to  (5) WANG VSSUBS TEST  (17) LOGOFF
		this should take you to the LINK IS COMPLETE screen 
		COMP=16 

		Set CANCEL=(blank)

	___	SAMPLE2  LIBRUN   VOLRUN    TYPE=P
		In SAMPLE2 do a (3) FILE I/O, (24) CLOSE SEQUENTIAL
		this will cause an error-getparm, do a (16) to EXIT
		you should arrive back in SAMPLE at LINK IS COMPLETE
		and COMPCODE = 16 

		*** Next we test LINK with parameters.

	___	FILE=SUB1  TYPE=(blank)
		In SUB1 enter 	
				LINKARG1 	AAAAA
				LINKARG2	BBBBB
				LINKARG3	CCCCC
		ENTER to LINK from SUB1 to SUB3 (SUB1 sets the CANCEL FLAG)
	___	In SUB3 the LINKARGs should have arrived.
		Modify the args
				LINKARG1 	XAAAA
				LINKARG2	XBBBB
				LINKARG3	XCCCC
		ENTER to LINK from SUB3 to SAMPLE.
		(16) to exit SAMPLE
	___	Back in SUB3 the args should be as last modified.
		ENTER to exit SUB3 back to SUB1
	___	The args should be as modified in SUB3.
		ENTER to exit SUB1 and return to SAMPLE - LINK IS COMPLETE
		RETURN & COMP CODE should be 0

		(8) LINK (with lots of parameter)
+	___	FILE=XLINK    TYPE=(blank)
		You should arrive in XLINK. 
		Next link to module=XLINK1  arg count=18  L-TYPE=(blank)
		There should be values into all 18 arguments.
+	___	ENTER should take you to XLINK1
		Ensure all args arrived.
		Modify some args.
		To go back to XLINK; Module should be set Module=(blank).
+	___	ENTER should return to XLINK.
		Ensure the modifications to the args arrived.
		To go back to SAMPLE; Module should be set Module=(blank)
+	___	ENTER should return to SAMPLE.



		(9) MESSAGE	This requires two windows <W1> and <W2>.

		**** NOTE ****  If you don't have 2 windows then only do
				the tests marked with 3 asterisks (***).

	___ ***	<W1>	PORT=ABCD
			(1) (create)	RC=0

	___		(5) (wait)	should wait for next message

	___	<W2>	PORT=ABCD
			MESSAGE= HI THERE
			(3) (transmit message)

	___		(2) (destroy)	RC=8 (task didn't create port)

	___ 	<W1>	(should have recieved message)

	___ ***		(6) (wait with timeout)  TIME=0500 (5 seconds)
					Move cursor off field
					wait 5 sec then RC=8 (timeout)

			PORT=ABCD
	___ ***		(7) (Wait with key interrupt)
					You can now type regular keys,
					when you type an AID char (PFKey)
					cursor should jump back. 
					RC=12 (keyboard interrupt)

	___ 		(7) (Wait with key interrupt)
					Type a couple regular keys
					(Switch to <W2>)

	___	<W2>	MESSAGE=STOP
			(3) (transmit)	<W1> should get message and
					should stop waiting.

	___ *** <W1>	(8) (Both Key & Time)  TIME=0500 (5 seconds)
					Type regular keys for 5 seconds
					until timeout.
					RC=8 (timeout)

	___ 		(8) (Both Key & Time)  TIME=3000 (30 seconds)
					Type a couple regular keys
					(Switch to <W2>)

	___	<W2>	MESSAGE=BYE
			(3) (transmit)	<W1> should get message and
					should stop waiting.

	___ ***	<W1>	(2) (destroy)	RC=0


	Run SAMPLE & (5) WANG VSSUBS TESTS (QASUBS)


		(12) PRINT   file PRTFILE2 in LIBSPOOL on VOLSPL
	
		Do twice:

	___	PRINT_MODE=S DISPOSITION=DS (save)    COPY=2
		Verify that two copies are printed and the file is
		not deleted.
	___	PRINT_MODE=S DISPOSITION=DX (scratch) COPY=1
		Verify that one copy is printed and the file is deleted.

	___	(13) LINKPROC 		This will link to a shell script 
					or DCL proc passing args. 
			UNIX: 	FILE=PRTARGSH in TESTxxx on SOURCE
			WIN32:	FILE=PRTARGNT in TESTACU on SOURCE
					Set up some args (remember to set 
					lengths) the first 0 length will
					terminate the list. This shell 
					script will run	the program 
					"prtargs" which will print out 
					the args and return.
	___		UNIX: The script does an EXIT 123 so COMPCODE=123

		(14) BELL/PAUSE
	___	BELL 	(1)	5       Number of times to ring bell,
					some systems optimize repeats.
	___	PAUSE	(2)	500     Hunderths of seconds to pause,
					you should move your cursor out
					of the field before pressing (2)
					so you can see it pop back when
					complete.

		(15) SCRATCH
	___	F-file  PRTFILE  in LIBSPOOL on VOLSPL
 		(check the disk)
	___	F-file  PRTFILE  in LIBSPOOL on VOLSPL     RC=20

	___	L-Lib		    LIBSPOOL on VOLSPL     RC=0
		(check the disk)
	___	L-Lib		    LIBSPOOL on VOLSPL     RC=16


		(19) GETPARM
	___	Press (1) to SETUP for the tests.
	___	Type="I " FORM=A PRNAME=XX1	(no display PF-KEY=A)
	___	Type="I " FORM=A PRNAME=XX2	(display FILE=GETPARM2)
	___	Type="I " FORM=A PRNAME=XX3	(no display PF-KEY=B)
		Press (16) to exit

		(24) SORTCALL/WISPSORT
	___	     (8) AUTOTEST
		     MF 4.1 will **FAIL** on IDXFIXC and ALTVAR8
	___	On WIN32 REPEAT with and without COSTAR


		WSORT utility (Do this now while fresh in your mind)
	___	(8) LINK to QASORT to create BFILEX3

	___	    The script will run DISPLAY on BFILEX3 (width=92)
		    Order should be 3, 8, 2, 7, 6, 5, 4

		(25) RENAME tests

	___	Press (8) to run autotests.

+	___	(27) READVTOC
			OPTION=F    LIBRARY=LIBOUT   VOLUME=VOLOUT

	___	(28) FILECOPY
			OLD=	BFILE	LIBOUT  VOLOUT
			NEW=	COPY    LIBRN   VOLOUT

	___	WCOPY utility
		(8) LINK to QACOPY

+	___	(29) WSXIO

		___	(9) WSXIO UPDATE
			Type and watch the WAIT-CNT update, there should
			be no screen I/O interruption. Press (4) to 
			interrrupt, AID="D".

	___	(31) COBLINK  	Does a LINK type " " and if file is not
				found will then do a LINK of type "S".

				On UNIX so be sure your PATH includes your 
				current dir.

+		___	COBLINK to TRIGGER  (16) (Type=" " current dir)
		___	COBLINK to TRIGGER3 (16) (Type="S" on the PATH)


+	___	(17) LOGOFF		This should really logoff.	


	___	Log back on and resetup you environment.

		UNIX
		$ cd ../testxx
		$ startupxxx.sh
		$ wrun SAMPLE



	(7) PRINTING TESTS (SAMPLE)

		(1) CREATE A PRINT FILE	Creates file PRFILE LIBSPOOL VOLSPL
			Do this once for each of the following tests each
			time go to HELP and change your print constants.

		Pick a print CLASS=___ and a FORM=___ that is valid.

		      MODE 
+	___		S    Should print & delete
+	___		H    Should hold
+	___		K    Getparm - change to PRFILE2
+	___		P    Getparm - change to PRFILE3 class=Z


		Set MODE = P

	___	(2) CREATE TEMP PRINT FILE (ADVANCING & OVERSTRIKE)
					TST####  in LIBSPOOL on VOLSPL

	___	(3) CREATE A PRINT FILE WITH MULTIPLE OVERSTRIKES
					OVERSTRK in LIBSPOOL on VOLSPL

	___	(5) ZERO LENGTH PRINT FILE
					ZERO#### in LIBSPOOL on VOLSPL
					Should not print a empty file.

	___	(6) NO NAME PRINT FILE
					samp####   in LIBSPOOL on VOLSPL


	UTILITIES

		This section tests all of the Utilities.
		NOTE: Not all of these are available on all platforms.

	WUSAGE Utility

+	___	wusage version
	___	wusage shell		Give Command Processor
		(2) SET Usage Constants
	___	    Change constants to invalid values XXXXX
		(16) Exit

	___	wusage read		Restore PERSONALITY

		wshell
		(2) Set Usage Constants
	___	    Values should be restored

		wusage flags
	___	UNIX: qaflags.sh

	___	WIN32: wshell (1) Run QAFLAGS


	DISPLAY utility

	___	display	 Should getparm  LIBIN VOLIN  ((16) to exit)
+	___	UNIX: display volin/libin/xyz
					Should go directly to display
					On UNIX stays in 80 col mode.
	___	HELP (^e)		Menu
+	___	(3)			Bottom of file
+	___	(2)			Top of file
	___	(3)  + Interrupt before done by pressing any key
	___	(5)			Next screen
	___	(4)			Prev screen

+	___	(7)			Find -enter a string the exists
	___	(8)			Find Next (repeat until end)
	___	(2)			Top
	___	(7)			Find -enter a non-extent string
	___	(2)			Top

	___	(10)			Scroll right (several times)
	___	(9)			Scroll left

	___	(11)			Change records size
	___	(12)			Show position
	___	(13)			Stream mode

	___	(16)			EXIT



	KCSI CRID

	___	Run "wshell"

	___	(1) RUN  - CONTROL

	___	FILE= I1        LIBRARY= CONTROL   VOLUME= VOLIN
		(2) Create a new file

	___	RECLEN   = 80
		FILEORG  = I
		KEYFIELD = PKEY
		(ENTER)
		
	___	PATH1    = AKEY1    DUPS1  = NO
		PATH2	 = AKEY2    DUPS2  = YES
		(ENTER)

	___	Name    Start  Format  IntLen Decimal
		PKEY	1      C       10     
		AKEY1	11     C       10     
		AKEY2	21     C       10     
		ZONE	31     Z       10     4
		USIGN	41     U       10     4
		PACK	51     P        8     2
		BIN	59     B	4          Bin Edit = 1
		X	63     C        3          Occurs   = 6
		(ENTER)(ENTER) after each line
		(16) exit

	___	(9) DATENTRY

	
	___	Data file: FILE= I1  LIBRARY= DATA VOLUME=VOLIN	
		(2) Create data file 

	___	(3) Add Records
		PKEY AKEY1 AKEY2 ZONE USIGN PACK BIN X1  X2
		AAA  AAA   AAA	 100  100   100  100 100 100
		BBB  BBB   AAA	 200  200   200  200 200 200
		CCC  AAA   BBB   300  300   300  300 300 300  
		** ERROR ** Record already on file
		- Change AKEY1=AA2
		(16) exit

	___	(4) Modify Records
		(ENTER) use primary key
		(2) First record
		    (5) Next, (5) Next
		(16) exit

	___	(9) INQUIRY
		(ENTER)

		LIST PKEY AKEY1 AKEY2 ZONE PACK BIN USIGN
                WHEN PKEY < 'CCA'

		(ENTER)
	___	(16) Continue query

	___	(2) Save Query 
		    FILE=Q1  LIBRARY=INQUIRY VOLUME=VOLOUT

	___	(3) Create REPORT definition 
		    FILE=R1  LIBRARY=REPORT VOLUME=VOLOUT

	___	(16) Exit INQUIRY

	___	(32) Exit DATENTRY

	___	(10) Run REPORT

	___	(2) Create a Report

		Report ID = I1
		(ENTER)
		Data     FILE= I1     LIBRARY= DATA    VOLUME= VOLIN
		(ENTER)
		Control  FILE= I1     LIBRARY= CONTROL VOLUME= VOLIN
		(ENTER)
		Place a 'X' on AKEY1, AKEY2, BIN, PKEY, USIGN, ZONE
		(ENTER)
		(ENTER)
		(16) Exit report definition phase

	___	(4) Print a report

		DEVICE=DISPLAY
		(ENTER)

	___	(3) Modify a report
		    FILE=R1  LIBRARY=REPORT VOLUME=VOLOUT
		(ENTER)
		(9) Sort Fields
		    Field ID: AKEY1
                    Level:    1
		    Asc/Dsc:  D

	___	(4) Print a report

		DEVICE=DISPLAY
		(ENTER)
		*** Check AKEY1 is descending ***


	___	(16) Exit REPORT

	___	(32) Exit CONTROL

	___	wshell	  Run saved Query

		(1) RUN FILE=Q1  LIBRARY=INQUIRY VOLUME=VOLOUT

		(16) EXIT


	KCSI CREATE

		From "wshell"

	___	(1) RUN  - QACREATE

		This will create a series of files then DISPLAY them.
		For indexed files it will use WSORT to flatten them
		then DISPLAY the sorted flat file.

		In DISPLAY you will need to use PF11 and set the
		lenght=80. 

		___   I2     Indexed

		___   A3     Alternate Indexed

		___   R4     Relative

		___   C5     Line Consecutive

		___   B6     Binary Consecutive
		




#####################  This page is for UNIX only  ####################


	WPUTPARM Utility  (UNIX ONLY)

	___  	tstpp.sh	Test WPUTPARM		
				Follow instructions

	viewkey
	___	viewkey

	wdelwrk

	___	wdelwrk		should delete current worklib

	___	su				Remove all worklibs
		rm -r -f `cat /usr/tmp/WLIBLIST`
		rm /usr/tmp/WLIBLIST
		
	wrun
	___	wrun				should give runcbl & options
		export RUNCBL=xyz
	___	wrun -b -w -?			should "xyz -b -w"
		unset RUNCBL 			set RUNCBL back

	___	wrun SUB3 using AA BB CC	should start SUB3 with args

	================================================================

		TO TEST wcopy, wexists, wrename, wscratch run qautils.sh
	___	qautils.sh	(perform the following tests)

	================================================================

	wcopy	(old style)
	   __	wcopy XYZ LIBIN VOLIN XXX LIBIN VOLIN	  same lib
		echo $?				should be 0
	   __	wcopy QQQ LIBIN VOLIN XXX LIBIN VOLIN	  non-extent file
		echo $?				should be 20
	   __	wcopy XYZ LIBIN VOLIN XYZ NEWLIB VOLOUT	  make a new lib
		echo $?				should be 0
	   __	wcopy library NEWLIB VOLOUT NEWLIB VOLIN  copy a lib
		echo $?				should be 0

	wexists
	   __	wexists file XYZ LIBIN VOLIN
		echo $?				should be 0  (exists)
	   __	wexists file QQQ LIBIN VOLIN
		echo $?				should be 1  (not found)
	   __	wexists library LIBIN VOLIN
		echo $?				should be 0
	   __	wexists library QQQQ VOLIN	
		echo $?				should be 1
	   __	wexists volume VOLIN	
		echo $?				should be 0
	   __	wexists volume QQQQ		
		echo $?				should be 1


	wrename
	   __	wrename XYZ NEWLIB VOLOUT NEW NEWLIB
	   __	wrename NEW NEWLIB VOLOUT NEW2 NEWLIB2
		echo $?				should be 0 (success)
	   __	wrename NEW NEWLIB VOLOUT NEW2 NEWLIB2
		echo $?				should be 20 (not found)
	   __	wrename library NEWLIB2 VOLOUT NEWLIB3

	wscratch
	   __	wscratch NEW2 NEWLIB3 VOLOUT
		echo $?				should be 0
	   __	wscratch NEW2 NEWLIB3 VOLOUT
		echo $?				should be 20
	   __	wscratch library NEWLIB3 VOLOUT
		echo $?				should be 0
	   __	wscratch library NEWLIB3 VOLOUT
		echo $?				should be 16

	================================================================

	___	ipcs				Check whats out there
		wsysinit -v			Must be ROOT (SU)
		ipcs				Should be cleaned-up
		ls /usr/tmp			Temp files should be gone


	================================================================

	Return to PORTUNIX.LIS

	================================================================
