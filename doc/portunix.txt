	Copyright (c) 1995-2002 by NeoMedia Technologies Inc. 
	All Rights Reserved.
	====================================================================
	
	Title:		WISP PORTING INSTRUCTIONS FOR UNIX
	
	Document:	portunix.lis
	Last Updated:	$Date:$
	Products:	WISP/UNIX, EDE, KCSI
	Versions:	4.4.00 (AND LATER)
	
	Summary:	How it port WISP (and others) for unix.
			Building a shipping kit.

	====================================================================
	

	WISP PORTING INSTRUCTIONS FOR UNIX
	==================================

	This document describes the action needed to port WISP to a
	UNIX platform.


	NEEDED COMPONENTS
	=================

	The following components are required to port WISP.

	[ ]	WISP source kit  e.g.  wisp4400.src.cpio.Z

	[ ] 	Acucobol COBOL compiler

	[ ] 	Micro Focus COBOL compiler

	[ ]	C++ compiler for WPROC


	INSTALL THE COBOL
	=================

	If COBOL is not already on the system then install it.

	[ ]	Install ACUCOBOL.
	[ ]	Install Micro Focus COBOL.


	LOAD THE WISP SOURCE KIT
	========================

	[ ]	CREATE THE WISP DIRECTORY

		Make a base WISP directory to hold all the WISP related
		files. (If a WISP directory already exists don't recreate.)

		Example:
			$ mkdir /usr2/wisp

	[ ]	DELETE or RENAME THE OLD SOURCE DIRECTORY

		If a previous port of WISP exists on this machine then
		rename or delete the old source directory.

			$ mv src src.old

	[ ]	LOAD THE NEW SOURCE KIT

	 	Load the source kit from external media using tar.
		Then uncompress it and un-tar it to create the "src"
		directory.

		    $ cd wisp
		    $ uncompress -c wisp4400.src.tar.Z | tar -xvf -
		or
		    $ uncompress -c wisp4400.src.cpio.Z | cpio -icvd

	[ ]	SET ENVIRONMENT VARIABLES

		Set ACUDIR to the ACUCOBOL directory.
		Set COBDIR to the Micro Focus directory

		Change directory to the wisp/src/port and run portenvs.sh
		to set the WISP and WISPDIR variables.

			$ cd wisp/src/port
			$ portenvs.sh

		This will set the variables WISPSRC and WISPDIR

				*** IMPORTANT *** 
		You will need the variable WISP set for the whole porting 
		process.  Alway ensure that it is set correctly.

			$ WISPSRC=/disk1/neomedia/wisp/src
			$ WISPDIR=${WISPSRC}
			$ ACUDIR=/usr/local/acucobol
			$ COBDIR=/usr/local/mf41
			$ export WISP WISPDIR ACUDIR COBDIR


	MODIFIY WISP SYSTEM DEPENDENT FILES
	===================================

	There are a couple of files which will have to change when you
	do a port, these contain system dependent information.


	[ ]	${WISPSRC}/port/make.include
		- Uncomment the correct system flags.

	[ ]	${WISPSRC}/acu/acucobol.include
		- Search for:
		  "****  CHANGE PLATFORM SETTINGS HERE ****"
		  "****  CHANGE ACUCOBOL VERSION SETTINGS HERE ****"

	[ ]	${WISPSRC}/acu/wruncbl.umf
		- Search for:
		  "**** CHANGE LIBCURSES HERE ****"
		  "**** CHANGE CC HERE ****"
		  "**** CHANGE CRID_CFLAGS HERE ****"
		  CRIDDIR=$(WISPDIR)/CRIDACU.xxxx

	[ ]	${WISPSRC}/mf/wrunmf.umf
		- Search for:
		  "**** CHANGE LIBCURSES HERE ****"


	The following are only done on a port to a new platform. You
	will probably need to get everything else working first before
	modifying these files.

	[ ]	${WISPSRC}/wisplib/isexec.c		** NEW PORT **
		Add a system dependent EXECMAGIC entry.

	[ ]	${WISPSRC}/wisputils/wsysconf.c		** NEW PORT **
		Add system configuration device info.


	IF MISSING ACUCOBOL COMPILER
	============================

	If you are on a system with only an Acucobol runtime and no
	compiler then:

	[ ]	 Copy Acucobol CRID objects 
		 CONTROL REPORT INQUIRY DATENTRY 
		 from ${WISPSRC}/kcsi/crid/ on a system that has them.

	[ ]	 Copy the ${WISPSRC}/testacu Acucobol object files
		 acuqa.tar.Z from a system that has them.


	IF MISSING MICRO FOCUS COBOL
	============================

	[ ]	In the next section run this command instead.

		$ make all_acu >>make.err 2>&1 & # make and log errors
		$ tail -f make.err		 # show progress on screen


	BUILD ALL WISP COMPONENTS
	=========================

	Change to the port directory and start the super-make that will
	start all the makefiles to build all the components.  This however
	does not build the COBOL runtime systems or SAMPLE.

	[ ]	$ cd ${WISPSRC}/port
		$ maketail.sh			# make & tail
		or
		$ make >>make.err 2>&1 &	# make and log errors
		$ tail -f make.err		# show progress on screen
		

	[ ]	$ vi make.err			# ensure no errors

	On any error you will have to fix the problem and re-issue the
	above command.


	BUILD THE WISP SHIP KIT
	=======================

	Build a temporary ship kit under the "src" directory that will be
	used for testing WISP and when done will become the real ship kit.
	The script "bldshipkit.sh" will move all the components from the
	built source kit into "${WISPSRC}/wispXXXX.ship" and it will build
	the correct directory structure.

	[ ] 	$ cd ${WISPSRC}/port
		$ bldshipkit.sh


	INSTALL WISP (QA)
	=================

	Install the new version of WISP so you can test in an installed
	environment.  We will install under the name ${WISPSRC}/QA so as 
	not to disturb others who are using the currently installed version.

	[ ]	*** Install to ${WISPSRC}/QA ***
		$ cd ${WISPSRC}/port
		$ installqa.sh


	QA TEST WISP
	============

	Perform the QA testing of WISP through the building and running
	of the program SAMPLE.  If any errors are found and corrected
	then move the modified source files to their appropriate source
	directories and repeat the above steps starting at the BUILD step.

	[ ]	Follow "qawisp.lis" checklist to test WISP.


	UPDATED DRCS WITH MODIFIED FILES
	================================

	All modified source files need to be returned to DRCS.  Keep a
	list of all files that changed.

	[ ]	UPDATE DRCS
		____________________________________________
		____________________________________________
		____________________________________________
		____________________________________________
		____________________________________________
		____________________________________________


	INSTALL THE NEW WISP
	====================

	Install the new fully QA'ed version of WISP.
	Write protect everything.

	[ ]	$ cd ${WISPSRC}/QA
		$ mv wisp_XXXX /usr/local/wisp_XXXX
		$ ln -s /usr/local/wisp_XXXX /usr/local/wisp


	MOVE SHIPPING KITS
	==================

	Move the shipping kits into the shipping area on zigzag.
	There are 5 ship kits:

	[ ]	 ${WISPSRC}/wisp_XXXX.ship
	[ ]	 ${WISPSRC}/kcsi/create/create_acu_XXXX.ship
	[ ]	 ${WISPSRC}/kcsi/create/create_mf_XXXX.ship
	[ ]	 ${WISPSRC}/kcsi/crid/crid_acu_XXXX.ship
	[ ]	 ${WISPSRC}/kcsi/crid/crid_mf_XXXX.ship

	From a local networked machine:

	$ cd ${WISPSRC}
	$ cp -r -p *.ship $SHIPPING/os_X.X.X
	$ cp -r -p kcsi/*/*.ship $SHIPPING/os_X.X.X



	========================= END OF DOCUMENT ==========================
