							     v20e_errata.lis

	WISP VERSION V2.0 USERS GUIDE ERRATA
	====================================

	2.4.6 The UNIX bldmf Procedure

		(CHANGE)
		The second paragraph should read "PERL" not "pearl".

		See BLDMF utility in chapter 10.

	2.5.10 WISP Control Statements

		(ADD)
		WISP will also accept $WANG-CODE / $WANG-END with dashes
		as well as $WANG_CODE / $WANG_END with underscores. These
		are treated identically for all CODE / END control 
		statements.

		WISP now supports $COPY-CODE / $COPY-END which will copy
		code into the output file without processing it. Column 7
		asterisks will be changed to spaces, but, you do not have
		to have asterisks in column 7. (Except on the $COPY-CODE /
		$COPY-END statements themselves.)

		NOTE: You cannot embed comments between $VAX_CODE / $VAX_END
		as all the astrisks get stripped off. (This applies to
		ACU and LPI, CODE/END statements as well.)

	2.5.12 VMS AUTOMATIC RECORD LOCKING DIRECTIVES

		(ADD)
		There are two directives that tell WISP to generate code
		to use VMS AUTOMATIC RECORD LOCKING. These may only be used
		on SEQ/SEQ files that are never opened shared and do not
		perform any READ WITH HOLD statements. These are provided
		because you may achieve a significant performance
		improvement on files that are mostly written to, such as
		print files and temporary work files created to
		be read later by another program. Do not use these if most
		I/O operations on the file are READ as this will slow 
		down performance.

		The directives are *$AUTOLOCKPRINT and *$AUTOLOCKFILE,
		and are inserted as comments into your Wang COBOL program.

		The *$AUTOLOCKPRINT directive tells WISP to use AUTOMATIC
		RECORD LOCKING on ALL printer files. It must be inserted
		before the first SELECT statement.

		The *$AUTOLOCKFILE directive tells WISP to use AUTOMATIC
		RECORD LOCKING for the file immediately following. It
		must be inserted immediately before each SELECT statement
		for each file you want it applied to.

	2.6 CURRENT LIMITATIONS

		(CHANGE)
		- A START on an alternate key where data-name-2 is not the
		  alternate key is not supported.

		- On UNIX a call to Usersub SORTCALL must be changed into
		  a call to WISPSORT.

		- ROW I/O of the workstation where the FD has multiple 01's
		  of different sizes: A READ will always read the number of
		  rows specified in the first 01.

		- ACUCOBOL compressed files work correctly for version 1.5.4
		  and later.

	3.5 VSX  VS-EXCHANGE

		(ADD)
		On UNIX systems with a 9-track cartridge tape drive you
		may use the VSX utility to read tapes written on the 
		Wang in BACKUP format. This utility can read both source
		and data in compressed or non-compressed format. It will
		do filename translation, create the directories, allow
		interactive selection of libraries and trim source files.

		To convert Wang indexed files into indexed files appropriate
		for the target environment, the Wang BACKUP tape should
		contain those files in sequential fixed length record format.

	4.2 WISP SWITCHES

		The NOLOCK_PROCESSING switch is no longer supported.

		(ADD)
		-e	/NOWARNINGS	Don't print warning messages
		-n	/DLINK		Use VMS dynamic linking

	4.2.8  /INITIALIZE=( Item1, Item2, ...)

		- DATA (-D) is the default value for VMS only.

	4.2.15 /OPTION [=file-name] (-o -O file)

		UNIX EXAMPLE:

		wisp -o sample.wcb		Option file= sample.opt.

		wisp -O optfile.dat sample.wcb	Option file= optfile.dat.

	4.2.x	/NOWARNINGS   (-e)

		Do not show warning messages while WISPing, only E level
		and above.

	4.2.x	/DLINK	      (-n)

		On VMS use dynamic linking with parameters.
		Change the calls:

		WCB:	CALL "LINK" USING args 
		COB:	CALL "LINKDESC" USING BY DESCRIPTOR args
		
		Also leave all STOP RUNs as STOP RUN, do not change them
		into EXIT PROGRAM as done with static links.

	4.3.1 OPTION FILE

		TRAP_START_TIMEOUTS is not supported. With MANUAL RECORD
		LOCKING this condition will never occur.

	5.1.6 COBLINK

		This routine is now supported under UNIX.

		A COBLINK does a LINK of type=" " with no parameters.
		If the LINK returns file-not-found it then tries a LINK
		with type="S".

	5.1.9 EXTRACT

		On VMS the 'CF' keyword returns the current program name.
		On UNIX the 'CF' keyword returns the name of the first 
		program entered at this link-level.

		The 'CL' and 'CV' keywords return the RUNLIB RUNVOL.

		On UNIX the 'NA' keyword returns the comment field from
		the password file. This is usually the users full name.

		The 'WL' keyword always returns the WORKLIB. It never
		returns "$SCRATCH".

	5.1.10 FIND

		COUNT	Is the maximum number of entries to be returned.
		F_COUNT	Is the actual number of entries found.

	5.1.11 GETPARM

		A new NON-COBOL calling interface has been added. This will
		allow greater than 255 parameters on VMS.

		Usage:		GETPARM(arglist,count)

		ARGLIST		char *arglist[];
				This is a pointer to an array of pointers that
				point to the arguments to GETPARM.

		COUNT		int   count;
				This is the number of arguments.

	5.1.14 LINK

		LINK_TYPE
			'P' 	Use the supplied LIBRARY and VOLUME.
			' '	Look in RUNLIB RUNVOL, if not found try the
				current directory.
			'S'	UNIX: Look along the $PATH.
				VMS: Look in SYS$SYSTEM and WISP$ROOT.

			On VMS if the program is not found in the currect 
			image it will look first for a .EXE and if not found 
			it will look for a .COM.

		PARAMETER_COUNT
			There is a limit of 32 parameters.

		CANCEL_EXIT_FLAG.
			VMS: This is only used with dynamic linking.

		COMPLETION_CODE.
			VMS: Now returns valid values.

		RETURN_CODE.
			VMS: Now returns valid values.

		Internal Info:

		On VMS systems, this routine will attempt to call the program
		as a subroutine contained in the current executable image. If
		the program was WISPed with the /DLINK (dynamic link) switch
		set, the cobol statement CALL "LINK" USING args is changed 
		into CALL "LINKDESC" USING BY DESCRIPTOR args. Within
		"LINKDESC", if the program is not found in the current image,
		the directory indicated by LINK_TYPE, LIBRARY, and VOLUME will
		be searched for a ".COM" or an ".EXE" file.  If a ".COM" file
		is found, a subprocess is spawned to execute it.  If a ".EXE"
		file is found, "LINK" will spawn a process to execute it and 
		"LINKDESC" will perform a true LINK including passing of 
		parameters. 

		The parameters are stored in a temporary file 
		(SYS$SCRATCH:LINK{pid}.TMP), and the ".EXE" path and the 
		parameter file path are given as arguments to a spawn of 
		WISP$ROOT:[COM]VMS$START$LINK.COM which starts the ".EXE" 
		image and passes it the parameter file name.  

		When building the ".EXE" file, VMSLINKMAIN.OBJ and 
		VMSLINKSUB.OBJ must be included for the parameter passing to 
		work correctly.  These 2 modules act as a front-end to the 
		program.  They read the parameters from the temporary file and
		pass them to the subroutine.  On completion, the parameters 
		are rewritten into the temporary file so the calling program 
		can receive the parameter values along with return and 
		completion codes.  

		The number of parameters is limited to 32.  The maximum size 
		of the parameters is limited to the size of the parameter data
		fields in VMSLINKSUB.OBJ.  This is distributed as a ".WCB" 
		file so it is user changeable.


	5.1.15 LOGOFF

		NOTE: This routine will fail on UNIX if you are running
		the csh or ksh shells.

	5.1.20 PUTPARM

		Functions 'E' and 'D'.

			REFERENCE_LABEL		This is now supported.
			CLEANUP_OPTION		This is now supported.

		Functions 'C', 'R' and 'M'.

			These functions are now supported.

		Restrictions

			Currently link levels are not tracked or understood. 
			PUTPARM and GETPARM behave as if all actions are 
			occuring at the same link level.

			Maximum number of active PRBs is 128 (was 64) per
			user.

	5.1.X SEARCH

		Usage:		SEARCH(table,tsize,tlen,item,slen,retcode)
		Description:	This routine performs an in-memory binary
				search of a table. By including SLEN you
				may search for a partial match.
				The table must be in ascending or descending
				sequence. 

		Parameters:
		TABLE		Alpha(var). 	Table to be searched.
		TSIZE		Int(4).		Number of items in table.
		TLEN		Int(4).		Length of each table item.
		ITEM		Alpha(var).	Item to search table for.
		SLEN		Int(4) opt.	Search item length.
		RETCODE		Int(4).		Return Code, this is the
						index into the table.

	5.1.30 SORTCALL

		On UNIX/ACUCOBOL a replacement for SORTCALL has been provided
		called "WISPSORT". It requires a couple of extra parameter
		so must be manually changed. See WISPSORT for full details.

	5.1.32 SUBMIT

		Now returns a valid return code for VMS.

	5.2.1 ACUGARGS

		Now supports 32 args.

	5.2.X ACUNARGS

		Usage:		ACUNARGS(COUNT)
		Description:	This routine returns the number of arguments
				that were passed thru LINK.
				(ACUCOBOL only)
		Parameters:
		COUNT		Int(2) (BINARY) The number are args.

	5.2.x LINKDESC

		This is the VMS routine for doing a dynamic LINK with
		parameters. The parameters are the same as the LINK usersub
		except they are called "BY DESCRIPTOR". When a program is
		WISPed for VMS with the /DLINK switch then all call LINKs
		are translated to CALL "LINKDESC" USING BY DESCRIPTOR ...
		See the section on LINK for further description.

	5.2.9 LINKPROC

		A new optional argument has been added to LINKPROC for UNIX;
		COMPCODE - the exit code from the shell script.

		Usage: LINKPROC(procedure,lib,vol,item-count,item1-len,item1,
			       item2-len,item2,....item8,return-code,compcode)

		COMPCODE	Int(4) (OPTIONAL) the exit code from the
				shell script.

	5.2.X SETTRIGPROG

		VMS ONLY

		Usage:		SETTRIGPROG(VOL,LIB,FILE)
		Description:	This routine identifies the program to be
				run when the TRIGGER KEY is pressed.
				The default definition for the TRIGGER KEY
				is ^N (Ctrl+N).
		Parameters:
		VOL		Alpha(6) The volume of the program to run.
		LIB		Alpha(8) The library
		FILE		Alpha(8) The file

	5.2.22 wdfinish
	5.2.23 wdinit

		These two routines show the "old" way that WISP handled
		DISPLAY statements. These are now only valid if the
		#NO_DISPLAY_PROCESSING option is used in an option file.

	5.2.28 WFNAME

		The usage should read:

		Usage:		wfname(mode,vol,lib,file,name)

	5.2.29 WFOPEN
		
		Add
				wfopen2(mode,vol,lib,file,name,appl,prname)

				WISP now generates calls to wfopen2 instead
				of wfopen. The field "appl" is the wisp
				application name which is the program name
				and is passed in so file getparms will show
				the program name.


	5.2.x WISPSORT

		Usage 		WISPSORT(sortparms,filetype,recsize,sortcode,
					 returncode)

		Description
			Unix/ACUCOBOL replacement for the VSSUB "SORTCALL".
		
			This routine is very similar to SORTCALL except you 
			must supply a couple of extra parameters.  WISPSORT 
			uses an the routine sortseqf() to perform the actual 
			sort of a sequential file.  If you want to sort an 
			ACUCOBOL Vision (Indexed) file then it will first 
			"unload" it to a sequential file.  The ACUCOBOL 
			supplied utility "vutil" is used to unload indexed 
			files so it must be available on the $PATH.
	

		PARAMETERS	
			There are 5 parameters, all are mandatory.

		sortparms	Alpha(116) same as SORTCALL.
			1-8	Input file	Alpha(8)
			9-16	Input library	Alpha(8)
			17-22	Input volume	Alpha(6)
			23-30	Output file	Alpha(8)
			31-38	Output library	Alpha(8)
			39-44	Output volume	Alpha(6)

			Sort specifications, repeat 8 times:
			45-48	Field position  Alpha(4) PIC Z(4)
			49-51	Field length	Alpha(3) PIC Z(3)
			52	Field datatype	Alpha(1)
				'B' Binary data  (Assumes byte 
						  normal order)
				'C' Character data
				'D' External decimal data
				'F' Floating point data
				'L' Zoned decimal data,
					sign leading separate
				'P' Packed decimal data,
					sign trailing included
				'Z' Zoned decimal data, 
					sign trailing overpunched
			(The following are extensions to SORTCALL.)
				'N' Binary data in machine order
				'2' 2+2 Binary data in machine order
				'T' Zoned decimal data, 
					sign trailing separate
				'O' Zoned decimal data, 
					sign leading overpunched
				'U' Packed decimal data, unsigned
			53	Sort order	Alpha(1)
					'A' Ascending
					'D' Descending

		filetype	Alpha(1) the file type.
			'A'	Acucobol indexed file.
			'F'	Fixed length file. (Binary Sequential)
			'N'	Newline terminated file. This is a 
					standard Unix text file. 
					(Line Sequential)

		recsize		
			INT(4) the record size for fixed length 'F' files.
			This parameter is required but is only used for fixed
			length ('F') files. The recsize for Acucobol indexed
			files ('A') is extracted from the Vision header. For
			newline files ('N') the recsize is determined from
			reading the records.
			
		sortcode	
			INT(4) the code returned from sortseqf()

			WARN_LASTLINE	1	Last line of file was 
						  incomplete and truncated.
			ERR_TEXT	20	Misc. serious error.
			ERR_NOINFILE	21	No infile specified.
			ERR_NOOUTFILE	22	No outfile specified.
			ERR_BADRECSIZE	23	Invalid record size.
			ERR_BADFILETYPE	24	Invalid filetype.
			ERR_BADNUMKEYS	25	Invalid number of sort keys.
			ERR_NOSORTKEYS	26	No sort keys.
			ERR_BADOFFSET	27	Invalid sort key offset.
			ERR_BADLENGTH	28	Invalid sort key length.
			ERR_BADDIRECTION 29	Invalid sort key direction.
			ERR_BADTYPE	30	Invalid sort key data type.
			ERR_BINLEN	31	Invalid length for a binary.
			ERR_FLOATLEN	32	Invalid length for a float.
			ERR_OPENINPUT	33	Error opening input file.
			ERR_OPENOUTPUT	34	Error opening output file.
			ERR_MALLOC	35	Malloc fail to allocate 
						  needed space.
			ERR_READ	36	Error on read.
			ERR_WRITE	37	Error on write.
			ERR_SIZEINT	38	Invalid int size for 
						  this machine.
			ERR_SIZEFLOAT	39	Invalid float size for 
						  this machine.
			ERR_NORECEND	40	No recend specified.
			ERR_BADSIZEEND	41	Invalid size for recend.
			ERR_NORECORDS	42	No records found in infile.


		returncode	
			INT(4) the return code.
				0	Success
				4	Input file was empty
				8	Insufficient buffer space 
				12	Record size greater then 2024 bytes
				16	Invalid sort key
				20	Program check (see sortcode).
			(The following are extensions to SORTCALL)
				40	Invalid filetype
				41	No input file or access denied
				42	Not an ACUCOBOL/Vision file.
				43	Unable to get recsize from Vision file
				44	Unable to unload Vision file


	5.2.X WMEMCPY

		Usage:		wmemcpy(dest,source,len)

		Description:	This is a COBOL interface to the C routine 
				memcpy.

		Parameters:
		DEST		Alpha(*) The destination.
		SOURCE		Alpha(*) The source.
		LEN		Int(2) (BINARY) The length to copy.

	6.2.1 THE VT200/VT300 KEYBOARD
		
		The default definitions for "Prev Screen" key and
		"Next Screen" key are now the functions "BackTab" 
		and "NewLine".

	7.2.6 SPECIAL CHARACTERS IN FILE NAMES ON VMS

		NOTE:	##files will generate 2 versions; the first is the
			"lock file" to lock the name on the disk, the second
			is the actual data/print file. The "lock file"
			will always be empty and is created to prevent
			another program from using the same file name.

		As of version 2.0e of WISP the "lock files" are deleted
		automatically by calls to "wdellock" following the COBOL
		OPEN statement.

	7.5.8	Using LINK And COBLINK on VMS

		On VMS systems, this routine will attempt to call the program
		as a subroutine contained in the current executable image. If
		the program was WISPed with the /DLINK (dynamic link) switch
		set, the cobol statement CALL "LINK" USING args is changed 
		into CALL "LINKDESC" USING BY DESCRIPTOR args. Within
		"LINKDESC", if the program is not found in the current image,
		the directory indicated by LINK_TYPE, LIBRARY, and VOLUME will
		be searched for a ".COM" or an ".EXE" file.  If a ".COM" file
		is found, a subprocess is spawned to execute it.  If a ".EXE"
		file is found, "LINK" will spawn a process to execute it and 
		"LINKDESC" will perform a true LINK including passing of 
		parameters. 

		The parameters are stored in a temporary file 
		(SYS$SCRATCH:LINK{pid}.TMP), and the ".EXE" path and the 
		parameter file path are given as arguments to a spawn of 
		WISP$ROOT:[COM]VMS$START$LINK.COM which starts the ".EXE" 
		image and passes it the parameter file name.  

		When building the ".EXE" file, VMSLINKMAIN.OBJ and 
		VMSLINKSUB.OBJ must be included for the parameter passing to 
		work correctly.  These 2 modules act as a front-end to the 
		program.  They read the parameters from the temporary file and
		pass them to the subroutine.  On completion, the parameters 
		are rewritten into the temporary file so the calling program 
		can receive the parameter values along with return and 
		completion codes.  

		The number of parameters is limited to 32.  The maximum size 
		of the parameters is limited to the size of the parameter data
		fields in VMSLINKSUB.OBJ.  This is distributed as a ".WCB" 
		file so it is user changeable.

		When a LINK to another program is requested, the LINK routine 
		does the following:

		(1)  Stores the parameters into a temporary area.
		(2)  Creates a new process.
		(3)  Starts a new image, running VMSLINKMAIN.
		(4)  VMSLINKMAIN determines the subroutine name.
		(5)  VMSLINKMAIN calls VMSLINKSUB with subroutine and parm 
			file names.
		(6)  VMSLINKSUB calls VMSGARGS to retrieve the parameters.
		(7)  VMSLINKSUB does a CALL to the "linked-to" program.
		(8)  On completion, VMSLINKSUB calls VMSPARGS to restore 
			the parameters.
		(9)  VMSLINKSUB returns to VMSLINKMAIN and terminates 
			this image.
		(10) Back in LINK, the parameters are retrieved.
		(11) Completion and Return codes are set.
		(12) LINK is finished.


	7.5.X WORK LIBRARIES ON VMS

		WISP mimics the way Wang creates temporary work libraries
		based on the master process ID. It generates a unique work
		library name every time the user logs on. The format of the
		name is different from the Wang. It starts with "WK" followed
		by a a six character number which is the last 6 hex digits of
		the process ID.

			Example:   WK003B62

	7.6.6 The Wang RUN PROGRAM USING Phrase on UNIX

		For ACUCOBOL the wrun utility supports a "using" clause
		that will pass the arguments into the linkage area of the
		running program.

			wrun MAINMENU using "COMP0045" "1991" "Sam Smith"

		When wrun is used with the "using" clause it will start
		the program ACUUSING which "chains" in the command line
		arguments then does a CALL USING to the program with the
		arguments going into the linkage section.

		ACUUSING is an ACUCOBOL program that is distributed as
		acuusing.cob. This program must be compiled and put onto
		the code-prefix path.

		NOTE:	If the arguments are changed by the called program
			the changes will NOT be reflected back in the
			shell script.

	7.6.9 The UNIX SHELL

		While running WISP converted software there are several
		situations where a shell will be exec'ed (started), these
		include; a call LINK to a shell script, a call to LINKPROC,
		a call to SUBMIT, and an "Issue UNIX shell commands" from
		the HELP menu.

		WISP will by default exec "/bin/sh" (the Bourne shell). We
		default to this shell because it is standard and available on
		all UNIX systems. Additionally certain features of WISP will
		not work if running csh or ksh, such as: wputparm utility, and
		the LOGOFF usersub.

		If for some reason you find it necessary to use a different
		shell you can make WISP use it by setting the shell variable
		SHELL to the shell you wish used.

			$ SHELL=/bin/ksh
			$ export SHELL

	7.8 The HELP KEY

		The HELP screen has changed slightly for easier understanding.

		It is displayed as follows:

		_ Volume and Directory defaults.   _ DISPLAY a FILE.

		_ Print Mode defaults.             _ Issue DCL/UNIX commands.

		_ Submit Procedure defaults.

		_ Terminal Attributes.

		_ PRINT Program Screen.

		_ WRITE Usage Constants to a file.

	8.2.6 BINARY and COMPUTATIONAL

		ACUCOBOL now uses COMP-1 for BINARY fields without a PIC 
		clause and COMP-4 for BINARY fields with a PIC clause.

	8.2.7 DISPLAY-WS Records - An Overview

		The record element DISP-ITEM-LENGTH is now a PIC X.

	8.2.9 DECLARATIVES

		The statements "USE AFTER ERROR ON" INPUT, OUTPUT, I-O,
		SHARED, EXTEND are not supported as they cause conflicts
		with WISP declaratives of the form 
			"USE AFTER ERROR ON filename".

	8.2.x CALL "LINK"

		On VMS, if the WISP  /DLINK (dynamic link) switch is set, any
		call to LINK is modified to take advantage of the VMS pass by
		descriptor option.

		WCB:	CALL "LINK" USING arg-list.

		COB:	CALL "LINKDESC" USING BY DESCRIPTOR arg-list.

	8.2.16 EXIT PROGRAM

		The "EXIT PROGRAM" statements are translated to
		"PERFORM WISP-EXIT-PROGRAM" for both UNIX and VMS.

	8.2.23 OPEN

		WISP now generates calls to wfopen2 instead of wfopen.

		On VMS a call to "WDELLOCK" is inserted after the COBOL OPEN
		statement to delete the lock file if one was created.

	8.2.30 STOP RUN

		The "STOP RUN" statements are translated to
		"PERFORM WISP-STOP-RUN" for both UNIX and VMS.
		On VMS if the program is translated without the "/DLINK"
		option then inside the WISP-STOP-RUN paragraph an
		"EXIT PROGRAM" is generated instead of the "STOP RUN".

	8.3.1 RECORD LOCKING - VAX/VMS

		WISP now uses MANUAL RECORD LOCKING for all file I/O.
		The problems described in this section no longer exist.

	8.5 GENERATED COPYBOOKS

		WISP will generate copybooks that contain common code.
		These will be created in the current directory by WISP
		if they don't exist.

		wc001000.cpy	The common symbolics code.
		wc002x00.cpy	The common working-storage code.

	9 The Menuing Package

		Now available under UNIX.

	9.3 MENU FILES

		On UNIX if the menu file is not found in the current
		directory it will look in the directory pointed to
		by the shell variable WISPMENU.

	10.X BLDMF

		ACUCOBOL ONLY

		The BLDMF utility creates a UNIX "make" file (makefile)
		that will WISP and compile (ccbl) all programs in the 
		current directory.

		NOTE:   bldmf is a perl script and for it to run perl must
			be in /usr/bin.

		$ bldmf -h

		bldmf: Build makefile for COBOL projects

		usage: bldmf [args]

		Possible args:
		    -r <destdir>        Destination directory for run files
		    -ws <wisp switches> Additional switches for wisp command
		    -cs <ccbl switches> Additional switches for cobol command
		    -cm <ccbl name>     Command to use to compile .cob files
		    -i <include dir>    Directory containing copy books
		    -warn               Warn about missing copy books
		    -d                  Delete .cob files after compilation
		    -cc                 Compress .cob files after compilation
		    -e                  Log errors to error.log during make
		    -o                  Output filename (default: makefile)
		    -q                  Quiet mode
		    -wp <wisp path>     Path of wisp translator 
					    (default: /usr/bin/wispbin/wisp)
		    -h                  This help message

	10.X MAKEMSG

		This utility compiles the WISP runtime message file
		from its text form "wispmsg.txt" to its compiled
		form "wispmsg.dat".

	10.X PL2CBL

		This utility translates Wang PROCs (Procedure language files)
		into Wang COBOL programs. The Wang COBOL programs can then
		be WISPed to run on VMS or UNIX. The Wang PROCs are assumed
		to have an extension of ".wps" and resultant files are given
		an extension of ".wcb".

			pl2cbl sample		(sample.wps --> sample.wcb)

		The full description of pl2cbl is contained in a separate
		document entitled "PL2CBL".

	10.X VIEWKEY

		UNIX ONLY

		This utility will print the escape sequence generated
		when any key is pressed on the terminal. This is used to
		assist you in writing videocap files.

	10.X  SELECTPG

		UNIX ONLY

		A new utility "selectpg" has been added. Select-Page is a 
		page filter. It reads from a file or stdin and writes to 
		stdout a selected range of pages. It can be used as a 
		front-end to lp to print just a few pages.

		selectpg 3:5 myfile|lp    Print pages 3 thru 5 of myfile.
      		selectpg 5 myfile|lp      Print pages 5 thru end of myfile.
		selectpg -l 50 5:0 myfile|lp   
					  Set the page length to 50 lines per
					  page and print 5 thru end of myfile.

	10.X  VSX  VS-EXCHANGE

		UNIX ONLY

		This utility will read 9-track cartridge tapes in Wang
		BACKUP format.

	$ vsx -h
	usage:
	vsx [-f <device or file>] [-e.ext] [-i] [-lnu] [-fnu]
	   -f <archive> specify device or file (default: /dev/rmt0)
	   -es.ext      append .ext to all source files (normally .wcb)
	   -en.ext      append .ext to all normal files (normally .seq)
	   -i           generate list of files in archive (do not extract)
	   -lnu         generate uppercase directory names
	   -fnu         generate uppercase file names
	   -tl          query for filetype (source vs. nonsource) per library
	   -rn          assume fixed length records
	   -rc		assume compressed records
	   -rv		assume variable records
	   -q           query before restoring each library
	   -h		print this help screen

	10.X  WFIND

		UNIX ONLY

		The WFIND utility does a call to usersub FIND and prints the
		results out.

		$ wfind {file} {library} {volume}

	10.10 WPUTPARM

		-c count	Specifies the usage count for the putparm.
				A count of zero (0) means no limit.

		The SHOW and CLEAR commands are now implemented.

		wputparm clear -l label		Will remove just the
						labeled PRB.

		wputparm clear			Will remove all PRB's.

		On UNIX wputparm will report an error message if not run
		from the Bourne shell.

	10.13 WRUN

		When no arguments are supplied wrun will print the runcbl
		and options that it is currently set to use.

		New options:

			-?	Print the full command that would have
				been executed. Do not execute.

			--	Execute the runcbl with no options.

		You may now supply a "using" clause on a wrun command to
		pass arguments into the linkage section of the run program.

			wrun MAINMENU using "COMP0045" "1991" "Sam Smith"

		In this example, wrun will run program MAINMENU with the
		three arguments placed into the linkage section.

		The program ACUUSING is required when the "using" clause
		is used by wrun. See section 7.6.6 "The Wang RUN PROGRAM 
		USING Phrase on UNIX" for full details.

	10.18 WUSAGE

		WUSAGE VERSION The WISP 2.0E screen version number is 21.

	A.1.1 CONTENTS OF THE VMS DISTRIBUTION KIT

		*.VCAP		The videocap files.
		WISP$LINK.OPT	The options file used when generating a
				shared library.
		WISP_SHARE.COM	The DCL that will generate a shared library.
				(Note: The shared library will need to be
				       installed before becoming active.)
		VMS$START$LINK.COM
				The .COM used to initiate Dynamic LINKs.
		VMSLINKMAIN.OBJ The C front-end for Dynamic LINKs.
		VMSLINKSUB.WCB	The COBOL front-end for Dynamic LINKs.

	A.1.3 Installation Notes

		If you will be using the dynamic LINK with parameter passing
		functionality you need to build VMSLINKSUB.OBJ from 
		VMSLINKSUB.WCB.

		$ WISP VMSLINKSUB		   Create VMSLINKSUB.COB
		$ COBOL/ANSI/FIPS=74 VMSLINKSUB	   Create VMSLINKSUB.OBJ

		When you create the .EXEs for programs that will be LINKed to
		dynamically and passed parameters you must include
		VMSLINKMAIN.OBJ and VMSLINKSUB.OBJ as the first two object
		files in the .EXE.

		$ LINK/EXE=MYPROG VMSLINKMAIN,VMSLINKSUB,MYPROG, -
				  WISPLIB/LIB,SYS$INPUT:/OPTION
				  SYS$SHARE:VAXCRTL.EXE/SHARED
		

	A.2.1 CONTENTS OF THE UNIX DISTRIBUTION KIT

		./wisp/bin/bldmf	The build makefile utility.

		./wisp/bin/linecount	is not yet available on UNIX.

		./wisp/bin/perl		The perl interpeter (for bldmf).

		./wisp/bin/pl2cbl	The PROC to COBOL translator.

		./wisp/bin/selectpg	Page selection filter.

		./wisp/bin/vsload	is only distributed on selected
					ports such as AT&T 3b2.

		./wisp/bin/vtest	Routine to test VIDEO functionality.

		./wisp/bin/vsx		VS-Exchange utility.

		./wisp/bin/viewkey	The VIEWKEY utility.

		./wisp/bin/wruncbl	The runcbl executable with the
					WISP routines linked in.

		./wisp/bin/runcbl	Replaced by wruncbl.

		./wisp/bin/wfind	The WFIND utility.

		./wisp/config/videocap/aixterm  AIXTERM definition file
		./wisp/config/videocap/sco386   SCO XTERM on 386 pc.
		./wisp/config/videocap/wy_vt100 Wyse 60 in vt100 mode.
		./wisp/config/videocap/dg_xterm Data General xterm.
		./wisp/config/videocap/ibm8524  PS/2 console

		./wisp/acucobol/sub.c	is not distributed this comes with
					your ACUCOBOL.

		./wisp/acucobol/sub.o	is distributed with the SCO kit
					for those who don't have a SCO
					development kit.

		./wisp/acucobol/acuusing.cob
					wrun USING front-end.

	A.2.2 INSTALLING WISP ON A UNIX SYSTEM

		(ADD THE FOLLOWING)

		WISP is sometimes distributed as a single compressed cpio 
		file named "wisp.cpio.Z". If your media has this file on the
		label then load it as follows:

		- cd to where you want the wisp directory created.

		- load the file from the diskette or tape using cpio or tar
		  as specified on the label. E.g.

			$ cpio -icvB </dev/rfd0
	
		- You will now have file "wisp.cpio.Z" in your current dir.

		- Uncompress the file.

			$ uncompress wisp.cpio.Z

		- You will now have file "wisp.cpio".

		- Now un-cpio the file

			$ cpio -icvBd <wisp.cpio

		- this will create directory "wisp" and under that will
		  be directories "bin", "lib", "acucobol", "config" 

	A.2.3 BUILDING AN ACUCOBOL runcbl

		(ADD THE FOLLOWING)

		First copy the WISP library files to /usr/lib.
		(Library files are of the form libxxxx.a)

			$ cd (prefix)/wisp/lib
			$ cp * /usr/lib        (you may need to be superuser)

		Copy the WISP acucobol files into your acucobol directory
		(Your acucobol directory is the directory where you loaded
		the files that you received from ACUCOBOL.)

			$ cd (your acucobol dir)
			$ cp (prefix)/wisp/acucobol/* .

		Edit runcbl.umf (the makefile) to copy the new runcbl
		to your bin directory. You may also need to add "-lPW"
		to the library list, depending on your system. You may
		also wish to change the name of the runcbl executable
		that runcbl.umf creates.

		Now make runcbl.

			$ make -f runcbl.umf

	A.2.4 Additional WISP files

		/usr/tmp/aculink/*	Temporary files used during a call
					to usersub LINK from an ACUCOBOL
					program.

		./wc001000.cpy		Copybook for common symbolics.
		./wc002x00.cpy		Copybook for common working-storage.


	B.1.x  Create OPTIONS.DAT the runtime options file

		The file WISP$CONFIG:OPTIONS.DAT allows you to control
		runtime behavior of WISP converted software. This file is
		optional and if not present behavior will not be changed.

		Options		Description
		=======		===========
		ERRFLAG #	Sets the behavior of error reporting the same
				way as the ERRFLAG argument to routine
				"initwisp2". The "#" represents the errflag
				level. See "initwisp2" in chapter 5 for 
				further details.

		Example: 
			To have WISP log exception to a log file and not
			to the screen set the errflag to 11. (1+2+8=11)

			ERRFLAG 11	

	B.2.2 Set Shell to be Bourne Shell

		If you are are running programs from a script you can
		include "#!/bin/sh" as the first line of the script. This
		will force the script to be run with the Bourne shell
		while allowing you to use csh or ksh.

		WISP will by default exec "/bin/sh" (the Bourne shell). 
		We default to the Bourne shell because it is standard and 
		available on all UNIX systems. Additionally certain features
		of WISP will not work if running csh or ksh, 
		such as: wputparm utility, and the LOGOFF usersub.

		If for some reason you find it necessary to use a different
		shell you can make WISP use it by setting the shell variable
		SHELL to the shell you wish used.

			$ SHELL=/bin/ksh
			$ export SHELL

	B.2.4 Loading The WISP Runtime

		(ADD the following)

		- $WISPCONFIG/OPTIONS
		- $WISPCONFIG/ACUUSING

	B.2.5 LGMAP

		If your system does an EXTRACT of "XV" or "PV" then be sure
		to setup the volumes "IPLVOL" and "PGMVOL" as these are the
		values returned.

		The maximum size of UNIX path that can be specifed is 60
		characters.

	B.2.7.4 ACUCONFIG FILE

		The default maxium number of files allowed open is 32. On
		large applications this is often not enough. The following
		can optionally be added to ACUCONFIG to increase this 
		number to 64.

			MAXFILES 64

		The problem ACUCOBOL was having with COMPRESSED files
		has been fixed in their release 1.5.4 so you can allow
		compressed file if you are using that release or later.

	B.2.7.5 wrunconfig File

		The default value for runcbl should be as follows:

			runcbl=wruncbl
	
	B.2.7.x  OPTIONS File

		The OPTIONS file in $WISPCONFIG allows you to control
		runtime behavior of WISP converted software. This file is
		optional and if not present behavior will not be changed.

		Options		Description
		=======		===========
		ERRFLAG #	Sets the behavior of error reporting the same
				way as the ERRFLAG argument to routine
				"initwisp2". The "#" represents the errflag
				level. See "initwisp2" in chapter 5 for 
				further details.

		SIGNALSOFF	This option turns off WISP trapping of fatal
				signals and forces a "core" file to be
				produced. This is used only when trying to
				locate the source of a SIGNAL 10 or 11. The
				core file can then be loaded into a debugger
				to find the exact cause of the signal.
				Do NOT use this option in a production
				environment, only when debugging.
		Example: 
			To have WISP log exception to a log file and not
			to the screen set the errflag to 11. (1+2+8=11)

			ERRFLAG 11	

	B.2.10 Building ACULINK and ACUUSING

		The maximum number of parameters for ACULINK has been
		increased from 16 to 32.

		If you will be using the "wrun using" clause you must
		build ACUUSING and put it onto the ACUCOBOL code-prefix path.

			$ ccbl -da4 -o ACUUSING acuusing.cob
			$ cp ACUUSING (dir on ACUCOBOL code-prefix path)

	B.2.X  Disabling CONTROL-C

		In a production environment it is important that the user
		running an application can not abort out of the program.
		Doing so could leave files corrupted or transactions only
		partially completed.

		To disable ^C and other signals that can be generated from
		the keyboard issue the following command before running
		your WISP converted software.

			$ stty -isig

		This command tell UNIX to disable processing of INTR, QUIT,
		and SWTCH characters. See the UNIX "Users Ref Manual" for
		the stty command.

	B.2.X Transfering ACUCOBOL files between machines

		If you are converting to ACUCOBOL on multiple platforms
		and need to transfer object or data files between them
		you must use the ACUCOBOL utility VIO to convert the files
		before and after transfer.

		You use VIO to converts the ACUCOBOL files you wish to 
		transfer into a "system independent" (vio) format. You then
		transfer the VIO file to the new platform and run VIO to
		convert the files into a correct format.

		VIO works much like "cpio"; you give it a list of files
		and it create a single vio file that you can then transfer
		to an other machine. You then run VIO again to split the
		single file into all the individual files.

		$ ls > filelist		Create a list of files to transfer
		$ vio -ovbl filelist > transfer.vio
		(move file transfer.vio to new machine)
		$ vio -ivnd < transfer.vio

		See VIO in your ACUCOBOL guild.

	C.2.3 SIGNALSOFF

		If you are getting SIGNAL 10 or 11 errors and can't trace
		the source of them, you can add the SIGNALSOFF option
		to the $WISPCONFIG/OPTIONS file. This will stop WISP 
		from intercepting the SIGNALS and force a "core" file
		to be built. The core file can then be loaded into the
		'C' debugger to get a stack-trace that should exactly
		identify the cause of the SIGNAL.

	D.4.3 FUNCTION KEYS

		(ADD THE FOLLOWING)

		trigger1		Activate the program specified by
		 ...			routine "settrigprog".	
		trigger8

		generic_newline		The NEWLINE key.

	D.6 STANDARD VIDEOCAP GENERIC KEY DEFINITIONS

		Generic next scr	^f^n
		Generic prev scr	^f^p

		Generic Newline		^fn or ^fN



