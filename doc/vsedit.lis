	Copyright (c) 1995 by DevTech Migrations Inc. All Rights Reserved.
	
	====================================================================
	
	Title:		VSEDIT - INTEGRATED PROGRAM DEVELOPMENT EDITOR
	
	Document:	VSEDIT.LIS
	Last Updated:	5 APR 94
	Products:	WISP, VSEDIT
	Versions:	3.3x4 and later of WISP
	
	Summary:	Using VSEDIT.
			How VSEDIT differs from Wang VS EDITOR program.
			WAC - WISP And Compile script.

	====================================================================
	

	VSEDIT - INTEGRATED PROGRAM DEVELOPMENT EDITOR
	==============================================
	
	This document describe the VSEDIT Integrated Program Development
	Editor.  The VSEDIT editor was modelled after the Wang VS EDITOR
	program and should be immediately usable by anyone who is familiar
	with the Wang editor.  This document focuses mainly on the 
	differences between VSEDIT and the Wang VS EDITOR.  If you are not
	familiar with the Wang editor it is recommended that you first study
	the "Wang VS Program Development Tools Reference".


	Using VSEDIT
	------------
	To start VSEDIT you enter "vsedit" at the command line, you can
	optionally include a file name.

		$ vsedit

		or

		$ vsedit myfile.wcb

	If you specified a file name on the command line then VSEDIT will
	start in native mode.  See below.

	VSEDIT can also be RUN from the Command Processor or invoked from
	the UTILITIES menu or the "Manage Files And Libraries" edit option.
	VSEDIT accepts the mostly the same PUTPARM's as the Wang editor so it
	can be run under program control with a CALL "LINK".


	Installing VSEDIT
	-----------------
	VSEDIT utilizes the WISP environment so a standard WISP configuration
	must first be in place.

	VSEDIT is a stand-alone executable program so installation simply
	requires it be moved into a directory which gets searched for
	executables.

	While running VSEDIT it is possible to invoke other utilities such
	as WCOPY, WSORT, DISPLAY, etc.  These, if invoked, need to be 
	installed in the standard locations.

	Additionally, VSEDIT comes with a template "WISP and Compile" script
	that needs to be placed with the executables after it has been
	customized for your specific needs.  See below.

	For VMS see "VMS Notes" below.


	Language
	--------
	The VSEDIT program uses the LANGUAGE parameter from the INPUT getparm
	to specify both the file extension and the format of file. 

		LANGUAGE	Extension	Format
		--------	---------	------
		COBOL		.wcb		COBOL	(Wang VS)
		WCB		.wcb		COBOL	(Wang VS)
		COB		.cob		COBOL
		CBL		.cbl		COBOL
		PROCEDURE	.wps		PROCEDURE
		PROC		.wps		PROCEDURE
		WPS		.wps		PROCEDURE
		BASIC		.bas		BASIC
		BAS		.bas		BASIC
		SHELL		.sh		TEXT
		SH		.sh		TEXT
		COM		.com		TEXT
		BATCH		.bat		TEXT
		BAT		.bat		TEXT
		TEXT		(none)		TEXT
		NONE		(none)		TEXT
		(none)		(none)		TEXT

	For langauge types COBOL and WCB the source is assumed to be
	Wang VS COBOL.  When these types are specified the Special Command
	Menu lists PF10 as "WISP and Compile" and PF12 allows you to
	display the ".cob" file produced by WISP.

	There are currently four file formats supported.  This table shows
	the column positions for each format.

		Format		LineNums	ModCodes	Text
		------		--------	--------	----
		COBOL		01 - 06		73 - 80		07 - 72
		PROCEDURE	75 - 80		72 - 74		01 - 71
		BASIC		01 - 06		73 - 80		07 - 72
		TEXT		(none)		(none)		01 - 72

	The text format can be used for editing any "unformated" files.
	A text format file has no line numbers or modcodes, when it is 
	loaded it is given "relative" line numbers starting at one 
	incrementing by one.  When it is written to disk the line numbers
	are not saved.


	Long Lines
	----------
	If you attempt to edit a file that has lines that are longer then
	what is expected for the language specified a LONGLINE getparm will
	be issued.  This warns you that the long lines will be split into
	multiple lines.  This operation of spliting lines is not "safe" for
	many file types.  If you get this getparm you should consider using
	a different editor for that file.


	Native Mode
	-----------
	The VSEDIT program supports "Native" mode file names.  This can be
	used to edit files that reside in locations that can't be accessed
	with the Wang style FILE, LIBRARY, VOLUME file specification.  It
	can also be used to edit files that use different file extensions 
	then the ones shown in the Language table.

	To switch into "Native" mode press PF5 at either the INPUT or
	OUTPUT getparm screens.   When in native mode, the LANGUAGE is used
	only to specify the file format not the file extension.

	If you specified a file name on the command line then VSEDIT will
	start in native mode.

		
	Read Only Files
	---------------
	If you attempt to edit a file for which you have Read but not Write 
	access,	VSEDIT will warn you the file is "READ ONLY".  You can then 
	continue with the file however the "Replace" command from the Special
	Command Menu will be disabled.   You will not be able to save any 
	changes you make to the file but you could use the "Create" command 
	to create a new file.


	Compiling From VSEDIT
	---------------------
	The Special Command Menu has a PF10 option "Compile" that allows you
	to compile or WISP and compile your program.  This option looks and
	behaves substantially different then the Wang VS EDITOR.

	It asks you to provide a command and options to run that will perform
	the compile.  A template WISP and Compile script is included with
	VSEDIT that takes as arguments the file name and the directory where
	the object files are to be created.

	The way you customize the Compile command is by creating a custom
	script which uses the options that you require.  You then specify
	the script name as the command to use.

	The WISP and Compile script will act on the file as it exists on disk,
	not on the VSEDIT working buffer.  If you have modified the file you 
	should save it before you compile.


	WAC - WISP and Compile Script
	-----------------------------
	VSEDIT comes with a WAC (WISP and Compile) script.  This script can
	be used by the PF10 Compile option to WISP and compile a program.
	
	The WAC script accepts two arguments, the filename and the object
	directory.

		$ wac.sh
		Usage: wac.sh filepath objectdir

	       	filepath        The file path of the file to be translated
	               	        by WISP.  It can be an absolute or relative
	               	        path. It can include an extension, if no
	               	        extension then ".wcb" is assumed by WISP.

	       	objectdir       The directory to place the final COBOL object
	               	        files. If a relative path is given it is 
				taken relative to $filepath.

	This script should be used as a template for making your own 
	customized versions.  Copy the wac script to a new name and edit it.
	The script contains its own instructions on how to customize it.

		$ cp wac.sh mywac.sh		Make a copy of wac
		$ vsedit mywac.sh		Edit wac (LANGUAGE=SHELL)

	You may need to make several customized versions of WAC: one for
	production, one for debugging, different projects may need different
	options etc.

	You may also write your own version of WAC.  The only restrictions
	are; the first argument be the filepath, and the script should not
	redirect the output or errors as this is being done by VSEDIT.


	Displaying Modcodes
	-------------------
	To display the modcodes of a file set SHOWMODS=YES on the DEFAULTS
	getparm.  To get the DEFAULTS getparm, select SET PF2 from the
	special command menu, then PF2 from the Set Command menu.


	VMS Notes
	---------
	On VMS you will need to define VSEDIT as a foreign command.

		$ VSEDIT == "$WISP$ROOT:[EXE]VSEDIT.EXE"

	The WISP and Compile script is a DCL file named WAC.COM.

		$ @WAC
		USAGE: @WAC filepath objectdir

	========================= END OF DOCUMENT ==========================
