
Release Notes:
==============

- VMS: A "LINK" to an ".EXE" now handles up to 32 parameters.  (A flag must be
  set for WISP to establish a dynamic link with parameters.

===============================================================================

Errata:
=======

5.1.14 LINK
-----------
	PARAMETER_COUNT

		There is an implementation limit of 32 parameters.

	COMPLETION_CODE

REMOVE:		On VMS the value of this parameter is ignored.

	RETURN_CODE

REMOVE:		On VMS the value of this parameter is ignored.

	Internal Info

CHANGE		On VMS systems, this program will attempt to call the program
		as a contained subroutine in the current executable image. If
		the WISP "dynamic link with parameters" flag is set, the cobol 
		statement CALL "LINK" USING args is changed into CALL 
		"LINKDESC" USING BY DESCRIPTOR args.  VMS descriptors include 
		a length for each data element allowing a true link.  Within 
		"LINKDESC", if the call fails, the directory indicated by 
		LINK_TYPE, LIBRARY, and VOLUME (or RUNDIR and RUNVOL) will be 
		searched for a ".COM" or an ".EXE" file.  If a ".COM" file is 
		found, a subprocess is spawned to execute it.  If a ".EXE" 
		file is found, "LINK" will spawn a process to execute it and 
		"LINKDESC" will perform a true LINK including passing of 
		parameters. The parameters are stored in a temporary file 
		(SYS$SCRATCH:LINK{pid}.TMP), and the ".EXE" path and the 
		parameter file path are given as arguments to a spawn of 
		WISP$ROOT:[COM]VMS$START$LINK.COM which starts the ".EXE" 
		image and passes it the parameter file name.  When building 
		the ".EXE" file, VMSLINKMAIN.C and VMSLINKSUB.WCB must be 
		included for the parameter passing to work correctly.  These 2 
		modules act as a front-end to the subroutine.  They read the 
		parameters from the temporary file and pass them to the 
		subroutine.  On completion, the parameters are rewritten into 
		the temporary file so the calling program can receive the 
		parameter values along with return and completion codes.  The 
		number of parameters is limited to 32.  The maximum size of 
		the parameters is limited to the size of the parameter data 
		fields in VMSLINKSUB.WCB.  This is distributed as a ".WCB" 
		file so it is user changable.


5.2.x (9+)	LINKDESC
----------

The descriptions in the section on "LINKDESC" are the same as in the section on
"LINK" (section 5.1.14) up to the "Internal Info" subsection.  So, for the
"LINKDESC" section either reference the "LINK" section, or copy all the
subsections from "Usage" up to but not including "Internal Info".

	Internal Info

		This VMS only routine is used internally allowing a mechanism 
		for true links.  If the WISP "dynamic link with parameters" 
		flag is set, the cobol statement CALL "LINK" USING args is 
		changed into CALL "LINKDESC" USING BY DESCRIPTOR args.  VMS 
		descriptors include a length for each data element allowing a 
		true link.  Within "LINKDESC", if the call fails, the 
		directory indicated by LINK_TYPE, LIBRARY, and VOLUME (or 
		RUNDIR and RUNVOL) will be searched for a ".COM" or an ".EXE" 
		file.  If a ".COM" file is found, a subprocess is spawned to 
		execute it.  If a ".EXE" file is found "LINKDESC" will perform 
		a true LINK including passing of parameters. The parameters 
		are stored in a temporary file (SYS$SCRATCH:LINK{pid}.TMP), 
		and the ".EXE" path and the parameter file path are given as 
		arguments to a spawn of WISP$ROOT:[COM]VMS$START$LINK.COM 
		which starts the ".EXE" image and passes it the parameter file 
		name.  When building the ".EXE" file, VMSLINKMAIN.C and 
		VMSLINKSUB.WCB must be included for the parameter passing to 
		work correctly.  These 2 modules act as a front-end to the 
		subroutine.  They read the parameters from the temporary file 
		and pass them to the subroutine.  On completion, the 
		parameters are rewritten into the temporary file so the 
		calling program can receive the parameter values along with 
		return and completion codes.  The number of parameters is 
		limited to 32.  The maximum size of the parameters is limited 
		to the size of the parameter data fields in VMSLINKSUB.WCB.  
		This is distributed as a ".WCB" file so it is user changable.


7.5.8	Using LINK And COBLINK on VMS
-----
after par 2:	
	If the WISP "dynamic link with parameters" flag is set, the COBOL 
	statement CALL "LINK" USING args is changed into CALL "LINKDESC" USING 
	BY DESCRIPTOR args.  VMS descriptors include a length for each data 
	element allowing a true link.  Within "LINKDESC", if the call fails, 
	the directory indicated by LINK_TYPE, LIBRARY, and VOLUME (or RUNDIR 
	and RUNVOL) will be searched for a ".COM" or an ".EXE" file.  If a 
	".COM" file is found, a subprocess is spawned to execute it.  If a 
	".EXE" file is found "LINKDESC" will perform a true LINK including 
	passing of parameters. The parameters are stored in a temporary file 
	on the disk (SYS$SCRATCH:LINK{pid}.TMP), and the ".EXE" path and the 
	parameter file path are given as arguments to a spawn of 
	WISP$ROOT:[COM]VMS$START$LINK.COM which starts the ".EXE" image and 
	passes it the parameter file name.  When building the ".EXE" file, 
	VMSLINKMAIN.C and VMSLINKSUB.WCB must be included for the parameter 
	passing to work correctly.  These 2 modules act as a front-end to the 
	subroutine.  They read the parameters from the temporary file and pass 
	them to the subroutine.  On completion, the parameters are rewritten 
	into the temporary file so the calling program can receive the 
	parameter values along with return and completion codes.  The number 
	of parameters is limited to 32.  The maximum size of the parameters is 
	limited to the size of the parameter data fields in VMSLINKSUB.WCB.  
	This is distributed as a ".WCB" file so it is user changable.

	When a LINK to another program is requested, the LINK routine does the 
	following:

	(1)  Stores the parameters into a temporary area.
	(2)  Creates a new process.
	(3)  Starts a new image, running VMSLINKMAIN.
	(4)  VMSLINKMAIN determines the subroutine name.
	(5)  VMSLINKMAIN calls VMSLINKSUB with subroutine and parm file names.
	(6)  VMSLINKSUB calls VMSGARGS to retrieve the parameters.
	(7)  VMSLINKSUB does a CALL to the "linked-to" program.
	(8)  On completion, VMSLINKSUB calls VMSPARGS to restore the parameters.
	(9)  VMSLINKSUB returns to VMSLINKMAIN and terminates this image.
	(10) Back in LINK, the parameters are retrieved.
	(11) Completion and Return codes are set.
	(12) LINK is finished.

8.2.x (12+)	CALL "LINK"
-----------
	On VMS, if the WISP "dynamic link with parameters" flag is set, any
	call to LINK is modified to take advantage of the VMS pass by
	descriptor option.

	WCB:	CALL "LINK" USING arg-list.

	COB:	CALL "LINKDESC" USING BY DESCRIPTOR arg-list.

