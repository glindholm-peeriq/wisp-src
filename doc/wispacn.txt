	Copyright (c) 1997-1998 by NeoMedia Technologies Inc. 
	All Rights Reserved.
	
	====================================================================
	
	Title:		WISP ACUCOBOL NATIVE SCREENS RELEASE NOTES
	
	Document:	wispacn.txt
	Last Updated:	12 May 1998
	Products:	WISP for ACUCOBOL
	Versions:	4.3.00
	
	Summary:	Release notes for WISP Native Screens.
			Usage information.
			List of known limitations.

	====================================================================
	

	WISP ACUCOBOL NATIVE SCREENS RELEASE NOTES
	========================================== 

	This document contains information on WISP support for ACUCOBOL
	native screens.


	Environment Information
	-----------------------
	Development and testing has been done using the following
	releases of COBOL:

	    ACUCOBOL-GT 3.2, 3.2.1, 3.2.2

	Components
	----------
	The following new components are used with ACUCOBOL native
	screens: 

	    wacufac2screen.cob	  - FAC translation
	    wacugetpfkey.cob	  - Generic pfkey handler
	    wacuhelp.cob	  - HELP key processor
	    wacuerror.cob	  - Runtime error message handler
	    wacudisplay.cob	  - DISPLAY verb handler
	    wacugetparm.cob	  - GETPARM screen handler
	    wacuwsb.cob		  - Generic screen handler

	Installation
	------------
	Install the WISP toolkit following the normal installation
	instructions.  This must include building a new runtime system as
	runtime support for native screens has been added.

	Build the ACUCOBOL Native Screens programs.

	Unix:
	    $ cd $WISPDIR/acu
	    $ make -f wruncbl.umf acn

	Windows:
	    C:\wisp\acu> nmake /f wwruncbl.mak acn


	OVERVIEW
	========

	The WISP Toolkit support for ACUCOBOL native screens is limited to
	handling screen I/O from COBOL DISPLAY AND READ, DISPLAY, and
	ACCEPT statements.  It also handles GETPARM screens and Wang style
	Help key screens.  Direct READ's, REWRITE's, and WSXIO screen I/O
	are not supported.

	The WISP translator translates DISPLAY-WS records into ACUCOBOL
	SCREEN SECTION records.  Wang DISPLAY AND READ statements are
	translated into DISPLAY and ACCEPT statements wrapped with logic
	to handle the function keys and RANGE clause checking.

	A number of COBOL programs are supplied with the WISP Toolkit that
	are used by the runtime to perform screen I/O using the ACUCOBOL
	screen handler.  These programs all start with "WACUxxx" and
	source code is provided to allow customization.


	UNDERSTANDING ACUCOBOL SCREEN IO
	================================
	In order to be successful you will need to understand how ACUCOBOL
	screen IO works.  The following list details the relevent chapters
	and sections of the ACUCOBOL manuals.

	Please read the following information before proceeding.

	ACUCOBOL-GT 3.2 User's Guide:
	   Chapter 4                "Terminal Manager"
	   Chapter 6 Section 6.5    "Screen Section"

	ACUCOBOL-GT 3.2 Reference Manual:
	   Chapter 5 Section 5.8    "Screen Section"
	   Chapter 5 Section 5.9    "Screen Description Entry"
	   Chapter 6 Section 6.4.9  "Common Screen Options"
	   Chapter 6 Section 6.6    "ACCEPT Statement"
	   Chapter 6 Section 6.6    "DISPLAY Statement"
	   Chapter 4 Section 4.1.3  "Special-Names Paragraph"


	WISP TRANSLATION INFORMATION
	============================
	To translate for ACUCOBOL native screens use the new "-VACN"
	(ACUCOBOL Native) language option flag.  Since native screens will
	be maintained using the translated code you should also consider
	using the "-1" (conversion method) flag.

	    $ wisp -VACN -1 sample.wcb
	    $ ccbl -da4 -zd -za -o SAMPLE sample.cob

	Other WISP and ccbl flags may be required.


	DISPLAY-WS Records
	------------------
	DISPLAY-WS records are translated into SCREEN SECTION records.
	This is fairly straight forward however there are some
	considerations.

	On the Wang the tab-order of screen fields is determined by their
	row and column position on the screen.  With ACUCOBOL the
	tab-order is determined by the field order within the SCREEN
	SECTION record.  This difference is highly noticable especially
	with OCCURS clauses where tabbing takes you down a column instead
	of across the screen.

	To maintain the same tab-order as on the Wang the fields within a
	screen are rearranged to match the screen tab-order.

	The Wang allows three levels of OCCURS clauses in a DISPLAY-WS
	record.  ACUCOBOL allows only one level of OCCURS and it behaves
	substantially different then the Wang OCCURS.  The WISP translator
	will "un-roll" the OCCURS fields into individual screen fields and
	generate them in Wang tab-order.  As an example, a screen field
	that occurs 4 will be un-rolled into 4 individual screen fields
	that are subscribed 1 thru 4.

	RANGE clauses are simulated following an ACCEPT of the screen by
	performing a paragraph which checks the fields against the valid
	ranges.

	Display characteristics of screen fields are controlled on the
	Wang by naming the screen fields so FAC OF fields can be used.
	With ACUCOBOL screens the display characteristics are controlled
	with the COLOR and CONTROL phrases.  If a screen field was named
	then a corresponding COLOR and CONTROL field will be generated.
	These fields will be set, before the screen is displayed, based on
	the values in the simulated FAC OF fields.  FILLER fields will
	default display characteristics generated.


	FAC OF and ORDER AREA OF Clauses
	--------------------------------
	The WISP translator generates simulated FAC OF fields for each
	named screen field in the DISPLAY-WS record.  It also generates
	simulated ORDER AREA OF fields for each DISPLAY-WS record.

	The PROCEDURE DIVISION logic which uses FAC OF and ORDER AREA of
	clauses is translated the same as with WISP screen IO.  The logic
	will manipulate simulated fields.  These simulated fields will be
	used in the DISPLAY AND READ logic to control behaviour.


	DISPLAY AND READ Statements
	---------------------------
	The DISPLAY AND READ statements are translated into a PERFORM of a
	paragraph which does a DISPLAY and ACCEPT of the screen.

	This paragraph handles all aspects of DISPLAY AND READ.  Before
	the DISPLAY, the program WACUFAC2SCREEN is called to set the COLOR
	and CONTROL fields based on the simulated FAC OF fields.
	Following the ACCEPT, the function key exception values are tested
	to see if a valid function key or an "ON PFKEY" was pressed.  If a
	valid key was pressed then the RANGE clause fields are checked.

	With ACUCOBOL screens a tab out of the last field will terminate
	the ACCEPT.  The logic WISP generates will emulate the Wang screen
	by catching the tab and return the ACCEPT positioned at the first
	field on the screen.

	If a PFKEY clause was specified for the workstation it will be
	updated.  If the CURSOR POSITION clause was specified it will be
	updated.


	DISPLAY verb
	------------
	The DISPLAY verb is translated into native screens by "stringing"
	the fields into a WISP-DISPLAY-FIELDS array then calling the
	program WACUDISPLAY to display the screen.

	On the Wang the DISPLAY verb generated a GETPARM which could be
	statisfied with a PUTPARM.  This functionality is not available
	when translating for native screens.


	CLOSE workstation
	-----------------
	When translating for native screens any "CLOSE workstation"
	statements will be removed as they are not needed.


	CALL "BELL" vssub
	-----------------
	The "BELL" vssub uses WISP screens so CALL "BELL" statements are
	translated into a "DISPLAY OMITTED BELL" statement. This is the
	native screens way to ring the bell once.  If multiple bell rings
	are required this will need to be modified.


	WCC - Write Control Character
	-----------------------------
	The WCC in the ORDER AREA OF clause is partially supported. Logic
	is generated to recognize and simulate the UNLOCK KEYBOARD, SOUND
	ALARM, and POSITION CURSOR bits.

	If the UNLOCK KEYBOARD bit is not set then the ACCEPT part the the
	DISPLAY AND READ logic is not performed.  If the SOUND ALARM bit
	is set then a DISPLAY OMITTED BELL statement is issued before the
	ACCEPT statement.  If the POSITION CURSOR bit is set then the
	cursor row and column values are moved into the global CURSOR
	clause fields before the ACCEPT statement.


	GETPARM vssub, ACCEPT and STOP Verbs
	------------------------------------
	The GETPARM vssub as well as the ACCEPT and STOP verbs use GETPARM
	to do screen IO.  These are translated the same as with WISP
	screens, however, if the NATIVESCREENS options is used then the
	WISP runtime will call the program WACUGETPARM to display
	them using ACUCOBOL screen I/O.  There is a limit of 32 entry
	fields per GETPARM screen when WACUGETPARM is used.


	Native Screens Warnings
	-----------------------
	The WISP translator will generate the following warnings when it
	detects features which may not be compatible with Native Screens.

	    Features of "MESSAGE" are not compatible with Native Screens
	    Call "SCREEN" not supported with Native Screens
	    Call "WSXIO" uses WISP Screens
	    Call "WSCLOSE" uses WISP Screens
	    Call "WSFNM" uses WISP Screens
	    Call "WSFNS" uses WISP Screens
	    Workstation CLOSE removed for Native Screens
	    Workstation READ uses WISP Screens
	    Workstation REWRITE uses WISP Screens
	    ALTERED clause on DISPLAY AND READ not supported
	    NO-MOD clause of DISPLAY AND READ not supported
	    ON PFKEY(S) clause causes data to be transferred with Native Screens


	Conditional Code Directives $ACN_CODE
	-------------------------------------
	ACUCOBOL native screens specific code can be conditionally added
	to the translated code using the conditional code directives
	$ACN_CODE, $ACN_ELSE, and $ACN_END.  These work the same as other
	conditional code directives and are activated when translating
	with the -VACN language flag.


	RUNTIME CONFIGURATION
	=====================

	Do not use the "-b" runtime flag, this is normally used with WISP
	screen IO but it is incompatible the ACUCOBOL screens.

	Runtime OPTIONS file
	--------------------
	To tell the WISP runtime that you are using ACUCOBOL native
	screens set the NATIVESCREENS option in the options file.

	    NATIVESCREENS

	The WISP runtime can be instructed to use only pfkeys (1) to (12)
	for internally generated screens instead of the 32 pfkeys that
	were used on the Wang VS.  When the PFKEYS12 option file option is
	used then internal screens like OPEN GETPARMS use only pfkeys (1)
	to (12) and they use pfkey (12) as the EXIT key instead of the
	Wang VS standard of pfkey (16).

	    PFKEYS12


	Function Keys
	-------------
	Configure your function keys in A_TERMCAP and map the keys to
	exception values in the configuration file according to the
	ACUCOBOL Terminal Manager documentation. 

	We will be using the exception codes 1-32 for the PFkeys 1-32.
	See "Terminal Manager" chapter 4 ACUCOBOL User's Guide.  Exception
	codes 1-10 are normally defined, 11-20 are also available as
	shifted F1-F10 which may or may not be available depending on the
	terminal.  Exception codes 21-32 are not normally coded but can be
	added to A_TERMCAP using the U1-U0,A1-A0,or C1-C0 key codes.
	These key codes can then be mapped to exception values in the
	configuration file.

	Some terminals may not be able to generate 32 pfkey escape codes.
	The COBOL may have to adjusted to work with fewer function keys. 

	WISP screens have a generic function key entry mechanism which
	allows you to enter control-f (^f) followed by the function key
	number.  With native screens this generic function key entry
	mechanism has been mapped to exception code 34.  If the translated
	DISPLAY AND READ statement receives an exception code 34 it will
	call WACUGETPFKEY to accept a numeric pfkey value from the user.
	The WISP screens used "^F" (numeric value 6) to generically enter
	function keys, however it may be more convenient to use the ESC
	key (value 27).  Use the KEYSTROKE option in the configuration
	file to map keystrokes to exception code 34.

	    KEYSTROKE  EXCEPTION=34   6
	    KEYSTROKE  EXCEPTION=34  27
	
	The source code for WACUGETPFKEY is provided so it can be
	customized if needed.

	HELP Key
	--------
	The Wang style HELP key is mapped to exception code 33.  If the
	translated DISPLAY AND READ statement receives an exception code
	33 it will call WACUHELP to simulate the Wang style HELP key.  To
	map the "^E" (Control-E) key to exception code 33 use the
	KEYSTROKE option in the configuration file.  The "^E" key has a
	numeric value of five (5).

	    KEYSTROKE  EXCEPTION=33  5

	FAC Translation
	---------------
	An ACUCOBOL progam WACUFAC2SCREEN is supplied for converting
	simulated FAC OF fields into COLOR and CONTROL fields.  This
	program must be placed in a directory on your CODE-PREFIX path.

	The source code for WACUFAC2SCREEN is provided so it can be
	customized if needed.

	Pseudo Blanks
	-------------
	To simulate pseudo-blanks you can use the configuration file
	SCREEN option with the PROMPT and PROMPT-ALL keywords. See the
	ACUCOBOL User's Guide section 4.4.2.

	    SCREEN PROMPT=* PROMPT-ALL=YES



	IMPLEMENTATION DETAILS
	======================
	
	LINK to DISPLAY
	---------------
	When using native screens a vssub LINK to DISPLAY will always
	perform an external LINK to the DISPLAY utility.  This is the same
	action as if the EXTDISPLAY options file option was used.  When
	WISP screens are used the default is to treat a vssub LINK to
	DISPLAY as an internal call to the display routine.


	NATIVE SCREENS ON WINDOWS NT/95
	===============================

	This section describes issues and features specific to using
	native screens on Windows NT/95.

	Co*STAR for WISP is not compatible with ACUCOBOL native screens on
	Windows NT/95.  Co*STAR works be capturing the I/O going to the
	console.  ACUCOBOL native screens uses a true windows GUI, it does
	not use the console so there is nothing for Co*STAR to capture.

	The ACUCOBOL screen handler does not allow you to programatically
	close, hide, or minimize the main application window.  This can be
	a problem if you CALL "LINK" to another COBOL program which does
	screen I/O.  The linked-to program will create into own separate
	main application window and the first window will be
	non-responsive (dead) until the return from the LINK.  To solve
	this problem we highly recommend using the USESOFTLINK runtime
	option so you stay within the same runtime. Alternately you can
	change CALL "LINK"s to direct CALL statements.

	The same sort of screen problem would occur if you CALL "LINK" to
	the DISPLAY utility either directly or by selecting "Display a
	file" from "Manage Files and Libraries".  The main application
	window will be non-responsive until you exit the DISPLAY utility.
	To solve this problem we highly recommend using the UTILSWINDOWS
	runtime option.  This option will cause the DISPLAY utility to run
	indepentantly in it's own window and the calling process does not
	wait for it to complete, this is the normal behaviour of Windows
	applications.  Additionally we recommend you use the DISPLAYUTIL
	runtime option to specify the Windows NotePad utility as your
	display utility, as NotePad is the normal utility used on Windows
	to display a file.

	There is a restriction which may effect many programs coming from
	a Wang environment.  The F10 key cannot be used in Windows
	applications.  In a GUI program the F10 key is reserved by Windows
	and can not be used by the application.  You can specify an
	exception 10 using the key stroke sequence "^f","1","0" but you
	can not map the F10 key to generate exception 10.  Keys F1-F9, and
	F11-F12 can be mapped correctly but not F10, this would be very
	confusing to a user so we highly recommend that you modify your
	applications to not use PF10.  The WISP runtime has been modified
	for native screens to not use PF10.  ACUCOBOL documents
	"Host-Specific Information" in Appendix M (book 4) of their
	manual.

	The W4WMAP functionality is not available with native screens.
	This functionality is provided by the WISP screen handler which is
	not used with native screens.

	To create a proper looking application you will need to adjust the
	appearance of the application windows by mapping the screen
	display attributes to colors.  This is done using the ACUCOBOL
	configuration file entries COLOR-MAP, COLOR-TRANS, and
	INTENSITY-FLAGS. See the recommended options below for an example
	of these options.  See Chapter 9 Color Mapping (book 2) "User
	Interface Programming".

	Most COBOL applications are not designed to be terminated (Closed)
	at any time, they expect to be able to complete whatever they are
	doing then perform their termination logic.  Windows applications
	are normally designed to allow termination at any time by the user
	clicking the Close button [X].  Unless you have coded your
	applications to properly handle the Close button you should
	disable it with the "QUIT-MODE -2" configuration entry.

	The ACUCOBOL runtime will create a default window for your
	applications the first time they do screen I/O.  This windows will
	have a title of "ACUCOBOL-GT" and will often be less then 24 by 80
	with scroll bars.  In order to add a custom window title and
	disable the scroll bars add a DISPLAY INITIAL WINDOW statement to
	your applications before the display of the first screen.  See
	"DISPLAY INITIAL WINDOW Statement" in the ACUCOBOL Reference
	manual.  If you are maintaining a single source set using the .wcb
	files then be sure to enclose this statement in $ACN_CODE
	conditional directives.

	  *$ACN_CODE  
	  *    DISPLAY INITIAL WINDOW 
	  *        SYSTEM MENU, AUTO-MINIMIZE,
	  *        TITLE IS "My Application Title".
	  *$ACN_END

	Alternately you can change the window title with the "DISPLAY UPON
	GLOBAL WINDOW TITLE" statement.

	    DISPLAY "My New Title" UPON GLOBAL WINDOW TITLE.


	Recommended Configuation Options
	--------------------------------
	The following is a summary of recommended configuration options:

	Recommended OPTIONS file options:

	    NATIVESCREENS	 (Required)
	    PFKEYS12
	    USESOFTLINK
	    UTILSWINDOWS
	    DISPLAYUTIL notepad.exe

	Recommended ACUCOBOL configuration file entries (ACUCONFIG):

	    #
	    # Map the HELP key (^e = 5) to exception code 33
	    # Map the pfkey prompt (^f = 6) to exception code 34 
	    # Map the escape key (27) to exception code 34
	    #
	    KEYSTROKE EXCEPTION=33 5
	    KEYSTROKE EXCEPTION=34 6
	    KEYSTROKE EXCEPTION=34 27
	    #
	    # Map the END key to PF16 and map pfkeys 11 - 32.
	    #
	    KEYSTROKE EXCEPTION=16 KE
	    KEYSTROKE EXCEPTION=11 U1
	    KEYSTROKE EXCEPTION=12 U2
	    KEYSTROKE EXCEPTION=21 U3
	    KEYSTROKE EXCEPTION=22 U4
	    KEYSTROKE EXCEPTION=21 A1
	    KEYSTROKE EXCEPTION=22 A2
	    KEYSTROKE EXCEPTION=23 A3
	    KEYSTROKE EXCEPTION=24 A4
	    KEYSTROKE EXCEPTION=25 A5
	    KEYSTROKE EXCEPTION=26 A6
	    KEYSTROKE EXCEPTION=27 A7
	    KEYSTROKE EXCEPTION=28 A8
	    KEYSTROKE EXCEPTION=29 A9
	    KEYSTROKE EXCEPTION=31 U5
	    KEYSTROKE EXCEPTION=32 U6
	    #
	    # This simulates pseudo-blanks.
	    #
	    SCREEN PROMPT=* PROMPT-ALL=YES
	    #
	    # These options map the field attributes to colors.
	    #
	    COLOR-TRANS 2
	    INTENSITY-FLAGS 38
	    COLOR-MAP High=Red Low=Blue Default=Blue Blink=White,Brown
	    #
	    # Disable the Close Button [X]
	    #
	    QUIT-MODE -2



	KNOWN LIMITATIONS
	=================
	Direct READ and REWRITE of the workstation and WSXIO use WISP
	screen IO.

	GETPARMS have a limit of 32 modifiable entry fields.

	On UNIX, the Co*STAR for WISP customizations are not available
	with Native Screens.  Co*STAR will work generically as described
	in the Co*STAR manual but without the builtin WISP enhancements.
	Co*STAR can not be used with WISP for Windows NT/95 with Native
	Screens.

	The "ON PFKEY(S)" clause on the Wang DISPLAY AND READ will prevent
	the screen data from being moved to the WORKING-STORAGE fields.
	With native screens the ACCEPT clause will always move the data
	into the WORKING-STORAGE fields.  This is a functional difference
	that the programmer needs to be aware of.  Coding changes may be
	needed to prevent side effects.

	The "ALTERED" clause of DISPLAY AND READ is not supported and will
	be ignored.  The ACCEPT logic will not update the modified bit in
	the simulated FAC OF fields.

	The "NO-MOD" clause on DISPLAY AND READ is not supported. The
	NO-MOD logic will be enclosed in IF WISP-DNR-NO-MOD conditional
	which will never be true so will be dead code.

	NUMERIC FACs are not supported. Use a numeric PIC clause to
	enforce numeric only fields.

	The "IF FAC OF xxx ALTERED" statements are not supported.  These
	statements will be translated the same as with WISP screen IO.
	However, when using Native Screens, since the modified bit will
	never be set in the simulated FAC OF fields the condition will
	never be true.

	The "IF figcon {IN|OF} {FAC OF screen-field} IS NOT {ON|OFF}"
	statements may not behave correctly because the DISPLAY AND READ
	logic does not update the simulated FAC OF fields.

	The ACUCOBOL screen manager prevents the cursor from being moved
	outside of a modifiable field. The Wang "Monkey Bar Menus" use
	FACs to create tab-stops with no modifiable area. This feature is
	not supported.

	On the Wang it is possible to shorten, split or alter a DISPLAY-WS
	screen field at runtime by moving a FAC character into the field.
	This "Embedded FAC" functionality is not supported.

	The Wang workstation file SELECT statement can define a FILE
	STATUS clause which gets updated by all screen IO.  With native
	screens the status field does not get updated with the AID
	character. 

	The WCC Write Control Character has not been fully implmented.

	Psuedo blanks are not supported. (See Runtime Configuration
	above.)

	EDE uses WISP screens.

	CRID uses WISP screens.

	NetronCap screen I/O routines WSFNS and WSFNM uses WISP screens.

	The BELL vssub is disabled when using native screens. This should
	not be a concern because the translator will replace all calls to
	the BELL vssub as described above.

	The SCREEN vssub always returns a blank screen  when using native
	screens.  The image of the screen is not stored by WISP so is not
	returned.  It is possible to retrieve the screen contents using
	the ACUCOBOL format 4 ACCEPT SCREEN.

	The "print screen" functionality from the HELP (Command Processor)
	screen is not supported.  WISP does not maintain the screen buffer
	so the screen contents are not available to be printed.

	The MESSAGE vssub does not support check ("CH") type "K" or "B" as
	these require tight interaction with the screen handler which is
	not available with native screens.  If these are used a runtime
	error message will be displayed.

	

	CODE SEGMENTS
	=============

	The following is example code of what the WISP translator
	generates for Native Screens.

	-------------

       SPECIAL-NAMES.
           CURSOR         IS WISP-CURSOR
           CRT STATUS     IS WISP-CRT-STATUS
           SCREEN CONTROL IS WISP-SCREEN-CONTROL

      *******
      ******* WISP generated screen control fields.
      *******

      *    Special-names CURSOR clause.
       01  WISP-CURSOR.
           05  WISP-CURSOR-LINE    PIC 999 VALUE 1.
           05  WISP-CURSOR-COL     PIC 999 VALUE 1.

      *    Special-names CRT STATUS clause.
       01  WISP-CRT-STATUS.
           05  WISP-CRT-KEY-1               PIC X.
               88  WISP-CRT-STATUS-TERMINATED  VALUE '0'.
               88  WISP-CRT-STATUS-EXCEPTION   VALUE '1'.
               88  WISP-CRT-STATUS-EOF         VALUE '2'.
               88  WISP-CRT-STATUS-TIMEOUT     VALUE '3'.
               88  WISP-CRT-STATUS-NOITEM      VALUE '9'.
           05  WISP-CRT-KEY-EXCEPTION       PIC X COMP-X.
               88  WISP-CRT-EX-HELP            VALUE 33.
               88  WISP-CRT-EX-GETKEY          VALUE 34.
               88  WISP-CRT-KEY-AUTOSKIP       VALUE 49.
           05  WISP-CRT-KEY-3               PIC X COMP-X.
               88  WISP-CRT-KEY-TAB            VALUE  9.
               88  WISP-CRT-KEY-ENTER          VALUE 13.

      *    Special-names SCREEN CONTROL clause.
       01  WISP-SCREEN-CONTROL.
           05  WISP-ACCEPT-CONTROL     PIC 9   VALUE 0.
           05  WISP-CONTROL-VALUE      PIC 999 VALUE 1.
           05  WISP-CONTROL-HANDLE     USAGE HANDLE.
           05  WISP-CONTROL-ID         PIC XX COMP-X.

      *    Fields for DISPLAY statements.
       01  WISP-DISPLAY-FIELDS-DATA PIC X(1185).
       01  FILLER REDEFINES WISP-DISPLAY-FIELDS-DATA.
           05  WISP-DISPLAY-FIELDS OCCURS 15 PIC X(79).

      *    Screen items COLOR phrase values.
       78  WISP-CLR-REVERSE     VALUE  1024.
       78  WISP-CLR-BRIGHT      VALUE  4096.
       78  WISP-CLR-UNDER       VALUE  8192.
       78  WISP-CLR-BLINK       VALUE 16384.
       78  WISP-CLR-PROTECT     VALUE 32768.
       78  WISP-CLR-ERROR       VALUE 17408.

      *    WISP workstation working items.
       01  WISP-PFKEY                 PIC 99.
           88  WISP-PFKEY-ENTER       VALUE  0.
           88  WISP-PFKEY-HELP        VALUE 33.
           88  WISP-PFKEY-INVALID     VALUE 99.
       01  WISP-CURSOR-POSITION.
           05  WISP-CURSOR-POSITION-COL COMP-1 PIC S9(4).
           05  WISP-CURSOR-POSITION-ROW COMP-1 PIC S9(4).

      *    WISP DISPLAY AND READ working items.
       01  WISP-ALLOWABLE-PF-KEYS-CNT PIC 99.
       01  WISP-ON-PF-KEYS-CNT        PIC 99.
       01  WISP-DNR-ON-PFKEY          PIC X VALUE "N".
       01  WISP-DNR-NO-MOD            PIC X VALUE "N".
       01  WISP-DNR-RANGE-ERROR       PIC X VALUE "N".

       01  WISP-DNR-ORDER-AREA.
           05  WISP-DNR-ROW         PIC X COMP-X VALUE 1.
           05  WISP-DNR-WCC         PIC X COMP-X VALUE 160.
               88  WISP-DNR-WCC-UNLOCK-KEYBOARD  VALUES
                   128 THRU 255.
               88  WISP-DNR-WCC-SOUND-ALARM      VALUES
                    64 THRU 127, 192 THRU 255.
               88  WISP-DNR-WCC-POSITION-CURSOR  VALUES
                    32 THRU  63,  96 THRU 127,
                   160 THRU 171, 224 THRU 255.
           05  WISP-DNR-CURSOR-COL  PIC X COMP-X VALUE 0.
           05  WISP-DNR-CURSOR-ROW  PIC X COMP-X VALUE 0.

       01  WISP-DNR-WCC-CURSOR-BIT  PIC X VALUE X"20".
       01  WISP-DNR-WCC-ALARM-BIT   PIC X VALUE X"40".

      ******* Generated fields for screen MAIN-MENU-SCREEN *******

       01  O-A-MAIN-MENU-SCREEN.
           05  FILLER         PIC X  VALUE WISP-SYMB-1.
           05  FILLER         PIC X  VALUE WISP-SCWCC.
           05  FILLER         PIC X  VALUE WISP-SYMB-0.
           05  FILLER         PIC X  VALUE WISP-SYMB-0.

       01  F-S-USER             PIC X     VALUE WISP-FAC-PROT.
       01  WCLR-S-USER          PIC 9(5)  VALUE WISP-CLR-PROTECT.
       01  WCTR-S-USER          PIC X(20) VALUE SPACES.

       01  F-S-PASSWORD         PIC X     VALUE WISP-FAC-MOD.
       01  WCLR-S-PASSWORD      PIC 9(5)  VALUE WISP-CLR-BRIGHT.
       01  WCTR-S-PASSWORD      PIC X(20) VALUE "UPPER,AUTO".


       SCREEN SECTION.

      *    Invalid CRT status.
       01  WISP-INVALID-CRT-STATUS-SCREEN.
           05  LINE 12 COL 30  VALUE "INVALID CRT STATUS" BOLD.
           05  LINE + 2 PIC X   FROM WISP-CRT-KEY-1 BOLD.
           05  LINE + 2 PIC 999 FROM WISP-CRT-KEY-EXCEPTION BOLD.
           05  LINE + 2 PIC 999 FROM WISP-CRT-KEY-3 BOLD.
           05  LINE 24 COL 25 VALUE "PRESS (ENTER) TO CONTINUE." BOLD.

      ******* Definition of screen MAIN-MENU-SCREEN *******
       01  MAIN-MENU-SCREEN.
           05  LINE 1 COL 20 VALUE 
               "    *** THE ACME WIDGET COMPANY ***    ".
           05  LINE 2 COL 35 VALUE "MAIN MENU".
           05  LINE 4 COL 2 VALUE "User".
           05  S-USER LINE 4 COL 20 PIC X(24)
               FROM X-USER
               COLOR   IS WCLR-S-USER
               CONTROL IS WCTR-S-USER.
           05  LINE 6 COL 2 VALUE "Enter Division:".
           05  LINE 6 COL 20 PIC X(20)
               USING W-DIVISION
               CONTROL IS "HIGH,UPPER,AUTO".
           05  LINE 8 COL 2 VALUE "Enter PASSWORD:".
           05  S-PASSWORD LINE 8 COL 20 PIC X(20)
               TO W-PASSWORD
               COLOR   IS WCLR-S-PASSWORD
               CONTROL IS WCTR-S-PASSWORD.
           05  LINE 24 COL 10 VALUE 
               "(1) Change user  (2) Lookup division (12) Exit".

       PROCEDURE DIVISION.

      *    DISPLAY AND READ MAIN-MENU-SCREEN.
           MOVE "00010212" TO WISP-ALLOWABLE-PF-KEYS,
           MOVE 4 TO WISP-ALLOWABLE-PF-KEYS-CNT
           MOVE 0 TO WISP-ON-PF-KEYS-CNT
           PERFORM WDNR-MAIN-MENU-SCREEN.

      ***** DISPLAY AND READ MAIN-MENU-SCREEN
       WDNR-MAIN-MENU-SCREEN.

           MOVE O-A-MAIN-MENU-SCREEN TO WISP-DNR-ORDER-AREA.

           PERFORM WFAC-MAIN-MENU-SCREEN.
           PERFORM WISP-DNR-SETUP.

           PERFORM UNTIL WISP-DNR-DONE
               DISPLAY MAIN-MENU-SCREEN
               ACCEPT MAIN-MENU-SCREEN
                   EXCEPTION CONTINUE
               END-ACCEPT
               IF WISP-CRT-STATUS-NOITEM THEN
                   PERFORM WISP-DNR-ACCEPT-NOFIELDS
               END-IF
               PERFORM WISP-DNR-CHECK-PFKEY
           END-PERFORM.

           MOVE WISP-PFKEY TO PF-KEY.

       WFAC-MAIN-MENU-SCREEN.

           CALL "WACUFAC2SCREEN" USING F-S-USER, WCLR-S-USER, 
               WCTR-S-USER.

           CALL "WACUFAC2SCREEN" USING F-S-PASSWORD, WCLR-S-PASSWORD, 
               WCTR-S-PASSWORD.

      ***** SETUP FOR DISPLAY AND READ STATEMENTS
       WISP-DNR-SETUP.
           DISPLAY WINDOW ERASE.

           IF WISP-DNR-WCC-SOUND-ALARM THEN
               DISPLAY OMITTED BELL
           END-IF.

           IF WISP-DNR-WCC-POSITION-CURSOR THEN
               MOVE WISP-DNR-CURSOR-ROW TO WISP-CURSOR-LINE
               MOVE WISP-DNR-CURSOR-COL TO WISP-CURSOR-COL
           ELSE
               MOVE 0 TO WISP-CURSOR-COL, WISP-CURSOR-LINE
           END-IF.

           IF WISP-DNR-WCC-UNLOCK-KEYBOARD THEN
               MOVE "N" TO WISP-DNR-DONE-FLAG
           ELSE
               MOVE "Y" TO WISP-DNR-DONE-FLAG
           END-IF.

      ***** ACCEPT A SCREEN WITH NO FIELDS
       WISP-DNR-ACCEPT-NOFIELDS.
           ACCEPT OMITTED LINE 1 COL 1
               EXCEPTION CONTINUE
           END-ACCEPT.

      ***** CHECK PF KEYS AFTER AN ACCEPT
       WISP-DNR-CHECK-PFKEY.

           SET WISP-PFKEY-INVALID TO TRUE.
           IF WISP-CRT-STATUS-TERMINATED AND
               (WISP-CRT-KEY-TAB OR WISP-CRT-KEY-AUTOSKIP) THEN
               MOVE 0 TO WISP-CURSOR-LINE, WISP-CURSOR-COL
           ELSE IF WISP-CRT-STATUS-TERMINATED AND WISP-CRT-KEY-ENTER
               MOVE 0 TO WISP-PFKEY
           ELSE IF WISP-CRT-STATUS-EXCEPTION AND WISP-CRT-EX-GETKEY
               CALL "WACUGETPFKEY" USING WISP-PFKEY
           ELSE IF WISP-CRT-STATUS-EXCEPTION
               MOVE WISP-CRT-KEY-EXCEPTION TO WISP-PFKEY
           ELSE
               DISPLAY WINDOW ERASE
               DISPLAY WISP-INVALID-CRT-STATUS-SCREEN
               ACCEPT OMITTED BELL
               DISPLAY WINDOW ERASE
           END-IF.

           IF WISP-PFKEY-HELP THEN
               CALL "WACUHELP"
           ELSE IF NOT WISP-PFKEY-INVALID THEN
               PERFORM VARYING WISPX1 FROM 1 BY 1 UNTIL WISP-DNR-DONE
                   OR WISPX1 > WISP-ALLOWABLE-PF-KEYS-CNT
                   IF WISP-PFKEY = WISP-ALLOWABLE-PF-KEYS-SUB(WISPX1)
                       MOVE "Y" TO WISP-DNR-DONE-FLAG
                   END-IF
               END-PERFORM

               MOVE "N" TO WISP-DNR-ON-PFKEY
               PERFORM VARYING WISPX1 FROM 1 BY 1 UNTIL
                   WISPX1 > WISP-ON-PF-KEYS-CNT
                   OR WISP-DNR-DONE-FLAG = "N"
                   OR WISP-DNR-ON-PFKEY = "Y"
                   IF WISP-PFKEY = WISP-ON-PF-KEYS-SUB(WISPX1) THEN
                       MOVE "Y" TO WISP-DNR-ON-PFKEY
                   END-IF
               END-PERFORM

               IF WISP-DNR-DONE-FLAG = "N" THEN
                   DISPLAY OMITTED BELL
               END-IF
           END-IF.

	========================= END OF DOCUMENT ==========================
