							trng_1wu_syn.lis

                   NEOM - WISP TRAINING PROGRAMS 

      1 WEEK WISP MIGRATION TO UNIX SYSTEMS WORKSHOP  -  SYNOPSIS

                          DAILY OUTLINE

DAY ONE  

    * INTRODUCTION   
          An introduction and orientation to IDSI and its staff.

    * WISP PRODUCT OVERVIEW
          An overview of the components that make up wisp:-
              * File transfer utility vsx that runs on the target
                machine to read and unload tapes produced on the
                Wang VS computer.
              * The translator utility. It converts Wang VS COBOL to the
                target COBOL, analyzing each statement and making changes
                as necessary to ensure syntactical and semantical
                equivalence on the target machine. Wang screen definitions
                are converted into structures appropriate for use on the
                new system.
              * The WISP library. A library of routines that supports the
                running of converted code. It contains general support
                routines as well as routines to emulate the Wang workstation
                and to interface the Wang VSSUBS to the target operating 
                system.
              * Utilities. Certain aspects of the Wang VS operating system 
                do not have an equivalent function on the traget machine.
                To overcome this problem, several utilities exist to provide
                similar functionality.

    * TRANSLATION PROCESS
          The strategies and methodologies that can be taken with regards
          to doing a translation.

    * CONVERSION APPROACH
          The translation process is run only once and once the migration
          to the new platform is complete, the software in its pre-conversion
          form will not be used again and the Wang VS can be disposed of.
          The new COBOL code generated in the migration is now maintained
          directly on the target system.

    * PRE-PROCESSOR APPROACH
          In this approach, the Wang version of the source remains the master
          and is the only source to be modified or enhanced. WISP is used in 
          the process each time a new, converted version is required on the
          target platform.

    * SINGLE SOURCE SET STRATEGY
          In either approach there is only one single source set which is
          modified or enhanced saving maintenance and development costs.

    * CONVERSION EXAMPLES      
          An overview and examples of these conversion strategies.

    * SOURCE AND DATA FILE TRANSFER TO AND FROM TARGET PLATFORM
          How the VSX (VS eXchange) utility reads Wang VS BACKUP format tapes
          and loads the files onto the UNIX system and the options that can 
          be used to change the default behavior.

    * WISP COMMANDS AND OPTIONS 
          A full description of the WISP translator and the several options
          that allow different kinds of manipulation of the Wang VS COBOL
          source files.

    * WISP COMMAND FILES 
          A discussion of the the various types of input files WISP uses to
          extend its command set and what they are used for.

DAY TWO 

    * WISP CHANGES TO COBOL 
          WISP reads a Wang VS COBOL source file one line at a time, looking
          for any Wang syntax which must be changed to a compatible ANSI
          COBOL syntax. A list of statements that WISP must modify is covered
          along with reserved word substitution, insertion of special
          working-storage data items, and insertion of special paragraphs.

    * MANUAL CHANGES TO COBOL
          Changes from COBOL74 to COBOL85 and current WISP limitations are
          discussed. Any manual changes which may be required are covered. 

    * WISP CONDITIONAL CODE CONTROL STATEMENTS
           Functionality that exists on the Wang which cannot be duplicated
           or may not make sense on the target platform is controlled by Wisp 
           conditional code control statements. These special comment lines
           are meaningful only to the WISP translator. They instruct WISP to 
           process the following code in a special manner.

    * WISP IN-LINE DIRECTIVES
           WISP provides a number of "directives" that can be inserted into
           the WANG VS COBOL code as comments that instructs WISP to process
           the code differently and take special action e.g. a directive
           inserted before the range clause in a DISPLAY-WS data element 
           tells wisp the number of elements in the range clause.

    * BLDMF
           The BLDMF (build makefile) utility will construct a UNIX makefile.
           Working on a source directory BLDMF for each file found will read
           the file looking for "COPY" statements, build a dependency list,
           and construct an entry in the file "Makefile". The makefile will
           instruct the UNIX utility "MAKE" how to WISP and compile all the
           source programs in that directory.

    * MAKE AND MAKEFILES
           A discussion of the UNIX "MAKE" utility and the makefiles generated
           for ACUCOBOL and MICROFOCUS.

    * TARGET COBOL COMPILERS
           An overview of ACUCOBOL, LPI, AIX and the different versions of 
           MICROFOCUS compilers available.

    * COMPILER OPTIONS 
           Compiler options for the target compiler are discussed.

    * DEBUGGING
           The features and capabilities of the target COBOL debugger are
           covered. 

    * DATA CONVERSION
           The process and issues of data conversion involving converting
           data files to fixed length sequential files on the WANG 
           then transfering these flat files to the target machine and 
           writing a program which creates the empty file, reads in the 
           flat file, corrects the data format, and writes out the corrected 
           data to the output file.

    * CONVERSION UTILITIES
           Conversion utilities from ACUCOBOL and MICROFOCUS that create,
           load and examine their indexed file systems are covered.

    * INSTALLING WISP
           How to unload the WISP distribution kit and install WISP on
           a UNIX system.

    * BUILDING THE RUNTIME SYSTEM
           Instructions on how to build the runtime system and what files
           must be modified if COBOL programs call other routines that are
           not written in COBOL and not part of WISP and must be added to 
           the runtime.

    * SETTING UP THE RUNTIME ENVIRONMENT 
           A breakdown of the tasks required on a UNIX system before
           converted software will run.

    * SETTING UP THE PRINT QUEUE
           The steps that must be performed in order to use the IDSI
           Print Queue from WISP.
       
DAY THREE

    * WISP RUNTIME LIBRARY
           A discussion of the WISP runtime library covering emulations of
           WISP VSSUBS and other COBOL callable routines and WISP internal
           routines.

    * WISP UTILITIES
           The utilities available with WISP that are provided to assist you
           in your new environment are covered.

    * VIDEOCAP TERMINAL DESCRIPTION FILES
           A description of the Videocap terminal handler and the remapping
           of a keyboard through the Viewkey and Vcapkeys utilities.

    * WISP AND RUNTIME ERROR LOGGING
           The logging and tracing of WISP and target compiler runtime error 
           messages and using the C debugger to examine "core" files are 
           discussed.

    * LAB ACTIVITIES
      - CONVERTING SOURCES
      - CONVERTING DATA FILES
      - COMPILING, DEBUGGING AND TESTING
      - QUESTIONS AND SOLUTIONS

DAY FOUR

    * LAB ACTIVITIES

DAY FIVE

    * LAB ACTIVITIES



