							     v20c_errata.lis

	WISP VERSION V2.0 ERRATA
	========================

	2.4.6 The UNIX bldmf Procedure

		The second paragraph should read "PERL" not "pearl".

	2.5.10 WISP Control Statements

		WISP will also accept $WANG-CODE / $WANG-END with dashes
		as well as $WANG_CODE / $WANG_END with underscores. These
		are treated identically for all CODE / END control statements.

		WISP now supports $COPY-CODE / $COPY-END which will copy
		code into the output file without processing it. Column 7
		astrisks will be changed to spaces, but, you do not have
		to have astrisks in column 7. (Except on the $COPY-CODE /
		$COPY-END statements themselves.)

		NOTE: You can not embed comments between $VAX_CODE / $VAX_END
		as all the astrisks get stripped off. (This applies to
		ACU and LPI, CODE/END statements as well.)

	2.6 CURRENT LIMITATIONS

		- A START on an alternate key where data-name-2 is not the
		  alternate key is not supported.

		- On UNIX the usersub SORTCALL is not supported.

		- ROW I/O of the workstation where the FD has multiple 01's
		  of different sizes, A READ will always read the number of
		  rows specified in the first 01.

	4.2 WISP SWITCHES

		The NOLOCK_PROCESSING switch is no longer supported.

	4.3.1 OPTION FILE

		TRAP_START_TIMEOUTS is not supported. With MANUAL RECORD
		LOCKING this condition will never occur.

	5.1.6 COBLINK

		This routine is now supported under UNIX.
		A COBLINK is treated as a LINK of type "S" with no parameters.

	5.1.9 EXTRACT

		The 'CL' and 'CV' keywords returns the RUNLIB RUNVOL.

		The 'NA' option incorrectly states it returns the users
		name. It actually returns the userid.

		The 'WL' keyword always returns the WORKLIB. It never
		returns "$SCRATCH".

	5.1.10 FIND

		COUNT	Is the max number of entries to be returned.
		F_COUNT	Is the actial number of entries found.

	5.1.11 GETPARM

		A new NON-COBOL calling interface has been added. This will
		allow greater than 255 parameters on VMS.

		Usage:		GETPARM(arglist,count)

		ARGLIST		char *arglist[];
				This is a pointer to an array of pointers that
				point to the argumnets to GETPARM.

		COUNT		int   count;
				This is the number of arguments.

	5.1.14 LINK

		A LINK_TYPE of ' ' (blank) under UNIX will first look
		at the RUNLIB/RUNVOL and if the program is not found
		will then look in the current directory.

		The PARAMETER_COUNT for ACUCOBOL is now 32.

		The COMPLETION_CODE & RETURN_CODE now return meaningful
		values on VMS.

	5.1.15 LOGOFF

		NOTE: This routine will fail on UNIX if you are running
		the csh or ksh shells.

	5.1.20 PUTPARM

		Functions 'E' and 'D'.

			REFERENCE_LABEL		This is now supported.
			CLEANUP_OPTION		This is now supported.

		Functions 'R' and 'M'.

			These functions are now supported.

		Restrictions

			Currently the only restiction is that link levels
			are not tracked or understood. PUTPARM and GETPARM
			behave as if all actions are occuring at the same
			link level.

	5.2.1 ACUGARGS

		Now supports 32 args.

	5.2.X ACUNARGS

		Usage:		ACUNARGS(COUNT)
		Description:	This routine returns the number of arguments
				that were passed thru LINK.
				(ACUCOBOL only)
		Parameters:
		COUNT		Int(2) (BINARY) The number are args.

	5.2.X SETTRIGPROG

		Usage:		SETTRIGPROG(VOL,LIB,FILE)
		Description:	This routine identifies the program to be
				run when the TRIGGER KEY is pressed.
				The default definition for the TRIGGER KEY
				is ^N (Ctrl+N).
		Parameters:
		VOL		Alpha(6) The volume of the program to run.
		LIB		Alpha(8) The library
		FILE		Alpha(8) The file

	5.2.21 WCHAIN

		Currently is not supported with ACUCOBOL.

	5.2.22 wdfinish
	5.2.23 wdinit

		These two routines show the "old" way that WISP handled
		DISPLAY statements. These are now only valid if the
		#NO_DISPLAY_PROCESSING option is used in an option file.

	5.2.28 WFNAME

		The usage should read:

		Usage:		wfname(mode,vol,lib,file,name)

	5.2.29 WFOPEN
		
		Add
				wfopen2(mode,vol,lib,file,name,appl,prname)

				WISP now generates calls to wfopen2 instead
				of wfopen. The field "appl" is the wisp
				application name which is the program name
				and is passed in so file getparms will show
				the program name.

	5.2.X WMEMCPY

		Usage:		wmemcpy(dest,source,len)

		Description:	This is a COBOL interface to the C routine 
				memcpy.

		Parameters:
		DEST		Alpha(*) The destination.
		SOURCE		Alpha(*) The source.
		LEN		Int(2) (BINARY) The length to copy.

	6.2.1 THE VT200/VT300 KEYBOARD
		
		The default definition for "Prev Screen" key and
		"Next Screen" key is now the functions "BackTab" 
		and "NewLine".

	7.2.6 SPECIAL CHARACTERS IN FILE NAMES ON VMS

		NOTE:	##files will generate 2 versions; the first is the
			"lock file" to lock the name on the disk, the second
			is the actual data/print file. The "lock file"
			will always be empty and is created to prevent
			another program from using the same file name.

	7.5.X WORK LIBRARIES ON VMS

		WISP mimics the way Wang creates temporary work libraries
		based on the master process ID. It generates a unique work
		library name every time the user logs on. The format of the
		name is different then the Wang. It starts with "WK" followed
		by a a six character number which is the last 6 hex digits of
		the process ID.

			Example:   WK003B62

	8.2.6 BINARY and COMPUTATIONAL

		ACUCOBOL now uses COMP-4 not COMP-5.

	8.2.7 DISPLAY-WS Records - An Overview

		The record element DISP-ITEM-LENGTH is now a PIC X.

	8.2.9 DECLARATIVES

		The statements "USE AFTER ERROR ON" INPUT, OUTPUT, I-O,
		SHARED, EXTEND are not supported as they cause conflicts
		with WISP declaratives of the form 
			"USE AFTER ERROR ON filename".

	8.2.23 OPEN

		WISP now generates calls to wfopen2 instead of wfopen.

	8.3.1 RECORD LOCKING - VAX/VMS

		WISP now uses MANUAL RECORD LOCKING for all file I/O.
		The problems described in this section no longer exist.

	9 The Menuing Package

		Now available under UNIX.

	9.3 MENU FILES

		On UNIX if the menu file is not found in the current
		directory it will look in the directory pointed to
		by shell variable WISPMENU.

	10.X MAKEMSG

		This utility compiles the WISP runtime message file
		from its text form "wispmsg.txt" to its compiled
		form "wispmsg.dat".

	10.X VIEWKEY

		UNIX ONLY

		This utility will print the escape sequence generated
		when any key is pressed on the terminal. This is used to
		assist you in writing videocap files.

	10.10 WPUTPARM

		-c count	Specifies the usage count for the putparm.
				A count of zero (0) means no limit.

		The SHOW and CLEAR commands are now implemented.

		wputparm clear -l label		Will remove just the
						labeled PRB.

		wputparm clear			Will remove all PRB's.

	10.13 WRUN

		When no arguments are supplied wrun will print the runcbl
		and options that it is currently set to use.

		New options:

			-?	Print the full command that would have
				been executed. Do not execute.

			--	Execute the runcbl with no options.

	10.18 WUSAGE

		WUSAGE VERSION The current screen version number is 21.

	A.1.1 CONTENTS OF THE VMS DISTRIBUTION KIT

		*.VCAP		The videocap files.
		WISP$LINK.OPT	The options file used when generating a
				shared library.
		WISP_SHARE.COM	The DCL that will generate a shared library.
				(Note: The shared library will need to be
				       installed before becoming active.)

	A.2.1 CONTENTS OF THE UNIX DISTRIBUTION KIT

		./wisp/bin/vsload	is only distributed on selected
					ports such as AT&T 3b2.

		./wisp/bin/linecount	is not yet available on UNIX.

		./wisp/bin/vtest	Routine to test VIDEO functionality.

		./wisp/bin/viewkey	The VIEWKEY utility.

		./wisp/bin/wruncbl	The runcbl executable with the
					WISP routines linked in.

		./wisp/bin/runcbl	Replaced by wruncbl.

		./wisp/acucobol/sub.c	is not distributed this comes with
					your ACUCOBOL.

	A.2.2 INSTALLING WISP ON A UNIX SYSTEM

		(ADD THE FOLLOWING)

		WISP is sometimes distributed as a single compressed cpio 
		file named "wisp.cpio.Z". If your media has this file on the
		label then load it as follows:

		- cd to the directory where you want the wisp dir created.

		- load the file from the diskette or tape using cpio or tar
		  as specified on the label. E.g.

			$ cpio -icvB </dev/rfd0
	
		- You will now have file "wisp.cpio.Z" in your current dir.

		- Uncompress the file.

			$ uncompress wisp.cpio.Z

		- You will now have file "wisp.cpio".

		- Now un-cpio the file

			$ cpio -icvBd <wisp.cpio

		- this will create directory "wisp" and under that will
		  be directories "bin", "lib", "acucobol", "config" 

	A.2.3 BUILDING AN ACUCOBOL runcbl

		(ADD THE FOLLOWING)

		First copy the wisp library files to /usr/lib.

			$ cd (prefix)/wisp/lib
			$ cp * /usr/lib			(you may need to be su)

		Copy the wisp acucobol files into your acucobol directory

			$ cd (your acucobol dir)
			$ cp (prefix)/wisp/acucobol .

		Edit runcbl.umf (the makefile) to copy the new runcbl
		to your bin directory. You may also need to add "-lPW"
		to the library list, depending on your system. You may
		also wish to change the name of the runcbl executable
		that runcbl.umf creates.

		Now make runcbl.

			$ make -f runcbl.umf

	B.2.5 LGMAP

		If your system does an EXTRACT of "XV" or "PV" then be sure
		to setup the volumes "IPLVOL" and "PGMVOL" as these are the
		values returned.

	B.2.7.4 ACUCONFIG FILE

		The default maxium number of files allowed open is 32. On
		large applications this is often not enough. The following
		can optionally be added to ACUCONFIG to increase this 
		number to 64.

			MAXFILES 64

	B.2.7.5 wrunconfig File

		The default value for runcbl should be as follows:

			runcbl=wruncbl
	
	B.2.10 Building ACULINK

		This should say 32 parameters.

	D.4.3 FUNCTION KEYS

		(ADD THE FOLLOWING)

		trigger1		Activate the program specified by
		 ...			routine "settrigprog".	
		trigger8

		generic_newline		The NEWLINE key.

	D.6 STANDARD VIDEOCAP GENERIC KEY DEFINITIONS

		Generic next scr	^f^n
		Generic prev scr	^f^p

		Generic Newline		^fn or ^fN



