	Copyright (c) 1995 by DevTech Migrations Inc. All Rights Reserved.
	
	====================================================================
	
	Title:		LINK vssub with Micro Focus COBOL
	
	Document:	mflink.doc
	Last Updated:	17 FEB 92
	Products:	WISP/UNIX for Micro Focus COBOL
	Versions:	3.1
	
	Summary:	* * * *  IMPORTANT NOTICE  * * * *
			The procedure for using the LINK vssub from as
			described in the WISP 3.0 manual has been replaced
			by this document.

	====================================================================
	

	USING THE LINK VSSUB WITH MICRO FOCUS COBOL
	===========================================


		* * * *  IMPORTANT NOTICE  * * * *
		* * * *  IMPORTANT NOTICE  * * * *
		* * * *  IMPORTANT NOTICE  * * * *

		
	To all WISP users of:	Micro Focus COBOL/2 on UNIX
				AIX VS COBOL/6000
				Sun COBOL
				HP COBOL/HP-UX

	It was recently discovered that the current versions (1.2) of the
	Micro Focus COBOL compilers experience addressing problems in
	nested programs.   Specifically the SEARCH and IF verbs were
	occasionally failing to perform correctly when contained within
	a nested program.  (Additionally the Sun COBOL compiler would
	incorrectly shift all CALL routine names to uppercase when
	contained in a nested program.)

	The nested program feature was being used by WISP 3.0 to accomplish
	dynamic linking with parameter passing via the LINK VSSUB routine.
	Any program that contained the $LINKMAIN directive was being 
	converted into a nested program.

	To provide a solution to this problem IDSI has re-worked the 
	LINK mechanism WISP uses for Micro Focus COBOL so that it does
	not use the nested program feature.  The solution used now
	exactly parallels the ACUCOBOL solution as described in the WISP
	manual chapter 7 when using ".int" and ".gnt" files.  If you
	wish to use the native code feature of Micro Focus see the 
	description below.

	The $LINKMAIN directive is no longer supported by WISP and is
	treated as a comment.  The copybook "wisplink.cpy" is no longer
	used.  Instead the program "mflink.cob" is provided as the 
	frontend for LINK.  


	STEPS REQUIRED TO USE NEW LINK MECHANISM (.int and .gnt files)
	==============================================================

	1)	Install WISP version 3.1 following the instructions
		in Appendix A of the WISP manual.

	2)	Create file "MFLINK.int" and move it into a directory
		on the $COBPATH path.

			$ cd wisp/mf
			$ cob mflink.cob
			$ mv mflink.int MFLINK.int

	3)	Re-WISP and compile your entire system.  (It is not
		neccessary to remove $LINKMAIN from you programs as
		it is now treated as a comment.)

	4)	Run your software.

	If you experience any problems with LINK then ensure that
	your $COBPATH variable is set correctly and MFLINK.int is
	on the path.  Also ensure you are using verison 3.1 or later
	of WISP.


	COMPILING TO NATIVE CODE WITH MICRO FOCUS
	=========================================

	There are special considerations needed if the programs you are
	compiling to native code are started with a CALL "LINK" and they
	accept parameters with a "USING" phrase on the PROCEDURE DIVISION
	statement.  In order for this to work correctly the LINK frontend
	routine "mflink.cob" must be included as the first routine in
	the program.

	Example:  Program "MAINPROG" does a CALL "LINK" to program
	"SUBPROG" passing it parameters.  The program "SUBPROG" must
	have routine "mflink.cob" as the first routine.  To WISP and
	compile these two programs into two native code program perform
	the following:

	$ wisp -VMF mainprog.wcb	- create mainprog.cob
	$ wisp -VMF subprog.wcb		- create subprog.cob
	$ cob -x -o MAINPROG mainprog.cob wispmf.o -lwisp -lvideo -lm
	$ cob -x -o SUBPROG mflink.cob subprog.cob wispmf.o -lwisp  \
        >           -lvideo -lm

	NOTE:  The routine "mflink.cob" is only included for SUBPROG it is
	not needed for MAINPROG and should not be included.

	The items "wispmf.o" and "-lwisp -lvideo -lm" are required
	on every compile to include the WISP routines.  The file "wispmf.o"
	contains Micro Focus specific routines and global variables.  The
	"-l" items are libraries that contain the WISP routines.

	The above is a very simple example.  If MAINPROG or SUBPROG call
	any other routines then they would have to be added to the cob
	command following "mainprog.cob" or "subprog.cob".

	When using native code, programs are started by entering their 
	name at the command line, you can not use "wrun".  Programs
	which include "mflink.cob" can not be run directly from the 
	command line.  They can only be started by a CALL "LINK".

	A ".int" or ".gnt" program can not CALL a native code program.
	The only way to start a native code program from a ".int" or 
	".gnt" program is by a CALL "LINK".

	IMPORTANT:  If MAINPROG or SUBPROG are going to call any ".int"
	or ".gnt" files then the item "wrunmf.o" must also be included
	on the cob command after "wispmf.o".  The item "wrunmf.o" will 
	cause the entire WISP library to be included as if building
	an RTS (i.e. wrunmf).  These is required because the called
	programs may reference WISP routines that are not referenced
	by MAINPROG or SUBPROG.


	Please contact us for assistance if you experience any problems
	with these changes.


	========================= END OF DOCUMENT ==========================
